
project_limelight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004acc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004b60  08004bd8  08004bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08009738  08009738  00019738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009740  08009740  00019740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08009744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000250  20000020  08009760  00020020  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000270  08009760  00020270  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001db9a  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003aa9  00000000  00000000  0003dbdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010d8  00000000  00000000  00041688  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f40  00000000  00000000  00042760  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008690  00000000  00000000  000436a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004f60  00000000  00000000  0004bd30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00050c90  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000469c  00000000  00000000  00050d0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08004bc0 	.word	0x08004bc0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08004bc0 	.word	0x08004bc0

0800014c <_ZN6SDCardC1EP19__SPI_HandleTypeDeftP12GPIO_TypeDef>:

#include "SDCard.h"

uint8_t testbuff[4];

SDCard::SDCard(SPI_HandleTypeDef* hspi, uint16_t cs1Pin,
 800014c:	b490      	push	{r4, r7}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	603b      	str	r3, [r7, #0]
 8000158:	4613      	mov	r3, r2
 800015a:	80fb      	strh	r3, [r7, #6]
		GPIO_TypeDef* cs1Port) {
	_spi = hspi;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	68ba      	ldr	r2, [r7, #8]
 8000160:	601a      	str	r2, [r3, #0]
	_cs1Pin = cs1Pin;
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	88fa      	ldrh	r2, [r7, #6]
 8000166:	811a      	strh	r2, [r3, #8]
	_cs1Port = cs1Port;
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	683a      	ldr	r2, [r7, #0]
 800016c:	605a      	str	r2, [r3, #4]
	_sdSize = 0;
 800016e:	68fa      	ldr	r2, [r7, #12]
 8000170:	f04f 0300 	mov.w	r3, #0
 8000174:	f04f 0400 	mov.w	r4, #0
 8000178:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	4618      	mov	r0, r3
 8000180:	3710      	adds	r7, #16
 8000182:	46bd      	mov	sp, r7
 8000184:	bc90      	pop	{r4, r7}
 8000186:	4770      	bx	lr

08000188 <_ZN6SDCard7getSizeEv>:

uint32_t SDCard::getSize() {
 8000188:	b590      	push	{r4, r7, lr}
 800018a:	b08b      	sub	sp, #44	; 0x2c
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
	if (_sdSize == 0) {
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	f103 0410 	add.w	r4, r3, #16
 8000196:	e9d4 3400 	ldrd	r3, r4, [r4]
 800019a:	4323      	orrs	r3, r4
 800019c:	d167      	bne.n	800026e <_ZN6SDCard7getSizeEv+0xe6>
		//We have not read the disk size just yet :O
		csd_t csd;
		if (!readCSD(&csd))
 800019e:	f107 030c 	add.w	r3, r7, #12
 80001a2:	4619      	mov	r1, r3
 80001a4:	6878      	ldr	r0, [r7, #4]
 80001a6:	f003 fd18 	bl	8003bda <_ZN6SDCard7readCSDEP5csd_t>
 80001aa:	4603      	mov	r3, r0
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	bf0c      	ite	eq
 80001b0:	2301      	moveq	r3, #1
 80001b2:	2300      	movne	r3, #0
 80001b4:	b2db      	uxtb	r3, r3
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <_ZN6SDCard7getSizeEv+0x36>
			return 0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	e05c      	b.n	8000278 <_ZN6SDCard7getSizeEv+0xf0>
		if (csd.v1.csd_ver == 0) {
 80001be:	7b3b      	ldrb	r3, [r7, #12]
 80001c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80001c4:	b2db      	uxtb	r3, r3
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d137      	bne.n	800023a <_ZN6SDCard7getSizeEv+0xb2>
			uint8_t read_bl_len = csd.v1.read_bl_len;
 80001ca:	7c7b      	ldrb	r3, [r7, #17]
 80001cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			uint16_t c_size = (csd.v1.c_size_high << 10)
 80001d6:	7cbb      	ldrb	r3, [r7, #18]
 80001d8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	029b      	lsls	r3, r3, #10
					| (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
 80001e0:	b21a      	sxth	r2, r3
 80001e2:	7cfb      	ldrb	r3, [r7, #19]
 80001e4:	009b      	lsls	r3, r3, #2
 80001e6:	b21b      	sxth	r3, r3
 80001e8:	4313      	orrs	r3, r2
 80001ea:	b21a      	sxth	r2, r3
 80001ec:	7d3b      	ldrb	r3, [r7, #20]
 80001ee:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	b21b      	sxth	r3, r3
 80001f6:	4313      	orrs	r3, r2
 80001f8:	b21b      	sxth	r3, r3
 80001fa:	84bb      	strh	r3, [r7, #36]	; 0x24
			uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
 80001fc:	7d7b      	ldrb	r3, [r7, #21]
 80001fe:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000202:	b2db      	uxtb	r3, r3
 8000204:	005b      	lsls	r3, r3, #1
					| csd.v1.c_size_mult_low;
 8000206:	b25a      	sxtb	r2, r3
 8000208:	7dbb      	ldrb	r3, [r7, #22]
 800020a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800020e:	b2db      	uxtb	r3, r3
 8000210:	b25b      	sxtb	r3, r3
 8000212:	4313      	orrs	r3, r2
 8000214:	b25b      	sxtb	r3, r3
 8000216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			c_size = (uint32_t) (c_size + 1) << (c_size_mult + read_bl_len - 7);
 800021a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800021c:	3301      	adds	r3, #1
 800021e:	4619      	mov	r1, r3
 8000220:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000228:	4413      	add	r3, r2
 800022a:	3b07      	subs	r3, #7
 800022c:	fa01 f303 	lsl.w	r3, r1, r3
 8000230:	84bb      	strh	r3, [r7, #36]	; 0x24
			c_size /= 1024;
 8000232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000234:	0a9b      	lsrs	r3, r3, #10
 8000236:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000238:	e019      	b.n	800026e <_ZN6SDCard7getSizeEv+0xe6>
		} else if (csd.v2.csd_ver == 1) {
 800023a:	7b3b      	ldrb	r3, [r7, #12]
 800023c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000240:	b2db      	uxtb	r3, r3
 8000242:	2b40      	cmp	r3, #64	; 0x40
 8000244:	d113      	bne.n	800026e <_ZN6SDCard7getSizeEv+0xe6>
			uint32_t c_size = ((uint32_t) csd.v2.c_size_high << 16)
 8000246:	7cfb      	ldrb	r3, [r7, #19]
 8000248:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800024c:	b2db      	uxtb	r3, r3
 800024e:	041b      	lsls	r3, r3, #16
					| (csd.v2.c_size_mid << 8) | csd.v2.c_size_low;
 8000250:	7d3a      	ldrb	r2, [r7, #20]
 8000252:	0212      	lsls	r2, r2, #8
 8000254:	4313      	orrs	r3, r2
 8000256:	7d7a      	ldrb	r2, [r7, #21]
 8000258:	4313      	orrs	r3, r2
 800025a:	61fb      	str	r3, [r7, #28]
			c_size *= 1024;
 800025c:	69fb      	ldr	r3, [r7, #28]
 800025e:	029b      	lsls	r3, r3, #10
 8000260:	61fb      	str	r3, [r7, #28]
			_sdSize = c_size;
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	f04f 0400 	mov.w	r4, #0
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	e9c2 3404 	strd	r3, r4, [r2, #16]

		} else {
		}
	}
	return _sdSize;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f103 0410 	add.w	r4, r3, #16
 8000274:	e9d4 3400 	ldrd	r3, r4, [r4]
}
 8000278:	4618      	mov	r0, r3
 800027a:	372c      	adds	r7, #44	; 0x2c
 800027c:	46bd      	mov	sp, r7
 800027e:	bd90      	pop	{r4, r7, pc}

08000280 <_ZN6SDCard12readRegisterEhPv>:
/** read CID or CSR register */
uint8_t SDCard::readRegister(uint8_t cmd, void* buf) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	460b      	mov	r3, r1
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	72fb      	strb	r3, [r7, #11]
	uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	617b      	str	r3, [r7, #20]
	if (cardCommand(cmd, 0)) {
 8000292:	7afb      	ldrb	r3, [r7, #11]
 8000294:	2200      	movs	r2, #0
 8000296:	4619      	mov	r1, r3
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f000 f9cb 	bl	8000634 <_ZN6SDCard11cardCommandEhm>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	bf14      	ite	ne
 80002a4:	2301      	movne	r3, #1
 80002a6:	2300      	moveq	r3, #0
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d004      	beq.n	80002b8 <_ZN6SDCard12readRegisterEhPv+0x38>
		deselectCard();
 80002ae:	68f8      	ldr	r0, [r7, #12]
 80002b0:	f000 faf4 	bl	800089c <_ZN6SDCard12deselectCardEv>
		return false;
 80002b4:	2300      	movs	r3, #0
 80002b6:	e023      	b.n	8000300 <_ZN6SDCard12readRegisterEhPv+0x80>
	}
	uint8_t temp = 0xFF;
 80002b8:	23ff      	movs	r3, #255	; 0xff
 80002ba:	74fb      	strb	r3, [r7, #19]
	while (temp == 0xFF) {
 80002bc:	7cfb      	ldrb	r3, [r7, #19]
 80002be:	2bff      	cmp	r3, #255	; 0xff
 80002c0:	d107      	bne.n	80002d2 <_ZN6SDCard12readRegisterEhPv+0x52>
		SPI_Recieve(&temp, 1);
 80002c2:	f107 0313 	add.w	r3, r7, #19
 80002c6:	2201      	movs	r2, #1
 80002c8:	4619      	mov	r1, r3
 80002ca:	68f8      	ldr	r0, [r7, #12]
 80002cc:	f000 fa18 	bl	8000700 <_ZN6SDCard11SPI_RecieveEPht>
	while (temp == 0xFF) {
 80002d0:	e7f4      	b.n	80002bc <_ZN6SDCard12readRegisterEhPv+0x3c>
	}
	// transfer data
	SPI_Recieve(dst, 16);
 80002d2:	2210      	movs	r2, #16
 80002d4:	6979      	ldr	r1, [r7, #20]
 80002d6:	68f8      	ldr	r0, [r7, #12]
 80002d8:	f000 fa12 	bl	8000700 <_ZN6SDCard11SPI_RecieveEPht>
	SPI_Recieve(&temp, 1); //CRC1
 80002dc:	f107 0313 	add.w	r3, r7, #19
 80002e0:	2201      	movs	r2, #1
 80002e2:	4619      	mov	r1, r3
 80002e4:	68f8      	ldr	r0, [r7, #12]
 80002e6:	f000 fa0b 	bl	8000700 <_ZN6SDCard11SPI_RecieveEPht>
	SPI_Recieve(&temp, 1); //CRC2
 80002ea:	f107 0313 	add.w	r3, r7, #19
 80002ee:	2201      	movs	r2, #1
 80002f0:	4619      	mov	r1, r3
 80002f2:	68f8      	ldr	r0, [r7, #12]
 80002f4:	f000 fa04 	bl	8000700 <_ZN6SDCard11SPI_RecieveEPht>
	deselectCard();
 80002f8:	68f8      	ldr	r0, [r7, #12]
 80002fa:	f000 facf 	bl	800089c <_ZN6SDCard12deselectCardEv>
	return true;
 80002fe:	2301      	movs	r3, #1
}
 8000300:	4618      	mov	r0, r3
 8000302:	3718      	adds	r7, #24
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <_ZN6SDCard9readBlockEmPh>:
bool SDCard::readBlock(uint32_t blockaddr, uint8_t* buffer) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0
 800030e:	60f8      	str	r0, [r7, #12]
 8000310:	60b9      	str	r1, [r7, #8]
 8000312:	607a      	str	r2, [r7, #4]
	if (cardCommand(CMD17, blockaddr)) {
 8000314:	68ba      	ldr	r2, [r7, #8]
 8000316:	2111      	movs	r1, #17
 8000318:	68f8      	ldr	r0, [r7, #12]
 800031a:	f000 f98b 	bl	8000634 <_ZN6SDCard11cardCommandEhm>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	bf14      	ite	ne
 8000324:	2301      	movne	r3, #1
 8000326:	2300      	moveq	r3, #0
 8000328:	b2db      	uxtb	r3, r3
 800032a:	2b00      	cmp	r3, #0
 800032c:	d004      	beq.n	8000338 <_ZN6SDCard9readBlockEmPh+0x30>
		/*
		 * Error
		 */
		deselectCard();
 800032e:	68f8      	ldr	r0, [r7, #12]
 8000330:	f000 fab4 	bl	800089c <_ZN6SDCard12deselectCardEv>
		return false;
 8000334:	2300      	movs	r3, #0
 8000336:	e029      	b.n	800038c <_ZN6SDCard9readBlockEmPh+0x84>
	}
	uint8_t temp = 0xFF;
 8000338:	23ff      	movs	r3, #255	; 0xff
 800033a:	75fb      	strb	r3, [r7, #23]
	while (temp == 0xFF) {
 800033c:	7dfb      	ldrb	r3, [r7, #23]
 800033e:	2bff      	cmp	r3, #255	; 0xff
 8000340:	d108      	bne.n	8000354 <_ZN6SDCard9readBlockEmPh+0x4c>
		HAL_SPI_Receive(_spi, &temp, 1, 100);
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	6818      	ldr	r0, [r3, #0]
 8000346:	f107 0117 	add.w	r1, r7, #23
 800034a:	2364      	movs	r3, #100	; 0x64
 800034c:	2201      	movs	r2, #1
 800034e:	f002 f9c6 	bl	80026de <HAL_SPI_Receive>
	while (temp == 0xFF) {
 8000352:	e7f3      	b.n	800033c <_ZN6SDCard9readBlockEmPh+0x34>
	}

	SPI_Recieve(buffer, 512);
 8000354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000358:	6879      	ldr	r1, [r7, #4]
 800035a:	68f8      	ldr	r0, [r7, #12]
 800035c:	f000 f9d0 	bl	8000700 <_ZN6SDCard11SPI_RecieveEPht>
	//eat the CRC
	temp = 0xFF;
 8000360:	23ff      	movs	r3, #255	; 0xff
 8000362:	75fb      	strb	r3, [r7, #23]
	SPI_Recieve(&temp, 1);
 8000364:	f107 0317 	add.w	r3, r7, #23
 8000368:	2201      	movs	r2, #1
 800036a:	4619      	mov	r1, r3
 800036c:	68f8      	ldr	r0, [r7, #12]
 800036e:	f000 f9c7 	bl	8000700 <_ZN6SDCard11SPI_RecieveEPht>
	temp = 0xFF;
 8000372:	23ff      	movs	r3, #255	; 0xff
 8000374:	75fb      	strb	r3, [r7, #23]
	SPI_Recieve(&temp, 1);
 8000376:	f107 0317 	add.w	r3, r7, #23
 800037a:	2201      	movs	r2, #1
 800037c:	4619      	mov	r1, r3
 800037e:	68f8      	ldr	r0, [r7, #12]
 8000380:	f000 f9be 	bl	8000700 <_ZN6SDCard11SPI_RecieveEPht>
	deselectCard();
 8000384:	68f8      	ldr	r0, [r7, #12]
 8000386:	f000 fa89 	bl	800089c <_ZN6SDCard12deselectCardEv>
	return true;
 800038a:	2301      	movs	r3, #1
}
 800038c:	4618      	mov	r0, r3
 800038e:	3718      	adds	r7, #24
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <_ZN6SDCard10writeBlockEmPh>:

bool SDCard::writeBlock(uint32_t blockaddr, uint8_t* buffer) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
	//The cardCommand will select the card so we have to make sure we clean up
	if (cardCommand(CMD24, blockaddr)) {
 80003a0:	68ba      	ldr	r2, [r7, #8]
 80003a2:	2118      	movs	r1, #24
 80003a4:	68f8      	ldr	r0, [r7, #12]
 80003a6:	f000 f945 	bl	8000634 <_ZN6SDCard11cardCommandEhm>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	bf14      	ite	ne
 80003b0:	2301      	movne	r3, #1
 80003b2:	2300      	moveq	r3, #0
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d004      	beq.n	80003c4 <_ZN6SDCard10writeBlockEmPh+0x30>
		/*
		 * Error
		 */
		deselectCard();
 80003ba:	68f8      	ldr	r0, [r7, #12]
 80003bc:	f000 fa6e 	bl	800089c <_ZN6SDCard12deselectCardEv>
		return false;
 80003c0:	2300      	movs	r3, #0
 80003c2:	e05c      	b.n	800047e <_ZN6SDCard10writeBlockEmPh+0xea>
	}
	/*
	 * Write the data
	 */
	uint8_t temp = DATA_START_BLOCK;
 80003c4:	23fe      	movs	r3, #254	; 0xfe
 80003c6:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(_spi, &temp, 1, 100);
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	6818      	ldr	r0, [r3, #0]
 80003cc:	f107 0117 	add.w	r1, r7, #23
 80003d0:	2364      	movs	r3, #100	; 0x64
 80003d2:	2201      	movs	r2, #1
 80003d4:	f002 f848 	bl	8002468 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_spi, buffer, 512,100);
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	6818      	ldr	r0, [r3, #0]
 80003dc:	2364      	movs	r3, #100	; 0x64
 80003de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003e2:	6879      	ldr	r1, [r7, #4]
 80003e4:	f002 f840 	bl	8002468 <HAL_SPI_Transmit>

	temp = 0xFF;
 80003e8:	23ff      	movs	r3, #255	; 0xff
 80003ea:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(_spi, &temp, 1, 100);
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	6818      	ldr	r0, [r3, #0]
 80003f0:	f107 0117 	add.w	r1, r7, #23
 80003f4:	2364      	movs	r3, #100	; 0x64
 80003f6:	2201      	movs	r2, #1
 80003f8:	f002 f836 	bl	8002468 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_spi, &temp, 1, 100);
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	6818      	ldr	r0, [r3, #0]
 8000400:	f107 0117 	add.w	r1, r7, #23
 8000404:	2364      	movs	r3, #100	; 0x64
 8000406:	2201      	movs	r2, #1
 8000408:	f002 f82e 	bl	8002468 <HAL_SPI_Transmit>
	//read response
	SPI_Recieve(&temp, 1);
 800040c:	f107 0317 	add.w	r3, r7, #23
 8000410:	2201      	movs	r2, #1
 8000412:	4619      	mov	r1, r3
 8000414:	68f8      	ldr	r0, [r7, #12]
 8000416:	f000 f973 	bl	8000700 <_ZN6SDCard11SPI_RecieveEPht>
	if ((temp & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 800041a:	7dfb      	ldrb	r3, [r7, #23]
 800041c:	f003 031f 	and.w	r3, r3, #31
 8000420:	2b05      	cmp	r3, #5
 8000422:	d004      	beq.n	800042e <_ZN6SDCard10writeBlockEmPh+0x9a>
		/*
		 * Error
		 */
		deselectCard();
 8000424:	68f8      	ldr	r0, [r7, #12]
 8000426:	f000 fa39 	bl	800089c <_ZN6SDCard12deselectCardEv>
		return false;
 800042a:	2300      	movs	r3, #0
 800042c:	e027      	b.n	800047e <_ZN6SDCard10writeBlockEmPh+0xea>
	}
	// wait for flash programming to complete
	waitUntilReady();
 800042e:	68f8      	ldr	r0, [r7, #12]
 8000430:	f000 f829 	bl	8000486 <_ZN6SDCard14waitUntilReadyEv>

	// response is r2 so get and check two bytes for nonzero
	if (cardCommand(CMD13, 0)) {
 8000434:	2200      	movs	r2, #0
 8000436:	210d      	movs	r1, #13
 8000438:	68f8      	ldr	r0, [r7, #12]
 800043a:	f000 f8fb 	bl	8000634 <_ZN6SDCard11cardCommandEhm>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	bf14      	ite	ne
 8000444:	2301      	movne	r3, #1
 8000446:	2300      	moveq	r3, #0
 8000448:	b2db      	uxtb	r3, r3
 800044a:	2b00      	cmp	r3, #0
 800044c:	d004      	beq.n	8000458 <_ZN6SDCard10writeBlockEmPh+0xc4>
		/*
		 * Error
		 */
		deselectCard();
 800044e:	68f8      	ldr	r0, [r7, #12]
 8000450:	f000 fa24 	bl	800089c <_ZN6SDCard12deselectCardEv>
		return false;
 8000454:	2300      	movs	r3, #0
 8000456:	e012      	b.n	800047e <_ZN6SDCard10writeBlockEmPh+0xea>
	}
	SPI_Recieve(&temp, 1);
 8000458:	f107 0317 	add.w	r3, r7, #23
 800045c:	2201      	movs	r2, #1
 800045e:	4619      	mov	r1, r3
 8000460:	68f8      	ldr	r0, [r7, #12]
 8000462:	f000 f94d 	bl	8000700 <_ZN6SDCard11SPI_RecieveEPht>
	if (temp) {
 8000466:	7dfb      	ldrb	r3, [r7, #23]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d004      	beq.n	8000476 <_ZN6SDCard10writeBlockEmPh+0xe2>
		/*
		 * Error
		 */
		deselectCard();
 800046c:	68f8      	ldr	r0, [r7, #12]
 800046e:	f000 fa15 	bl	800089c <_ZN6SDCard12deselectCardEv>
		return false;
 8000472:	2300      	movs	r3, #0
 8000474:	e003      	b.n	800047e <_ZN6SDCard10writeBlockEmPh+0xea>
	}
	deselectCard();
 8000476:	68f8      	ldr	r0, [r7, #12]
 8000478:	f000 fa10 	bl	800089c <_ZN6SDCard12deselectCardEv>
	return true;
 800047c:	2301      	movs	r3, #1
}
 800047e:	4618      	mov	r0, r3
 8000480:	3718      	adds	r7, #24
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <_ZN6SDCard14waitUntilReadyEv>:

void SDCard::waitUntilReady() {
 8000486:	b580      	push	{r7, lr}
 8000488:	b086      	sub	sp, #24
 800048a:	af02      	add	r7, sp, #8
 800048c:	6078      	str	r0, [r7, #4]
	uint8_t ans = 0xFF;
 800048e:	23ff      	movs	r3, #255	; 0xff
 8000490:	73fb      	strb	r3, [r7, #15]
	uint8_t res = 0xFF;
 8000492:	23ff      	movs	r3, #255	; 0xff
 8000494:	73bb      	strb	r3, [r7, #14]
	while (res != 0xFF) {
 8000496:	7bbb      	ldrb	r3, [r7, #14]
 8000498:	2bff      	cmp	r3, #255	; 0xff
 800049a:	d00b      	beq.n	80004b4 <_ZN6SDCard14waitUntilReadyEv+0x2e>
		HAL_SPI_TransmitReceive(_spi,&ans,&res ,1,1);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	6818      	ldr	r0, [r3, #0]
 80004a0:	f107 020e 	add.w	r2, r7, #14
 80004a4:	f107 010f 	add.w	r1, r7, #15
 80004a8:	2301      	movs	r3, #1
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	2301      	movs	r3, #1
 80004ae:	f002 fa24 	bl	80028fa <HAL_SPI_TransmitReceive>
	while (res != 0xFF) {
 80004b2:	e7f0      	b.n	8000496 <_ZN6SDCard14waitUntilReadyEv+0x10>
	}
}
 80004b4:	bf00      	nop
 80004b6:	3710      	adds	r7, #16
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <_ZN6SDCard9initalizeEv>:

bool SDCard::initalize() {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	6078      	str	r0, [r7, #4]
	_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; //slow down at first
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2238      	movs	r2, #56	; 0x38
 80004ca:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(_spi); //apply the speed change
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f002 fd1b 	bl	8002f0c <HAL_SPI_Init>
	deselectCard();
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f000 f9e0 	bl	800089c <_ZN6SDCard12deselectCardEv>
//We must supply at least 74 clocks with CS high
	uint8_t buffer[4] = { 0xFF, 0xFF, 0xFF, 0xFF };
 80004dc:	4b53      	ldr	r3, [pc, #332]	; (800062c <_ZN6SDCard9initalizeEv+0x170>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	60bb      	str	r3, [r7, #8]
	HAL_SPI_TransmitReceive(_spi, buffer,testbuff, 4, 100);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6818      	ldr	r0, [r3, #0]
 80004e6:	f107 0108 	add.w	r1, r7, #8
 80004ea:	2364      	movs	r3, #100	; 0x64
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2304      	movs	r3, #4
 80004f0:	4a4f      	ldr	r2, [pc, #316]	; (8000630 <_ZN6SDCard9initalizeEv+0x174>)
 80004f2:	f002 fa02 	bl	80028fa <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(_spi, buffer,testbuff, 4, 100);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6818      	ldr	r0, [r3, #0]
 80004fa:	f107 0108 	add.w	r1, r7, #8
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2304      	movs	r3, #4
 8000504:	4a4a      	ldr	r2, [pc, #296]	; (8000630 <_ZN6SDCard9initalizeEv+0x174>)
 8000506:	f002 f9f8 	bl	80028fa <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(_spi, buffer,testbuff, 4, 100);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6818      	ldr	r0, [r3, #0]
 800050e:	f107 0108 	add.w	r1, r7, #8
 8000512:	2364      	movs	r3, #100	; 0x64
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2304      	movs	r3, #4
 8000518:	4a45      	ldr	r2, [pc, #276]	; (8000630 <_ZN6SDCard9initalizeEv+0x174>)
 800051a:	f002 f9ee 	bl	80028fa <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(_spi, buffer,testbuff, 4, 100);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6818      	ldr	r0, [r3, #0]
 8000522:	f107 0108 	add.w	r1, r7, #8
 8000526:	2364      	movs	r3, #100	; 0x64
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2304      	movs	r3, #4
 800052c:	4a40      	ldr	r2, [pc, #256]	; (8000630 <_ZN6SDCard9initalizeEv+0x174>)
 800052e:	f002 f9e4 	bl	80028fa <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(_spi, buffer,testbuff, 4, 100);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6818      	ldr	r0, [r3, #0]
 8000536:	f107 0108 	add.w	r1, r7, #8
 800053a:	2364      	movs	r3, #100	; 0x64
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2304      	movs	r3, #4
 8000540:	4a3b      	ldr	r2, [pc, #236]	; (8000630 <_ZN6SDCard9initalizeEv+0x174>)
 8000542:	f002 f9da 	bl	80028fa <HAL_SPI_TransmitReceive>
	HAL_Delay(5);
 8000546:	2005      	movs	r0, #5
 8000548:	f000 fd2c 	bl	8000fa4 <HAL_Delay>
	selectCard();
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f000 f8c7 	bl	80006e0 <_ZN6SDCard10selectCardEv>
	uint8_t status;
	// command to go idle in SPI mode
	while ((status = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f000 f86c 	bl	8000634 <_ZN6SDCard11cardCommandEhm>
 800055c:	4603      	mov	r3, r0
 800055e:	73fb      	strb	r3, [r7, #15]
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	2b01      	cmp	r3, #1
 8000564:	bf14      	ite	ne
 8000566:	2301      	movne	r3, #1
 8000568:	2300      	moveq	r3, #0
 800056a:	b2db      	uxtb	r3, r3
 800056c:	2b00      	cmp	r3, #0
 800056e:	d000      	beq.n	8000572 <_ZN6SDCard9initalizeEv+0xb6>
 8000570:	e7ef      	b.n	8000552 <_ZN6SDCard9initalizeEv+0x96>
	}
	// check SD version
	if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
 8000572:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8000576:	2108      	movs	r1, #8
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f000 f85b 	bl	8000634 <_ZN6SDCard11cardCommandEhm>
 800057e:	4603      	mov	r3, r0
 8000580:	f003 0304 	and.w	r3, r3, #4
 8000584:	2b00      	cmp	r3, #0
 8000586:	bf14      	ite	ne
 8000588:	2301      	movne	r3, #1
 800058a:	2300      	moveq	r3, #0
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d004      	beq.n	800059c <_ZN6SDCard9initalizeEv+0xe0>
		deselectCard();
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 f982 	bl	800089c <_ZN6SDCard12deselectCardEv>
		return false; //Unsupported
 8000598:	2300      	movs	r3, #0
 800059a:	e043      	b.n	8000624 <_ZN6SDCard9initalizeEv+0x168>
	} else {
		// only need last byte of r7 response
		HAL_SPI_Receive(_spi, buffer, 4, 100);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6818      	ldr	r0, [r3, #0]
 80005a0:	f107 0108 	add.w	r1, r7, #8
 80005a4:	2364      	movs	r3, #100	; 0x64
 80005a6:	2204      	movs	r2, #4
 80005a8:	f002 f899 	bl	80026de <HAL_SPI_Receive>
		if (buffer[3] != 0XAA) {
 80005ac:	7afb      	ldrb	r3, [r7, #11]
 80005ae:	2baa      	cmp	r3, #170	; 0xaa
 80005b0:	d001      	beq.n	80005b6 <_ZN6SDCard9initalizeEv+0xfa>
			return false; //failed check
 80005b2:	2300      	movs	r3, #0
 80005b4:	e036      	b.n	8000624 <_ZN6SDCard9initalizeEv+0x168>
		}

	}
	// initialize card and send host supports SDHC
	while ((status = cardAcmd(ACMD41, 0X40000000)) != R1_READY_STATE) {
 80005b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ba:	2129      	movs	r1, #41	; 0x29
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f003 faf5 	bl	8003bac <_ZN6SDCard8cardAcmdEhm>
 80005c2:	4603      	mov	r3, r0
 80005c4:	73fb      	strb	r3, [r7, #15]
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	bf14      	ite	ne
 80005cc:	2301      	movne	r3, #1
 80005ce:	2300      	moveq	r3, #0
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d000      	beq.n	80005d8 <_ZN6SDCard9initalizeEv+0x11c>
 80005d6:	e7ee      	b.n	80005b6 <_ZN6SDCard9initalizeEv+0xfa>

	}
	// if SD2 read OCR register to check for SDHC card
	if (cardCommand(CMD58, 0)) {
 80005d8:	2200      	movs	r2, #0
 80005da:	213a      	movs	r1, #58	; 0x3a
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f829 	bl	8000634 <_ZN6SDCard11cardCommandEhm>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	bf14      	ite	ne
 80005e8:	2301      	movne	r3, #1
 80005ea:	2300      	moveq	r3, #0
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d004      	beq.n	80005fc <_ZN6SDCard9initalizeEv+0x140>
		deselectCard();
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f000 f952 	bl	800089c <_ZN6SDCard12deselectCardEv>
		return false;
 80005f8:	2300      	movs	r3, #0
 80005fa:	e013      	b.n	8000624 <_ZN6SDCard9initalizeEv+0x168>
	}
	//discard OCR reg

	SPI_Recieve(buffer, 4);
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2204      	movs	r2, #4
 8000602:	4619      	mov	r1, r3
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f87b 	bl	8000700 <_ZN6SDCard11SPI_RecieveEPht>
	deselectCard();
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f946 	bl	800089c <_ZN6SDCard12deselectCardEv>
	_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2; //speed back up
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(_spi); //apply the speed change
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fc75 	bl	8002f0c <HAL_SPI_Init>
	return true;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	08004c04 	.word	0x08004c04
 8000630:	2000003c 	.word	0x2000003c

08000634 <_ZN6SDCard11cardCommandEhm>:

uint8_t SDCard::cardCommand(uint8_t command, uint32_t arg) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	460b      	mov	r3, r1
 800063e:	607a      	str	r2, [r7, #4]
 8000640:	72fb      	strb	r3, [r7, #11]
	uint8_t res = 0xFF;
 8000642:	23ff      	movs	r3, #255	; 0xff
 8000644:	75bb      	strb	r3, [r7, #22]
	selectCard();
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f000 f84a 	bl	80006e0 <_ZN6SDCard10selectCardEv>
	waitUntilReady(); //wait for card to no longer be busy
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff ff1a 	bl	8000486 <_ZN6SDCard14waitUntilReadyEv>
	uint8_t commandSequence[] = { (uint8_t) (command | 0x40), (uint8_t) (arg
			>> 24), (uint8_t) (arg >> 16), (uint8_t) (arg >> 8), (uint8_t) (arg
			& 0xFF), 0xFF };
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	809a      	strh	r2, [r3, #4]
 800065c:	23ff      	movs	r3, #255	; 0xff
 800065e:	757b      	strb	r3, [r7, #21]
	uint8_t commandSequence[] = { (uint8_t) (command | 0x40), (uint8_t) (arg
 8000660:	7afb      	ldrb	r3, [r7, #11]
 8000662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000666:	b2db      	uxtb	r3, r3
			& 0xFF), 0xFF };
 8000668:	743b      	strb	r3, [r7, #16]
			>> 24), (uint8_t) (arg >> 16), (uint8_t) (arg >> 8), (uint8_t) (arg
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	0e1b      	lsrs	r3, r3, #24
			& 0xFF), 0xFF };
 800066e:	b2db      	uxtb	r3, r3
 8000670:	747b      	strb	r3, [r7, #17]
			>> 24), (uint8_t) (arg >> 16), (uint8_t) (arg >> 8), (uint8_t) (arg
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	0c1b      	lsrs	r3, r3, #16
			& 0xFF), 0xFF };
 8000676:	b2db      	uxtb	r3, r3
 8000678:	74bb      	strb	r3, [r7, #18]
			>> 24), (uint8_t) (arg >> 16), (uint8_t) (arg >> 8), (uint8_t) (arg
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	0a1b      	lsrs	r3, r3, #8
			& 0xFF), 0xFF };
 800067e:	b2db      	uxtb	r3, r3
 8000680:	74fb      	strb	r3, [r7, #19]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	753b      	strb	r3, [r7, #20]
	if (command == CMD0)
 8000688:	7afb      	ldrb	r3, [r7, #11]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d102      	bne.n	8000694 <_ZN6SDCard11cardCommandEhm+0x60>
		commandSequence[5] = 0x95;
 800068e:	2395      	movs	r3, #149	; 0x95
 8000690:	757b      	strb	r3, [r7, #21]
 8000692:	e004      	b.n	800069e <_ZN6SDCard11cardCommandEhm+0x6a>
	else if (command == CMD8)
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	2b08      	cmp	r3, #8
 8000698:	d101      	bne.n	800069e <_ZN6SDCard11cardCommandEhm+0x6a>
		commandSequence[5] = 0x87;
 800069a:	2387      	movs	r3, #135	; 0x87
 800069c:	757b      	strb	r3, [r7, #21]
	HAL_SPI_Transmit(_spi, commandSequence, 6, 100);
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	6818      	ldr	r0, [r3, #0]
 80006a2:	f107 0110 	add.w	r1, r7, #16
 80006a6:	2364      	movs	r3, #100	; 0x64
 80006a8:	2206      	movs	r2, #6
 80006aa:	f001 fedd 	bl	8002468 <HAL_SPI_Transmit>
	//Data sent, now await Response
	uint8_t count = 20;
 80006ae:	2314      	movs	r3, #20
 80006b0:	75fb      	strb	r3, [r7, #23]
	while ((res & 0x80) && count) {
 80006b2:	7dbb      	ldrb	r3, [r7, #22]
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	da0d      	bge.n	80006d6 <_ZN6SDCard11cardCommandEhm+0xa2>
 80006ba:	7dfb      	ldrb	r3, [r7, #23]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d00a      	beq.n	80006d6 <_ZN6SDCard11cardCommandEhm+0xa2>
		SPI_Recieve(&res, 1);
 80006c0:	f107 0316 	add.w	r3, r7, #22
 80006c4:	2201      	movs	r2, #1
 80006c6:	4619      	mov	r1, r3
 80006c8:	68f8      	ldr	r0, [r7, #12]
 80006ca:	f000 f819 	bl	8000700 <_ZN6SDCard11SPI_RecieveEPht>
		count--;
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	75fb      	strb	r3, [r7, #23]
	while ((res & 0x80) && count) {
 80006d4:	e7ed      	b.n	80006b2 <_ZN6SDCard11cardCommandEhm+0x7e>
	}
	return res;
 80006d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <_ZN6SDCard10selectCardEv>:

void SDCard::selectCard() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_cs1Port, _cs1Pin, GPIO_PIN_RESET);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6858      	ldr	r0, [r3, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	891b      	ldrh	r3, [r3, #8]
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	f001 fa65 	bl	8001bc2 <HAL_GPIO_WritePin>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <_ZN6SDCard11SPI_RecieveEPht>:

HAL_StatusTypeDef SDCard::SPI_Recieve(uint8_t* pData, uint16_t Size) {
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b089      	sub	sp, #36	; 0x24
 8000704:	af02      	add	r7, sp, #8
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	4613      	mov	r3, r2
 800070c:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef errorcode = HAL_OK;
 800070e:	2300      	movs	r3, #0
 8000710:	75fb      	strb	r3, [r7, #23]

	/* Process Locked */
	__HAL_LOCK(_spi);
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800071a:	2b01      	cmp	r3, #1
 800071c:	d101      	bne.n	8000722 <_ZN6SDCard11SPI_RecieveEPht+0x22>
 800071e:	2302      	movs	r3, #2
 8000720:	e0b8      	b.n	8000894 <_ZN6SDCard11SPI_RecieveEPht+0x194>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2201      	movs	r2, #1
 8000728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
	if (_spi->State == HAL_SPI_STATE_READY) {
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b01      	cmp	r3, #1
 8000738:	bf0c      	ite	eq
 800073a:	2301      	moveq	r3, #1
 800073c:	2300      	movne	r3, #0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	d004      	beq.n	800074e <_ZN6SDCard11SPI_RecieveEPht+0x4e>
		_spi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2205      	movs	r2, #5
 800074a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	}

	/* Set the transaction information */
	_spi->ErrorCode = HAL_SPI_ERROR_NONE;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2200      	movs	r2, #0
 8000754:	655a      	str	r2, [r3, #84]	; 0x54
	_spi->pRxBuffPtr = (uint8_t *) pData;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	639a      	str	r2, [r3, #56]	; 0x38
	_spi->RxXferCount = Size;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	88fa      	ldrh	r2, [r7, #6]
 8000764:	87da      	strh	r2, [r3, #62]	; 0x3e
	_spi->RxXferSize = Size;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	88fa      	ldrh	r2, [r7, #6]
 800076c:	879a      	strh	r2, [r3, #60]	; 0x3c
	_spi->pTxBuffPtr = (uint8_t *) pData;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	631a      	str	r2, [r3, #48]	; 0x30
	_spi->TxXferCount = Size;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	88fa      	ldrh	r2, [r7, #6]
 800077c:	86da      	strh	r2, [r3, #54]	; 0x36
	_spi->TxXferSize = Size;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	88fa      	ldrh	r2, [r7, #6]
 8000784:	869a      	strh	r2, [r3, #52]	; 0x34

	/*Init field not used in handle to zero */
	_spi->RxISR = NULL;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2200      	movs	r2, #0
 800078c:	641a      	str	r2, [r3, #64]	; 0x40
	_spi->TxISR = NULL;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2200      	movs	r2, #0
 8000794:	645a      	str	r2, [r3, #68]	; 0x44
	/* Check if the SPI is already enabled */
	if ((_spi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007a2:	2b40      	cmp	r3, #64	; 0x40
 80007a4:	bf14      	ite	ne
 80007a6:	2301      	movne	r3, #1
 80007a8:	2300      	moveq	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d009      	beq.n	80007c4 <_ZN6SDCard11SPI_RecieveEPht+0xc4>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(_spi);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	6812      	ldr	r2, [r2, #0]
 80007ba:	6812      	ldr	r2, [r2, #0]
 80007bc:	6812      	ldr	r2, [r2, #0]
 80007be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007c2:	601a      	str	r2, [r3, #0]
	}
	/* Transmit and Receive data in 8 Bit mode */
	while ((_spi->RxXferCount > 0U)) {
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	bf14      	ite	ne
 80007d0:	2301      	movne	r3, #1
 80007d2:	2300      	moveq	r3, #0
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d031      	beq.n	800083e <_ZN6SDCard11SPI_RecieveEPht+0x13e>
		_spi->Instance->DR = 0xFF; //send data
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	22ff      	movs	r2, #255	; 0xff
 80007e2:	60da      	str	r2, [r3, #12]
		while (!(__HAL_SPI_GET_FLAG(_spi, SPI_FLAG_TXE)))
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d000      	beq.n	8000800 <_ZN6SDCard11SPI_RecieveEPht+0x100>
 80007fe:	e7f1      	b.n	80007e4 <_ZN6SDCard11SPI_RecieveEPht+0xe4>
			;
		while (!(__HAL_SPI_GET_FLAG(_spi, SPI_FLAG_RXNE)))
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	2b01      	cmp	r3, #1
 800080e:	bf14      	ite	ne
 8000810:	2301      	movne	r3, #1
 8000812:	2300      	moveq	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d000      	beq.n	800081c <_ZN6SDCard11SPI_RecieveEPht+0x11c>
 800081a:	e7f1      	b.n	8000800 <_ZN6SDCard11SPI_RecieveEPht+0x100>
			;
		(*(uint8_t *) pData++) = _spi->Instance->DR;
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	60ba      	str	r2, [r7, #8]
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	6812      	ldr	r2, [r2, #0]
 8000826:	6812      	ldr	r2, [r2, #0]
 8000828:	68d2      	ldr	r2, [r2, #12]
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	701a      	strb	r2, [r3, #0]
		_spi->RxXferCount--;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8000834:	b292      	uxth	r2, r2
 8000836:	3a01      	subs	r2, #1
 8000838:	b292      	uxth	r2, r2
 800083a:	87da      	strh	r2, [r3, #62]	; 0x3e
	while ((_spi->RxXferCount > 0U)) {
 800083c:	e7c2      	b.n	80007c4 <_ZN6SDCard11SPI_RecieveEPht+0xc4>
	}

	if (lSPI_WaitFlagStateUntilTimeout(_spi, SPI_FLAG_BSY, RESET, 100,
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	681c      	ldr	r4, [r3, #0]
 8000842:	f000 fba5 	bl	8000f90 <HAL_GetTick>
 8000846:	4603      	mov	r3, r0
 8000848:	9301      	str	r3, [sp, #4]
 800084a:	2364      	movs	r3, #100	; 0x64
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2300      	movs	r3, #0
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	4621      	mov	r1, r4
 8000854:	68f8      	ldr	r0, [r7, #12]
 8000856:	f000 f831 	bl	80008bc <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	bf14      	ite	ne
 8000860:	2301      	movne	r3, #1
 8000862:	2300      	moveq	r3, #0
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d009      	beq.n	800087e <_ZN6SDCard11SPI_RecieveEPht+0x17e>
			HAL_GetTick()) != HAL_OK) {
		_spi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	6812      	ldr	r2, [r2, #0]
 8000872:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8000874:	f042 0220 	orr.w	r2, r2, #32
 8000878:	655a      	str	r2, [r3, #84]	; 0x54

		errorcode = HAL_TIMEOUT;
 800087a:	2303      	movs	r3, #3
 800087c:	75fb      	strb	r3, [r7, #23]
	}

	_spi->State = HAL_SPI_STATE_READY;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2201      	movs	r2, #1
 8000884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	__HAL_UNLOCK(_spi);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	return errorcode;
 8000892:	7dfb      	ldrb	r3, [r7, #23]
}
 8000894:	4618      	mov	r0, r3
 8000896:	371c      	adds	r7, #28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd90      	pop	{r4, r7, pc}

0800089c <_ZN6SDCard12deselectCardEv>:
void SDCard::deselectCard() {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_cs1Port, _cs1Pin, GPIO_PIN_SET);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6858      	ldr	r0, [r3, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	891b      	ldrh	r3, [r3, #8]
 80008ac:	2201      	movs	r2, #1
 80008ae:	4619      	mov	r1, r3
 80008b0:	f001 f987 	bl	8001bc2 <HAL_GPIO_WritePin>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm>:
 * @param Tickstart: tick start value
 * @retval HAL status
 */
HAL_StatusTypeDef SDCard::lSPI_WaitFlagStateUntilTimeout(
		SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
		uint32_t Timeout, uint32_t Tickstart) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
 80008c8:	603b      	str	r3, [r7, #0]
	while ((hspi->Instance->SR & Flag) != State) {
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	401a      	ands	r2, r3
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	bf14      	ite	ne
 80008da:	2301      	movne	r3, #1
 80008dc:	2300      	moveq	r3, #0
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d052      	beq.n	800098a <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0xce>
		if (Timeout != HAL_MAX_DELAY) {
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ea:	d0ee      	beq.n	80008ca <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0xe>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout)) {
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d007      	beq.n	8000902 <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0x46>
 80008f2:	f000 fb4d 	bl	8000f90 <HAL_GetTick>
 80008f6:	4602      	mov	r2, r0
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	1ad2      	subs	r2, r2, r3
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d301      	bcc.n	8000906 <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0x4a>
 8000902:	2301      	movs	r3, #1
 8000904:	e000      	b.n	8000908 <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0x4c>
 8000906:	2300      	movs	r3, #0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d0de      	beq.n	80008ca <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0xe>
				/* Disable the SPI and reset the CRC: the CRC value should be cleared
				 on both master and slave sides in order to resynchronize the master
				 and slave for their respective CRC calculation */

				/* Disable TXE, RXNE and ERR interrupts for the interrupt process */
				__HAL_SPI_DISABLE_IT(hspi,
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	6812      	ldr	r2, [r2, #0]
 8000914:	6852      	ldr	r2, [r2, #4]
 8000916:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800091a:	605a      	str	r2, [r3, #4]
						(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000924:	d111      	bne.n	800094a <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0x8e>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800092e:	d004      	beq.n	800093a <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0x7e>
								|| (hspi->Init.Direction
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000938:	d107      	bne.n	800094a <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0x8e>
										== SPI_DIRECTION_2LINES_RXONLY))) {
					/* Disable SPI peripheral */
					__HAL_SPI_DISABLE(hspi);
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	6812      	ldr	r2, [r2, #0]
 8000942:	6812      	ldr	r2, [r2, #0]
 8000944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000948:	601a      	str	r2, [r3, #0]
				}

				/* Reset CRC Calculation */
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000952:	d110      	bne.n	8000976 <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0xba>
					SPI_RESET_CRC(hspi);
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	6819      	ldr	r1, [r3, #0]
 800095e:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000962:	400b      	ands	r3, r1
 8000964:	6013      	str	r3, [r2, #0]
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	6812      	ldr	r2, [r2, #0]
 800096e:	6812      	ldr	r2, [r2, #0]
 8000970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000974:	601a      	str	r2, [r3, #0]
				}

				hspi->State = HAL_SPI_STATE_READY;
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	2201      	movs	r2, #1
 800097a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

				/* Process Unlocked */
				__HAL_UNLOCK(hspi);
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				return HAL_TIMEOUT;
 8000986:	2303      	movs	r3, #3
 8000988:	e000      	b.n	800098c <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0xd0>
			}
		}
	}

	return HAL_OK;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <_Z9init_pinsv>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init_pins() {
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80009a8:	4a1a      	ldr	r2, [pc, #104]	; (8000a14 <_Z9init_pinsv+0x80>)
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <_Z9init_pinsv+0x80>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f043 0304 	orr.w	r3, r3, #4
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <_Z9init_pinsv+0x80>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
	;
	GPIO_InitStruct.Pin = LED_CLK_Pin | LED_MOSI_Pin;
 80009c0:	23a0      	movs	r3, #160	; 0xa0
 80009c2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	4619      	mov	r1, r3
 80009d2:	4811      	ldr	r0, [pc, #68]	; (8000a18 <_Z9init_pinsv+0x84>)
 80009d4:	f000 ff80 	bl	80018d8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED_MISO_Pin;
 80009d8:	2340      	movs	r3, #64	; 0x40
 80009da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_MISO_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	4619      	mov	r1, r3
 80009ea:	480b      	ldr	r0, [pc, #44]	; (8000a18 <_Z9init_pinsv+0x84>)
 80009ec:	f000 ff74 	bl	80018d8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LED_GS_Pin;
 80009f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2302      	movs	r3, #2
 80009fc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(LED_GS_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	4619      	mov	r1, r3
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <_Z9init_pinsv+0x84>)
 8000a06:	f000 ff67 	bl	80018d8 <HAL_GPIO_Init>
}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010800 	.word	0x40010800

08000a1c <_Z6_writeiPci>:
int _write(int file, char *ptr, int len) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
	while (huart3.gState != HAL_UART_STATE_READY)
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <_Z6_writeiPci+0x3c>)
 8000a2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b20      	cmp	r3, #32
 8000a32:	bf14      	ite	ne
 8000a34:	2301      	movne	r3, #1
 8000a36:	2300      	moveq	r3, #0
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d000      	beq.n	8000a40 <_Z6_writeiPci+0x24>
 8000a3e:	e7f3      	b.n	8000a28 <_Z6_writeiPci+0xc>
		;
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*) ptr, len);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	461a      	mov	r2, r3
 8000a46:	68b9      	ldr	r1, [r7, #8]
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <_Z6_writeiPci+0x3c>)
 8000a4a:	f002 fc57 	bl	80032fc <HAL_UART_Transmit_DMA>
	return len;
 8000a4e:	687b      	ldr	r3, [r7, #4]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200001ec 	.word	0x200001ec

08000a5c <_Z20TLC5940_clock_out_dcv>:

void TLC5940_clock_out_dc(void) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_VPRG_GPIO_Port, LED_VPRG_Pin, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2104      	movs	r1, #4
 8000a66:	4833      	ldr	r0, [pc, #204]	; (8000b34 <_Z20TLC5940_clock_out_dcv+0xd8>)
 8000a68:	f001 f8ab 	bl	8001bc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DCPRG_GPIO_Port, LED_DCPRG_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2108      	movs	r1, #8
 8000a70:	4830      	ldr	r0, [pc, #192]	; (8000b34 <_Z20TLC5940_clock_out_dcv+0xd8>)
 8000a72:	f001 f8a6 	bl	8001bc2 <HAL_GPIO_WritePin>
	for (int i = 0; i < 16; i++) {
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	dc4a      	bgt.n	8000b16 <_Z20TLC5940_clock_out_dcv+0xba>
		for (int j = 5; j >= 0; j--) {
 8000a80:	2305      	movs	r3, #5
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	db41      	blt.n	8000b0e <_Z20TLC5940_clock_out_dcv+0xb2>
			if (led_dc[i] & (1 << j)) {
 8000a8a:	4a2b      	ldr	r2, [pc, #172]	; (8000b38 <_Z20TLC5940_clock_out_dcv+0xdc>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	fa42 f303 	asr.w	r3, r2, r3
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	bf14      	ite	ne
 8000aa4:	2301      	movne	r3, #1
 8000aa6:	2300      	moveq	r3, #0
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d005      	beq.n	8000aba <_Z20TLC5940_clock_out_dcv+0x5e>
				HAL_GPIO_WritePin(LED_MOSI_GPIO_Port, LED_MOSI_Pin,
						GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	4820      	ldr	r0, [pc, #128]	; (8000b34 <_Z20TLC5940_clock_out_dcv+0xd8>)
 8000ab4:	f001 f885 	bl	8001bc2 <HAL_GPIO_WritePin>
 8000ab8:	e004      	b.n	8000ac4 <_Z20TLC5940_clock_out_dcv+0x68>
			} else {
				HAL_GPIO_WritePin(LED_MOSI_GPIO_Port, LED_MOSI_Pin,
						GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2180      	movs	r1, #128	; 0x80
 8000abe:	481d      	ldr	r0, [pc, #116]	; (8000b34 <_Z20TLC5940_clock_out_dcv+0xd8>)
 8000ac0:	f001 f87f 	bl	8001bc2 <HAL_GPIO_WritePin>
			}
			HAL_GPIO_WritePin(LED_CLK_GPIO_Port, LED_CLK_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2120      	movs	r1, #32
 8000ac8:	481a      	ldr	r0, [pc, #104]	; (8000b34 <_Z20TLC5940_clock_out_dcv+0xd8>)
 8000aca:	f001 f87a 	bl	8001bc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_CLK_GPIO_Port, LED_CLK_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	4818      	ldr	r0, [pc, #96]	; (8000b34 <_Z20TLC5940_clock_out_dcv+0xd8>)
 8000ad4:	f001 f875 	bl	8001bc2 <HAL_GPIO_WritePin>
			led_dc_in[i] |= HAL_GPIO_ReadPin(LED_MISO_GPIO_Port, LED_MISO_Pin)<<j;
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	4816      	ldr	r0, [pc, #88]	; (8000b34 <_Z20TLC5940_clock_out_dcv+0xd8>)
 8000adc:	f001 f85a 	bl	8001b94 <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	fa02 f103 	lsl.w	r1, r2, r3
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <_Z20TLC5940_clock_out_dcv+0xe0>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4413      	add	r3, r2
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b25a      	sxtb	r2, r3
 8000af4:	b24b      	sxtb	r3, r1
 8000af6:	4313      	orrs	r3, r2
 8000af8:	b25b      	sxtb	r3, r3
 8000afa:	b2d9      	uxtb	r1, r3
 8000afc:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <_Z20TLC5940_clock_out_dcv+0xe0>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	460a      	mov	r2, r1
 8000b04:	701a      	strb	r2, [r3, #0]
		for (int j = 5; j >= 0; j--) {
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	e7ba      	b.n	8000a84 <_Z20TLC5940_clock_out_dcv+0x28>
	for (int i = 0; i < 16; i++) {
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3301      	adds	r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	e7b1      	b.n	8000a7a <_Z20TLC5940_clock_out_dcv+0x1e>
		}
	}
	HAL_GPIO_WritePin(LED_XLAT_GPIO_Port, LED_XLAT_Pin, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2110      	movs	r1, #16
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <_Z20TLC5940_clock_out_dcv+0xd8>)
 8000b1c:	f001 f851 	bl	8001bc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_XLAT_GPIO_Port, LED_XLAT_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2110      	movs	r1, #16
 8000b24:	4803      	ldr	r0, [pc, #12]	; (8000b34 <_Z20TLC5940_clock_out_dcv+0xd8>)
 8000b26:	f001 f84c 	bl	8001bc2 <HAL_GPIO_WritePin>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40010800 	.word	0x40010800
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000058 	.word	0x20000058

08000b40 <_Z14led_update_pwmv>:


void led_update_pwm() {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
	uint8_t firstCycleFlag = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(LED_VPRG_GPIO_Port, LED_VPRG_Pin) == GPIO_PIN_SET) {
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	4845      	ldr	r0, [pc, #276]	; (8000c64 <_Z14led_update_pwmv+0x124>)
 8000b4e:	f001 f821 	bl	8001b94 <HAL_GPIO_ReadPin>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	bf0c      	ite	eq
 8000b58:	2301      	moveq	r3, #1
 8000b5a:	2300      	movne	r3, #0
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d006      	beq.n	8000b70 <_Z14led_update_pwmv+0x30>
		HAL_GPIO_WritePin(LED_VPRG_GPIO_Port, LED_VPRG_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2104      	movs	r1, #4
 8000b66:	483f      	ldr	r0, [pc, #252]	; (8000c64 <_Z14led_update_pwmv+0x124>)
 8000b68:	f001 f82b 	bl	8001bc2 <HAL_GPIO_WritePin>
		firstCycleFlag = 1;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	71fb      	strb	r3, [r7, #7]
	}
	uint16_t GSCLK_Counter = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	80bb      	strh	r3, [r7, #4]
	uint16_t Data_Counter = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LED_BLANK_GPIO_Port, LED_BLANK_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7e:	4839      	ldr	r0, [pc, #228]	; (8000c64 <_Z14led_update_pwmv+0x124>)
 8000b80:	f001 f81f 	bl	8001bc2 <HAL_GPIO_WritePin>
	while (true) {
		if(GSCLK_Counter > 4095){
 8000b84:	88bb      	ldrh	r3, [r7, #4]
 8000b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b8a:	db1f      	blt.n	8000bcc <_Z14led_update_pwmv+0x8c>
			HAL_GPIO_WritePin(LED_BLANK_GPIO_Port, LED_BLANK_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b92:	4834      	ldr	r0, [pc, #208]	; (8000c64 <_Z14led_update_pwmv+0x124>)
 8000b94:	f001 f815 	bl	8001bc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_XLAT_GPIO_Port, LED_XLAT_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	4831      	ldr	r0, [pc, #196]	; (8000c64 <_Z14led_update_pwmv+0x124>)
 8000b9e:	f001 f810 	bl	8001bc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_XLAT_GPIO_Port, LED_XLAT_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2110      	movs	r1, #16
 8000ba6:	482f      	ldr	r0, [pc, #188]	; (8000c64 <_Z14led_update_pwmv+0x124>)
 8000ba8:	f001 f80b 	bl	8001bc2 <HAL_GPIO_WritePin>
			if (firstCycleFlag) {
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d053      	beq.n	8000c5a <_Z14led_update_pwmv+0x11a>
				HAL_GPIO_WritePin(LED_XLAT_GPIO_Port, LED_XLAT_Pin, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	482b      	ldr	r0, [pc, #172]	; (8000c64 <_Z14led_update_pwmv+0x124>)
 8000bb8:	f001 f803 	bl	8001bc2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_XLAT_GPIO_Port, LED_XLAT_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	4828      	ldr	r0, [pc, #160]	; (8000c64 <_Z14led_update_pwmv+0x124>)
 8000bc2:	f000 fffe 	bl	8001bc2 <HAL_GPIO_WritePin>
				firstCycleFlag = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	71fb      	strb	r3, [r7, #7]
			}
			break;
 8000bca:	e046      	b.n	8000c5a <_Z14led_update_pwmv+0x11a>
		}else {
			if (!(Data_Counter > 192 - 1)) {
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	2bbf      	cmp	r3, #191	; 0xbf
 8000bd0:	dc33      	bgt.n	8000c3a <_Z14led_update_pwmv+0xfa>
				if (LED[Data_Counter/12] & (1<<(Data_Counter%12))){
 8000bd2:	887b      	ldrh	r3, [r7, #2]
 8000bd4:	4a24      	ldr	r2, [pc, #144]	; (8000c68 <_Z14led_update_pwmv+0x128>)
 8000bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bda:	08db      	lsrs	r3, r3, #3
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <_Z14led_update_pwmv+0x12c>)
 8000be2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000be6:	4618      	mov	r0, r3
 8000be8:	887a      	ldrh	r2, [r7, #2]
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <_Z14led_update_pwmv+0x128>)
 8000bec:	fba3 1302 	umull	r1, r3, r3, r2
 8000bf0:	08d9      	lsrs	r1, r3, #3
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	440b      	add	r3, r1
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	fa40 f303 	asr.w	r3, r0, r3
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d005      	beq.n	8000c16 <_Z14led_update_pwmv+0xd6>
					HAL_GPIO_WritePin(LED_MOSI_GPIO_Port, LED_MOSI_Pin, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	4815      	ldr	r0, [pc, #84]	; (8000c64 <_Z14led_update_pwmv+0x124>)
 8000c10:	f000 ffd7 	bl	8001bc2 <HAL_GPIO_WritePin>
 8000c14:	e004      	b.n	8000c20 <_Z14led_update_pwmv+0xe0>
				}else{
					HAL_GPIO_WritePin(LED_MOSI_GPIO_Port, LED_MOSI_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	4812      	ldr	r0, [pc, #72]	; (8000c64 <_Z14led_update_pwmv+0x124>)
 8000c1c:	f000 ffd1 	bl	8001bc2 <HAL_GPIO_WritePin>
				}
				HAL_GPIO_WritePin(LED_CLK_GPIO_Port, LED_CLK_Pin, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2120      	movs	r1, #32
 8000c24:	480f      	ldr	r0, [pc, #60]	; (8000c64 <_Z14led_update_pwmv+0x124>)
 8000c26:	f000 ffcc 	bl	8001bc2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_CLK_GPIO_Port, LED_CLK_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	480d      	ldr	r0, [pc, #52]	; (8000c64 <_Z14led_update_pwmv+0x124>)
 8000c30:	f000 ffc7 	bl	8001bc2 <HAL_GPIO_WritePin>
				Data_Counter++;
 8000c34:	887b      	ldrh	r3, [r7, #2]
 8000c36:	3301      	adds	r3, #1
 8000c38:	807b      	strh	r3, [r7, #2]
			}
		}
		HAL_GPIO_WritePin(LED_GS_GPIO_Port, LED_GS_Pin, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c40:	4808      	ldr	r0, [pc, #32]	; (8000c64 <_Z14led_update_pwmv+0x124>)
 8000c42:	f000 ffbe 	bl	8001bc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GS_GPIO_Port, LED_GS_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <_Z14led_update_pwmv+0x124>)
 8000c4e:	f000 ffb8 	bl	8001bc2 <HAL_GPIO_WritePin>
		GSCLK_Counter++;
 8000c52:	88bb      	ldrh	r3, [r7, #4]
 8000c54:	3301      	adds	r3, #1
 8000c56:	80bb      	strh	r3, [r7, #4]
		if(GSCLK_Counter > 4095){
 8000c58:	e794      	b.n	8000b84 <_Z14led_update_pwmv+0x44>
			break;
 8000c5a:	bf00      	nop
	}
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40010800 	.word	0x40010800
 8000c68:	aaaaaaab 	.word	0xaaaaaaab
 8000c6c:	20000068 	.word	0x20000068

08000c70 <_Z12TLC5940_Initv>:
void TLC5940_Init(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GS_GPIO_Port, LED_GS_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c7a:	480f      	ldr	r0, [pc, #60]	; (8000cb8 <_Z12TLC5940_Initv+0x48>)
 8000c7c:	f000 ffa1 	bl	8001bc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_CLK_GPIO_Port, LED_CLK_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2120      	movs	r1, #32
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <_Z12TLC5940_Initv+0x48>)
 8000c86:	f000 ff9c 	bl	8001bc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DCPRG_GPIO_Port, LED_DCPRG_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2108      	movs	r1, #8
 8000c8e:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <_Z12TLC5940_Initv+0x48>)
 8000c90:	f000 ff97 	bl	8001bc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_VPRG_GPIO_Port, LED_VPRG_Pin, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2104      	movs	r1, #4
 8000c98:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <_Z12TLC5940_Initv+0x48>)
 8000c9a:	f000 ff92 	bl	8001bc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_XLAT_GPIO_Port, LED_XLAT_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2110      	movs	r1, #16
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <_Z12TLC5940_Initv+0x48>)
 8000ca4:	f000 ff8d 	bl	8001bc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLANK_GPIO_Port, LED_BLANK_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cae:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <_Z12TLC5940_Initv+0x48>)
 8000cb0:	f000 ff87 	bl	8001bc2 <HAL_GPIO_WritePin>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40010800 	.word	0x40010800

08000cbc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
//uint32_t i = 0, j = 0;

	bool status = true;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	71fb      	strb	r3, [r7, #7]
	uint32_t counter1=0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
	uint8_t counter2=0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	74fb      	strb	r3, [r7, #19]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cce:	f000 f907 	bl	8000ee0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cd2:	f000 f88d 	bl	8000df0 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cd6:	f003 f837 	bl	8003d48 <MX_GPIO_Init>
	MX_DMA_Init();
 8000cda:	f003 f80f 	bl	8003cfc <MX_DMA_Init>
	MX_USART3_UART_Init();
 8000cde:	f003 fe75 	bl	80049cc <MX_USART3_UART_Init>
	MX_SPI2_Init();
 8000ce2:	f003 fcb5 	bl	8004650 <MX_SPI2_Init>
	MX_CAN_Init();
 8000ce6:	f002 ff87 	bl	8003bf8 <MX_CAN_Init>
	MX_SPI1_Init();
 8000cea:	f003 fc7b 	bl	80045e4 <MX_SPI1_Init>
	//MX_TIM2_Init();
	/* USER CODE BEGIN 2 */
	lcd_init();
 8000cee:	f003 fb05 	bl	80042fc <lcd_init>
	lcd_clr_fast(WHITE);
 8000cf2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cf6:	f003 fbed 	bl	80044d4 <lcd_clr_fast>
	lcd_write_buff_fast_mono(gImage_demo,0,0,480,320);
 8000cfa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000d04:	2200      	movs	r2, #0
 8000d06:	2100      	movs	r1, #0
 8000d08:	4835      	ldr	r0, [pc, #212]	; (8000de0 <main+0x124>)
 8000d0a:	f003 fc09 	bl	8004520 <lcd_write_buff_fast_mono>
	status = sd1.initalize();
 8000d0e:	4835      	ldr	r0, [pc, #212]	; (8000de4 <main+0x128>)
 8000d10:	f7ff fbd4 	bl	80004bc <_ZN6SDCard9initalizeEv>
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
	if (!status) {
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f083 0301 	eor.w	r3, r3, #1
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <main+0x6c>
		Error_Handler();
 8000d24:	f000 f8af 	bl	8000e86 <Error_Handler>
	}
	for (int i = 0; i < 16; i++) {
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	dc08      	bgt.n	8000d44 <main+0x88>
		LED[i] = 0;
 8000d32:	4a2d      	ldr	r2, [pc, #180]	; (8000de8 <main+0x12c>)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2100      	movs	r1, #0
 8000d38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 16; i++) {
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	e7f3      	b.n	8000d2c <main+0x70>
	}
	for(int i = 0; i < 16; i++){
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	2b0f      	cmp	r3, #15
 8000d4c:	dc08      	bgt.n	8000d60 <main+0xa4>
		led_dc[i] = 63;
 8000d4e:	4a27      	ldr	r2, [pc, #156]	; (8000dec <main+0x130>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4413      	add	r3, r2
 8000d54:	223f      	movs	r2, #63	; 0x3f
 8000d56:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 16; i++){
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	e7f3      	b.n	8000d48 <main+0x8c>
	}

	init_pins();
 8000d60:	f7ff fe18 	bl	8000994 <_Z9init_pinsv>
	TLC5940_clock_out_dc();
 8000d64:	f7ff fe7a 	bl	8000a5c <_Z20TLC5940_clock_out_dcv>
	TLC5940_clock_out_dc();
 8000d68:	f7ff fe78 	bl	8000a5c <_Z20TLC5940_clock_out_dcv>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		led_update_pwm();
 8000d6c:	f7ff fee8 	bl	8000b40 <_Z14led_update_pwmv>
		if(HAL_GetTick()-counter1>500){
 8000d70:	f000 f90e 	bl	8000f90 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d7e:	bf8c      	ite	hi
 8000d80:	2301      	movhi	r3, #1
 8000d82:	2300      	movls	r3, #0
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0f0      	beq.n	8000d6c <main+0xb0>
			counter1 = HAL_GetTick();
 8000d8a:	f000 f901 	bl	8000f90 <HAL_GetTick>
 8000d8e:	6178      	str	r0, [r7, #20]
			if(counter2 > 8){
 8000d90:	7cfb      	ldrb	r3, [r7, #19]
 8000d92:	2b08      	cmp	r3, #8
 8000d94:	dd06      	ble.n	8000da4 <main+0xe8>
				LED[counter2] = 0xFFF;
 8000d96:	7cfb      	ldrb	r3, [r7, #19]
 8000d98:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <main+0x12c>)
 8000d9a:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000d9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000da2:	e005      	b.n	8000db0 <main+0xf4>
			}else{
				LED[counter2] = 0xFFF;
 8000da4:	7cfb      	ldrb	r3, [r7, #19]
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <main+0x12c>)
 8000da8:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000dac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			if(counter2 == 0){
 8000db0:	7cfb      	ldrb	r3, [r7, #19]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d103      	bne.n	8000dbe <main+0x102>
				LED[15] = 0;
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <main+0x12c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	83da      	strh	r2, [r3, #30]
 8000dbc:	e005      	b.n	8000dca <main+0x10e>
			}else{
				LED[counter2-1] = 0;
 8000dbe:	7cfb      	ldrb	r3, [r7, #19]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	4a09      	ldr	r2, [pc, #36]	; (8000de8 <main+0x12c>)
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			counter2 = (counter2+1)%16;
 8000dca:	7cfb      	ldrb	r3, [r7, #19]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	425a      	negs	r2, r3
 8000dd0:	f003 030f 	and.w	r3, r3, #15
 8000dd4:	f002 020f 	and.w	r2, r2, #15
 8000dd8:	bf58      	it	pl
 8000dda:	4253      	negpl	r3, r2
 8000ddc:	74fb      	strb	r3, [r7, #19]
		led_update_pwm();
 8000dde:	e7c5      	b.n	8000d6c <main+0xb0>
 8000de0:	08004c20 	.word	0x08004c20
 8000de4:	20000040 	.word	0x20000040
 8000de8:	20000068 	.word	0x20000068
 8000dec:	20000000 	.word	0x20000000

08000df0 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b090      	sub	sp, #64	; 0x40
 8000df4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000df6:	f107 0318 	add.w	r3, r7, #24
 8000dfa:	2228      	movs	r2, #40	; 0x28
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f003 fed6 	bl	8004bb0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e16:	2301      	movs	r3, #1
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e26:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e2c:	f107 0318 	add.w	r3, r7, #24
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fef7 	bl	8001c24 <HAL_RCC_OscConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	bf14      	ite	ne
 8000e3c:	2301      	movne	r3, #1
 8000e3e:	2300      	moveq	r3, #0
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <_Z18SystemClock_Configv+0x5a>
		Error_Handler();
 8000e46:	f000 f81e 	bl	8000e86 <Error_Handler>
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2102      	movs	r1, #2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f001 f941 	bl	80020ec <HAL_RCC_ClockConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	bf14      	ite	ne
 8000e70:	2301      	movne	r3, #1
 8000e72:	2300      	moveq	r3, #0
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <_Z18SystemClock_Configv+0x8e>
		Error_Handler();
 8000e7a:	f000 f804 	bl	8000e86 <Error_Handler>
	}
}
 8000e7e:	bf00      	nop
 8000e80:	3740      	adds	r7, #64	; 0x40
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <_Z41__static_initialization_and_destruction_0ii>:
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d10b      	bne.n	8000eba <_Z41__static_initialization_and_destruction_0ii+0x28>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d106      	bne.n	8000eba <_Z41__static_initialization_and_destruction_0ii+0x28>
SDCard sd1(&hspi2, SD_CS_Pin, SD_CS_GPIO_Port);
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <_Z41__static_initialization_and_destruction_0ii+0x32>)
 8000eae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb2:	4905      	ldr	r1, [pc, #20]	; (8000ec8 <_Z41__static_initialization_and_destruction_0ii+0x36>)
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <_Z41__static_initialization_and_destruction_0ii+0x3a>)
 8000eb6:	f7ff f949 	bl	800014c <_ZN6SDCardC1EP19__SPI_HandleTypeDeftP12GPIO_TypeDef>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40010c00 	.word	0x40010c00
 8000ec8:	200000b8 	.word	0x200000b8
 8000ecc:	20000040 	.word	0x20000040

08000ed0 <_GLOBAL__sub_I_sd1>:
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff ffda 	bl	8000e92 <_Z41__static_initialization_and_destruction_0ii>
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_Init+0x28>)
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x28>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 fa39 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f003 fc96 	bl	800482c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40022000 	.word	0x40022000

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fa51 	bl	80013d2 <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 fa19 	bl	800137e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000018 	.word	0x20000018
 8000f64:	20000014 	.word	0x20000014
 8000f68:	20000010 	.word	0x20000010

08000f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x1c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x20>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a03      	ldr	r2, [pc, #12]	; (8000f8c <HAL_IncTick+0x20>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000014 	.word	0x20000014
 8000f8c:	2000008c 	.word	0x2000008c

08000f90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b02      	ldr	r3, [pc, #8]	; (8000fa0 <HAL_GetTick+0x10>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	2000008c 	.word	0x2000008c

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff fff0 	bl	8000f90 <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <HAL_Delay+0x40>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffe0 	bl	8000f90 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad2      	subs	r2, r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d3f7      	bcc.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000014 	.word	0x20000014

08000fe8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e0ec      	b.n	80011d4 <HAL_CAN_Init+0x1ec>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f002 fe2c 	bl	8003c64 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	6812      	ldr	r2, [r2, #0]
 8001016:	f022 0202 	bic.w	r2, r2, #2
 800101a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800101c:	f7ff ffb8 	bl	8000f90 <HAL_GetTick>
 8001020:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001022:	e012      	b.n	800104a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001024:	f7ff ffb4 	bl	8000f90 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b0a      	cmp	r3, #10
 8001030:	d90b      	bls.n	800104a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2205      	movs	r2, #5
 8001042:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e0c4      	b.n	80011d4 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1e5      	bne.n	8001024 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	6812      	ldr	r2, [r2, #0]
 8001060:	6812      	ldr	r2, [r2, #0]
 8001062:	f042 0201 	orr.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001068:	f7ff ff92 	bl	8000f90 <HAL_GetTick>
 800106c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800106e:	e012      	b.n	8001096 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001070:	f7ff ff8e 	bl	8000f90 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b0a      	cmp	r3, #10
 800107c:	d90b      	bls.n	8001096 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001082:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2205      	movs	r2, #5
 800108e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e09e      	b.n	80011d4 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0e5      	beq.n	8001070 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7e1b      	ldrb	r3, [r3, #24]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d108      	bne.n	80010be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	6812      	ldr	r2, [r2, #0]
 80010b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	e007      	b.n	80010ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6812      	ldr	r2, [r2, #0]
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7e5b      	ldrb	r3, [r3, #25]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d108      	bne.n	80010e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	6812      	ldr	r2, [r2, #0]
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	e007      	b.n	80010f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7e9b      	ldrb	r3, [r3, #26]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d108      	bne.n	8001112 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	6812      	ldr	r2, [r2, #0]
 800110a:	f042 0220 	orr.w	r2, r2, #32
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e007      	b.n	8001122 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	f022 0220 	bic.w	r2, r2, #32
 8001120:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7edb      	ldrb	r3, [r3, #27]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d108      	bne.n	800113c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	f022 0210 	bic.w	r2, r2, #16
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	e007      	b.n	800114c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	f042 0210 	orr.w	r2, r2, #16
 800114a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7f1b      	ldrb	r3, [r3, #28]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d108      	bne.n	8001166 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	f042 0208 	orr.w	r2, r2, #8
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e007      	b.n	8001176 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	f022 0208 	bic.w	r2, r2, #8
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7f5b      	ldrb	r3, [r3, #29]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d108      	bne.n	8001190 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	f042 0204 	orr.w	r2, r2, #4
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e007      	b.n	80011a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	6812      	ldr	r2, [r2, #0]
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	f022 0204 	bic.w	r2, r2, #4
 800119e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	6891      	ldr	r1, [r2, #8]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	68d2      	ldr	r2, [r2, #12]
 80011ac:	4311      	orrs	r1, r2
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	6912      	ldr	r2, [r2, #16]
 80011b2:	4311      	orrs	r1, r2
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6952      	ldr	r2, [r2, #20]
 80011b8:	4311      	orrs	r1, r2
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6852      	ldr	r2, [r2, #4]
 80011be:	3a01      	subs	r2, #1
 80011c0:	430a      	orrs	r2, r1
 80011c2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <NVIC_SetPriorityGrouping+0x44>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120e:	4a04      	ldr	r2, [pc, #16]	; (8001220 <NVIC_SetPriorityGrouping+0x44>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	60d3      	str	r3, [r2, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <NVIC_GetPriorityGrouping+0x18>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	f003 0307 	and.w	r3, r3, #7
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <NVIC_EnableIRQ+0x2c>)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	095b      	lsrs	r3, r3, #5
 8001252:	79fa      	ldrb	r2, [r7, #7]
 8001254:	f002 021f 	and.w	r2, r2, #31
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100

08001270 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	da0b      	bge.n	800129c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	490d      	ldr	r1, [pc, #52]	; (80012bc <NVIC_SetPriority+0x4c>)
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	3b04      	subs	r3, #4
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129a:	e009      	b.n	80012b0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	4908      	ldr	r1, [pc, #32]	; (80012c0 <NVIC_SetPriority+0x50>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f1c3 0307 	rsb	r3, r3, #7
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf28      	it	cs
 80012e2:	2304      	movcs	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3304      	adds	r3, #4
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d902      	bls.n	80012f4 <NVIC_EncodePriority+0x30>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3b03      	subs	r3, #3
 80012f2:	e000      	b.n	80012f6 <NVIC_EncodePriority+0x32>
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	2201      	movs	r2, #1
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	1e5a      	subs	r2, r3, #1
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	401a      	ands	r2, r3
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130a:	2101      	movs	r1, #1
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	1e59      	subs	r1, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f7ff ff92 	bl	8001270 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff33 	bl	80011dc <NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff48 	bl	8001224 <NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff92 	bl	80012c4 <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff61 	bl	8001270 <NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff3b 	bl	8001240 <NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffa2 	bl	8001324 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e043      	b.n	800148a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_DMA_Init+0xa8>)
 800140a:	4413      	add	r3, r2
 800140c:	4a22      	ldr	r2, [pc, #136]	; (8001498 <HAL_DMA_Init+0xac>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	009a      	lsls	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a1f      	ldr	r2, [pc, #124]	; (800149c <HAL_DMA_Init+0xb0>)
 800141e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001436:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800143a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001444:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001450:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	bffdfff8 	.word	0xbffdfff8
 8001498:	cccccccd 	.word	0xcccccccd
 800149c:	40020000 	.word	0x40020000

080014a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_DMA_Start_IT+0x20>
 80014bc:	2302      	movs	r3, #2
 80014be:	e04a      	b.n	8001556 <HAL_DMA_Start_IT+0xb6>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d13a      	bne.n	8001548 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2202      	movs	r2, #2
 80014d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 f9c0 	bl	800187c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	f042 020e 	orr.w	r2, r2, #14
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e00f      	b.n	8001536 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	f022 0204 	bic.w	r2, r2, #4
 8001524:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	f042 020a 	orr.w	r2, r2, #10
 8001534:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	f042 0201 	orr.w	r2, r2, #1
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e005      	b.n	8001554 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001550:	2302      	movs	r3, #2
 8001552:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001554:	7dfb      	ldrb	r3, [r7, #23]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001572:	2b02      	cmp	r3, #2
 8001574:	d005      	beq.n	8001582 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2204      	movs	r2, #4
 800157a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e057      	b.n	8001632 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	f022 020e 	bic.w	r2, r2, #14
 8001590:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	f022 0201 	bic.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015a2:	4a26      	ldr	r2, [pc, #152]	; (800163c <HAL_DMA_Abort_IT+0xdc>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_DMA_Abort_IT+0xe0>)
 80015ac:	4299      	cmp	r1, r3
 80015ae:	d02e      	beq.n	800160e <HAL_DMA_Abort_IT+0xae>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <HAL_DMA_Abort_IT+0xe4>)
 80015b8:	4299      	cmp	r1, r3
 80015ba:	d026      	beq.n	800160a <HAL_DMA_Abort_IT+0xaa>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <HAL_DMA_Abort_IT+0xe8>)
 80015c4:	4299      	cmp	r1, r3
 80015c6:	d01d      	beq.n	8001604 <HAL_DMA_Abort_IT+0xa4>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <HAL_DMA_Abort_IT+0xec>)
 80015d0:	4299      	cmp	r1, r3
 80015d2:	d014      	beq.n	80015fe <HAL_DMA_Abort_IT+0x9e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <HAL_DMA_Abort_IT+0xf0>)
 80015dc:	4299      	cmp	r1, r3
 80015de:	d00b      	beq.n	80015f8 <HAL_DMA_Abort_IT+0x98>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_DMA_Abort_IT+0xf4>)
 80015e8:	4299      	cmp	r1, r3
 80015ea:	d102      	bne.n	80015f2 <HAL_DMA_Abort_IT+0x92>
 80015ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015f0:	e00e      	b.n	8001610 <HAL_DMA_Abort_IT+0xb0>
 80015f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015f6:	e00b      	b.n	8001610 <HAL_DMA_Abort_IT+0xb0>
 80015f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015fc:	e008      	b.n	8001610 <HAL_DMA_Abort_IT+0xb0>
 80015fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001602:	e005      	b.n	8001610 <HAL_DMA_Abort_IT+0xb0>
 8001604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001608:	e002      	b.n	8001610 <HAL_DMA_Abort_IT+0xb0>
 800160a:	2310      	movs	r3, #16
 800160c:	e000      	b.n	8001610 <HAL_DMA_Abort_IT+0xb0>
 800160e:	2301      	movs	r3, #1
 8001610:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
    } 
  }
  return status;
 8001632:	7bfb      	ldrb	r3, [r7, #15]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40020000 	.word	0x40020000
 8001640:	40020008 	.word	0x40020008
 8001644:	4002001c 	.word	0x4002001c
 8001648:	40020030 	.word	0x40020030
 800164c:	40020044 	.word	0x40020044
 8001650:	40020058 	.word	0x40020058
 8001654:	4002006c 	.word	0x4002006c

08001658 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	2204      	movs	r2, #4
 8001676:	409a      	lsls	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d055      	beq.n	800172c <HAL_DMA_IRQHandler+0xd4>
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d050      	beq.n	800172c <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0320 	and.w	r3, r3, #32
 8001694:	2b00      	cmp	r3, #0
 8001696:	d107      	bne.n	80016a8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	f022 0204 	bic.w	r2, r2, #4
 80016a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016a8:	4a6d      	ldr	r2, [pc, #436]	; (8001860 <HAL_DMA_IRQHandler+0x208>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4619      	mov	r1, r3
 80016b0:	4b6c      	ldr	r3, [pc, #432]	; (8001864 <HAL_DMA_IRQHandler+0x20c>)
 80016b2:	4299      	cmp	r1, r3
 80016b4:	d02e      	beq.n	8001714 <HAL_DMA_IRQHandler+0xbc>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4619      	mov	r1, r3
 80016bc:	4b6a      	ldr	r3, [pc, #424]	; (8001868 <HAL_DMA_IRQHandler+0x210>)
 80016be:	4299      	cmp	r1, r3
 80016c0:	d026      	beq.n	8001710 <HAL_DMA_IRQHandler+0xb8>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4619      	mov	r1, r3
 80016c8:	4b68      	ldr	r3, [pc, #416]	; (800186c <HAL_DMA_IRQHandler+0x214>)
 80016ca:	4299      	cmp	r1, r3
 80016cc:	d01d      	beq.n	800170a <HAL_DMA_IRQHandler+0xb2>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4619      	mov	r1, r3
 80016d4:	4b66      	ldr	r3, [pc, #408]	; (8001870 <HAL_DMA_IRQHandler+0x218>)
 80016d6:	4299      	cmp	r1, r3
 80016d8:	d014      	beq.n	8001704 <HAL_DMA_IRQHandler+0xac>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4619      	mov	r1, r3
 80016e0:	4b64      	ldr	r3, [pc, #400]	; (8001874 <HAL_DMA_IRQHandler+0x21c>)
 80016e2:	4299      	cmp	r1, r3
 80016e4:	d00b      	beq.n	80016fe <HAL_DMA_IRQHandler+0xa6>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4619      	mov	r1, r3
 80016ec:	4b62      	ldr	r3, [pc, #392]	; (8001878 <HAL_DMA_IRQHandler+0x220>)
 80016ee:	4299      	cmp	r1, r3
 80016f0:	d102      	bne.n	80016f8 <HAL_DMA_IRQHandler+0xa0>
 80016f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016f6:	e00e      	b.n	8001716 <HAL_DMA_IRQHandler+0xbe>
 80016f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016fc:	e00b      	b.n	8001716 <HAL_DMA_IRQHandler+0xbe>
 80016fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001702:	e008      	b.n	8001716 <HAL_DMA_IRQHandler+0xbe>
 8001704:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001708:	e005      	b.n	8001716 <HAL_DMA_IRQHandler+0xbe>
 800170a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800170e:	e002      	b.n	8001716 <HAL_DMA_IRQHandler+0xbe>
 8001710:	2340      	movs	r3, #64	; 0x40
 8001712:	e000      	b.n	8001716 <HAL_DMA_IRQHandler+0xbe>
 8001714:	2304      	movs	r3, #4
 8001716:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 809a 	beq.w	8001856 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800172a:	e094      	b.n	8001856 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	2202      	movs	r2, #2
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d05c      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x19e>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d057      	beq.n	80017f6 <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10b      	bne.n	800176c <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	f022 020a 	bic.w	r2, r2, #10
 8001762:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800176c:	4a3c      	ldr	r2, [pc, #240]	; (8001860 <HAL_DMA_IRQHandler+0x208>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	4b3b      	ldr	r3, [pc, #236]	; (8001864 <HAL_DMA_IRQHandler+0x20c>)
 8001776:	4299      	cmp	r1, r3
 8001778:	d02e      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x180>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4619      	mov	r1, r3
 8001780:	4b39      	ldr	r3, [pc, #228]	; (8001868 <HAL_DMA_IRQHandler+0x210>)
 8001782:	4299      	cmp	r1, r3
 8001784:	d026      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x17c>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4619      	mov	r1, r3
 800178c:	4b37      	ldr	r3, [pc, #220]	; (800186c <HAL_DMA_IRQHandler+0x214>)
 800178e:	4299      	cmp	r1, r3
 8001790:	d01d      	beq.n	80017ce <HAL_DMA_IRQHandler+0x176>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4619      	mov	r1, r3
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <HAL_DMA_IRQHandler+0x218>)
 800179a:	4299      	cmp	r1, r3
 800179c:	d014      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x170>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4619      	mov	r1, r3
 80017a4:	4b33      	ldr	r3, [pc, #204]	; (8001874 <HAL_DMA_IRQHandler+0x21c>)
 80017a6:	4299      	cmp	r1, r3
 80017a8:	d00b      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x16a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4619      	mov	r1, r3
 80017b0:	4b31      	ldr	r3, [pc, #196]	; (8001878 <HAL_DMA_IRQHandler+0x220>)
 80017b2:	4299      	cmp	r1, r3
 80017b4:	d102      	bne.n	80017bc <HAL_DMA_IRQHandler+0x164>
 80017b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017ba:	e00e      	b.n	80017da <HAL_DMA_IRQHandler+0x182>
 80017bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c0:	e00b      	b.n	80017da <HAL_DMA_IRQHandler+0x182>
 80017c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c6:	e008      	b.n	80017da <HAL_DMA_IRQHandler+0x182>
 80017c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017cc:	e005      	b.n	80017da <HAL_DMA_IRQHandler+0x182>
 80017ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d2:	e002      	b.n	80017da <HAL_DMA_IRQHandler+0x182>
 80017d4:	2320      	movs	r3, #32
 80017d6:	e000      	b.n	80017da <HAL_DMA_IRQHandler+0x182>
 80017d8:	2302      	movs	r3, #2
 80017da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d034      	beq.n	8001856 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017f4:	e02f      	b.n	8001856 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	2208      	movs	r2, #8
 80017fc:	409a      	lsls	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4013      	ands	r3, r2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d028      	beq.n	8001858 <HAL_DMA_IRQHandler+0x200>
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d023      	beq.n	8001858 <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	f022 020e 	bic.w	r2, r2, #14
 800181e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001828:	2101      	movs	r1, #1
 800182a:	fa01 f202 	lsl.w	r2, r1, r2
 800182e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	2b00      	cmp	r3, #0
 800184c:	d004      	beq.n	8001858 <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4798      	blx	r3
    }
  }
  return;
 8001856:	bf00      	nop
 8001858:	bf00      	nop
}
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40020000 	.word	0x40020000
 8001864:	40020008 	.word	0x40020008
 8001868:	4002001c 	.word	0x4002001c
 800186c:	40020030 	.word	0x40020030
 8001870:	40020044 	.word	0x40020044
 8001874:	40020058 	.word	0x40020058
 8001878:	4002006c 	.word	0x4002006c

0800187c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001892:	2101      	movs	r1, #1
 8001894:	fa01 f202 	lsl.w	r2, r1, r2
 8001898:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b10      	cmp	r3, #16
 80018a8:	d108      	bne.n	80018bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018ba:	e007      	b.n	80018cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	60da      	str	r2, [r3, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b08b      	sub	sp, #44	; 0x2c
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
 80018fa:	e127      	b.n	8001b4c <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80018fc:	2201      	movs	r2, #1
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	429a      	cmp	r2, r3
 8001916:	f040 8116 	bne.w	8001b46 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b12      	cmp	r3, #18
 8001920:	d034      	beq.n	800198c <HAL_GPIO_Init+0xb4>
 8001922:	2b12      	cmp	r3, #18
 8001924:	d80d      	bhi.n	8001942 <HAL_GPIO_Init+0x6a>
 8001926:	2b02      	cmp	r3, #2
 8001928:	d02b      	beq.n	8001982 <HAL_GPIO_Init+0xaa>
 800192a:	2b02      	cmp	r3, #2
 800192c:	d804      	bhi.n	8001938 <HAL_GPIO_Init+0x60>
 800192e:	2b00      	cmp	r3, #0
 8001930:	d031      	beq.n	8001996 <HAL_GPIO_Init+0xbe>
 8001932:	2b01      	cmp	r3, #1
 8001934:	d01c      	beq.n	8001970 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001936:	e048      	b.n	80019ca <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001938:	2b03      	cmp	r3, #3
 800193a:	d043      	beq.n	80019c4 <HAL_GPIO_Init+0xec>
 800193c:	2b11      	cmp	r3, #17
 800193e:	d01b      	beq.n	8001978 <HAL_GPIO_Init+0xa0>
          break;
 8001940:	e043      	b.n	80019ca <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001942:	4a87      	ldr	r2, [pc, #540]	; (8001b60 <HAL_GPIO_Init+0x288>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d026      	beq.n	8001996 <HAL_GPIO_Init+0xbe>
 8001948:	4a85      	ldr	r2, [pc, #532]	; (8001b60 <HAL_GPIO_Init+0x288>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d806      	bhi.n	800195c <HAL_GPIO_Init+0x84>
 800194e:	4a85      	ldr	r2, [pc, #532]	; (8001b64 <HAL_GPIO_Init+0x28c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d020      	beq.n	8001996 <HAL_GPIO_Init+0xbe>
 8001954:	4a84      	ldr	r2, [pc, #528]	; (8001b68 <HAL_GPIO_Init+0x290>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d01d      	beq.n	8001996 <HAL_GPIO_Init+0xbe>
          break;
 800195a:	e036      	b.n	80019ca <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800195c:	4a83      	ldr	r2, [pc, #524]	; (8001b6c <HAL_GPIO_Init+0x294>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d019      	beq.n	8001996 <HAL_GPIO_Init+0xbe>
 8001962:	4a83      	ldr	r2, [pc, #524]	; (8001b70 <HAL_GPIO_Init+0x298>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d016      	beq.n	8001996 <HAL_GPIO_Init+0xbe>
 8001968:	4a82      	ldr	r2, [pc, #520]	; (8001b74 <HAL_GPIO_Init+0x29c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0xbe>
          break;
 800196e:	e02c      	b.n	80019ca <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	623b      	str	r3, [r7, #32]
          break;
 8001976:	e028      	b.n	80019ca <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	3304      	adds	r3, #4
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e023      	b.n	80019ca <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	3308      	adds	r3, #8
 8001988:	623b      	str	r3, [r7, #32]
          break;
 800198a:	e01e      	b.n	80019ca <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	330c      	adds	r3, #12
 8001992:	623b      	str	r3, [r7, #32]
          break;
 8001994:	e019      	b.n	80019ca <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d102      	bne.n	80019a4 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800199e:	2304      	movs	r3, #4
 80019a0:	623b      	str	r3, [r7, #32]
          break;
 80019a2:	e012      	b.n	80019ca <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019ac:	2308      	movs	r3, #8
 80019ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	611a      	str	r2, [r3, #16]
          break;
 80019b6:	e008      	b.n	80019ca <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b8:	2308      	movs	r3, #8
 80019ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	615a      	str	r2, [r3, #20]
          break;
 80019c2:	e002      	b.n	80019ca <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
          break;
 80019c8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2bff      	cmp	r3, #255	; 0xff
 80019ce:	d801      	bhi.n	80019d4 <HAL_GPIO_Init+0xfc>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	e001      	b.n	80019d8 <HAL_GPIO_Init+0x100>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3304      	adds	r3, #4
 80019d8:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2bff      	cmp	r3, #255	; 0xff
 80019de:	d802      	bhi.n	80019e6 <HAL_GPIO_Init+0x10e>
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_Init+0x114>
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	3b08      	subs	r3, #8
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	210f      	movs	r1, #15
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	401a      	ands	r2, r3
 80019fe:	6a39      	ldr	r1, [r7, #32]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	431a      	orrs	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 8096 	beq.w	8001b46 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a1a:	4a57      	ldr	r2, [pc, #348]	; (8001b78 <HAL_GPIO_Init+0x2a0>)
 8001a1c:	4b56      	ldr	r3, [pc, #344]	; (8001b78 <HAL_GPIO_Init+0x2a0>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6193      	str	r3, [r2, #24]
 8001a26:	4b54      	ldr	r3, [pc, #336]	; (8001b78 <HAL_GPIO_Init+0x2a0>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001a32:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_GPIO_Init+0x2a4>)
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4013      	ands	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a49      	ldr	r2, [pc, #292]	; (8001b80 <HAL_GPIO_Init+0x2a8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <HAL_GPIO_Init+0x1ae>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a48      	ldr	r2, [pc, #288]	; (8001b84 <HAL_GPIO_Init+0x2ac>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00d      	beq.n	8001a82 <HAL_GPIO_Init+0x1aa>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a47      	ldr	r2, [pc, #284]	; (8001b88 <HAL_GPIO_Init+0x2b0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d007      	beq.n	8001a7e <HAL_GPIO_Init+0x1a6>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a46      	ldr	r2, [pc, #280]	; (8001b8c <HAL_GPIO_Init+0x2b4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_GPIO_Init+0x1a2>
 8001a76:	2303      	movs	r3, #3
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x1b0>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x1b0>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x1b0>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x1b0>
 8001a86:	2300      	movs	r3, #0
 8001a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001a98:	4938      	ldr	r1, [pc, #224]	; (8001b7c <HAL_GPIO_Init+0x2a4>)
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d006      	beq.n	8001ac0 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ab2:	4937      	ldr	r1, [pc, #220]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001ab4:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
 8001abe:	e006      	b.n	8001ace <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ac0:	4933      	ldr	r1, [pc, #204]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001ac2:	4b33      	ldr	r3, [pc, #204]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4013      	ands	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ada:	492d      	ldr	r1, [pc, #180]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001adc:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	604b      	str	r3, [r1, #4]
 8001ae6:	e006      	b.n	8001af6 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ae8:	4929      	ldr	r1, [pc, #164]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001aea:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	4013      	ands	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d006      	beq.n	8001b10 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b02:	4923      	ldr	r1, [pc, #140]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001b04:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
 8001b0e:	e006      	b.n	8001b1e <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b10:	491f      	ldr	r1, [pc, #124]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001b12:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b2a:	4919      	ldr	r1, [pc, #100]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60cb      	str	r3, [r1, #12]
 8001b36:	e006      	b.n	8001b46 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b38:	4915      	ldr	r1, [pc, #84]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	4013      	ands	r3, r2
 8001b44:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	3301      	adds	r3, #1
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	2b0f      	cmp	r3, #15
 8001b50:	f67f aed4 	bls.w	80018fc <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001b54:	bf00      	nop
 8001b56:	372c      	adds	r7, #44	; 0x2c
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	10210000 	.word	0x10210000
 8001b64:	10110000 	.word	0x10110000
 8001b68:	10120000 	.word	0x10120000
 8001b6c:	10310000 	.word	0x10310000
 8001b70:	10320000 	.word	0x10320000
 8001b74:	10220000 	.word	0x10220000
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	40010800 	.word	0x40010800
 8001b84:	40010c00 	.word	0x40010c00
 8001b88:	40011000 	.word	0x40011000
 8001b8c:	40011400 	.word	0x40011400
 8001b90:	40010400 	.word	0x40010400

08001b94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	e001      	b.n	8001bb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	807b      	strh	r3, [r7, #2]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd2:	787b      	ldrb	r3, [r7, #1]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd8:	887a      	ldrh	r2, [r7, #2]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bde:	e003      	b.n	8001be8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	041a      	lsls	r2, r3, #16
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	611a      	str	r2, [r3, #16]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_PWR_PVD_IRQHandler+0x20>)
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8001c04:	f000 f808 	bl	8001c18 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001c08:	4b02      	ldr	r3, [pc, #8]	; (8001c14 <HAL_PWR_PVD_IRQHandler+0x20>)
 8001c0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c0e:	615a      	str	r2, [r3, #20]
  }
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40010400 	.word	0x40010400

08001c18 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 8087 	beq.w	8001d4c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c3e:	4b92      	ldr	r3, [pc, #584]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d00c      	beq.n	8001c64 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c4a:	4b8f      	ldr	r3, [pc, #572]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d112      	bne.n	8001c7c <HAL_RCC_OscConfig+0x58>
 8001c56:	4b8c      	ldr	r3, [pc, #560]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c62:	d10b      	bne.n	8001c7c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	4b88      	ldr	r3, [pc, #544]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d06c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x126>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d168      	bne.n	8001d4a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e22d      	b.n	80020d8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c84:	d106      	bne.n	8001c94 <HAL_RCC_OscConfig+0x70>
 8001c86:	4a80      	ldr	r2, [pc, #512]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001c88:	4b7f      	ldr	r3, [pc, #508]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e02e      	b.n	8001cf2 <HAL_RCC_OscConfig+0xce>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10c      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x92>
 8001c9c:	4a7a      	ldr	r2, [pc, #488]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001c9e:	4b7a      	ldr	r3, [pc, #488]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4a77      	ldr	r2, [pc, #476]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001caa:	4b77      	ldr	r3, [pc, #476]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	e01d      	b.n	8001cf2 <HAL_RCC_OscConfig+0xce>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cbe:	d10c      	bne.n	8001cda <HAL_RCC_OscConfig+0xb6>
 8001cc0:	4a71      	ldr	r2, [pc, #452]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001cc2:	4b71      	ldr	r3, [pc, #452]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4a6e      	ldr	r2, [pc, #440]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001cce:	4b6e      	ldr	r3, [pc, #440]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	e00b      	b.n	8001cf2 <HAL_RCC_OscConfig+0xce>
 8001cda:	4a6b      	ldr	r2, [pc, #428]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001cdc:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4a68      	ldr	r2, [pc, #416]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001ce8:	4b67      	ldr	r3, [pc, #412]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d013      	beq.n	8001d22 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7ff f949 	bl	8000f90 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d02:	f7ff f945 	bl	8000f90 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b64      	cmp	r3, #100	; 0x64
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e1e1      	b.n	80020d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d14:	4b5c      	ldr	r3, [pc, #368]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0xde>
 8001d20:	e014      	b.n	8001d4c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7ff f935 	bl	8000f90 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d2a:	f7ff f931 	bl	8000f90 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b64      	cmp	r3, #100	; 0x64
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e1cd      	b.n	80020d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3c:	4b52      	ldr	r3, [pc, #328]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f0      	bne.n	8001d2a <HAL_RCC_OscConfig+0x106>
 8001d48:	e000      	b.n	8001d4c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d063      	beq.n	8001e20 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d58:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00b      	beq.n	8001d7c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d64:	4b48      	ldr	r3, [pc, #288]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d11c      	bne.n	8001daa <HAL_RCC_OscConfig+0x186>
 8001d70:	4b45      	ldr	r3, [pc, #276]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d116      	bne.n	8001daa <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7c:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_OscConfig+0x170>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e1a1      	b.n	80020d8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	493c      	ldr	r1, [pc, #240]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001d96:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da8:	e03a      	b.n	8001e20 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d020      	beq.n	8001df4 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db2:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <HAL_RCC_OscConfig+0x268>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff f8ea 	bl	8000f90 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f8e6 	bl	8000f90 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e182      	b.n	80020d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dde:	492a      	ldr	r1, [pc, #168]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001de0:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
 8001df2:	e015      	b.n	8001e20 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <HAL_RCC_OscConfig+0x268>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7ff f8c9 	bl	8000f90 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e02:	f7ff f8c5 	bl	8000f90 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e161      	b.n	80020d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e14:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d039      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d019      	beq.n	8001e68 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e34:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff f8a9 	bl	8000f90 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e42:	f7ff f8a5 	bl	8000f90 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e141      	b.n	80020d8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_RCC_OscConfig+0x264>)
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f000 fae3 	bl	800242c <RCC_Delay>
 8001e66:	e01b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff f88f 	bl	8000f90 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	e00e      	b.n	8001e94 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e76:	f7ff f88b 	bl	8000f90 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d907      	bls.n	8001e94 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e127      	b.n	80020d8 <HAL_RCC_OscConfig+0x4b4>
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	42420000 	.word	0x42420000
 8001e90:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	4b92      	ldr	r3, [pc, #584]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ea      	bne.n	8001e76 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80a6 	beq.w	8001ffa <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b8b      	ldr	r3, [pc, #556]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10d      	bne.n	8001eda <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4a88      	ldr	r2, [pc, #544]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001ec0:	4b87      	ldr	r3, [pc, #540]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b85      	ldr	r3, [pc, #532]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	4b82      	ldr	r3, [pc, #520]	; (80020e4 <HAL_RCC_OscConfig+0x4c0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d118      	bne.n	8001f18 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee6:	4a7f      	ldr	r2, [pc, #508]	; (80020e4 <HAL_RCC_OscConfig+0x4c0>)
 8001ee8:	4b7e      	ldr	r3, [pc, #504]	; (80020e4 <HAL_RCC_OscConfig+0x4c0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef2:	f7ff f84d 	bl	8000f90 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efa:	f7ff f849 	bl	8000f90 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b64      	cmp	r3, #100	; 0x64
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e0e5      	b.n	80020d8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	4b75      	ldr	r3, [pc, #468]	; (80020e4 <HAL_RCC_OscConfig+0x4c0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x30a>
 8001f20:	4a6f      	ldr	r2, [pc, #444]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f22:	4b6f      	ldr	r3, [pc, #444]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6213      	str	r3, [r2, #32]
 8001f2c:	e02d      	b.n	8001f8a <HAL_RCC_OscConfig+0x366>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x32c>
 8001f36:	4a6a      	ldr	r2, [pc, #424]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f38:	4b69      	ldr	r3, [pc, #420]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6213      	str	r3, [r2, #32]
 8001f42:	4a67      	ldr	r2, [pc, #412]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f44:	4b66      	ldr	r3, [pc, #408]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6213      	str	r3, [r2, #32]
 8001f4e:	e01c      	b.n	8001f8a <HAL_RCC_OscConfig+0x366>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d10c      	bne.n	8001f72 <HAL_RCC_OscConfig+0x34e>
 8001f58:	4a61      	ldr	r2, [pc, #388]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f5a:	4b61      	ldr	r3, [pc, #388]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	f043 0304 	orr.w	r3, r3, #4
 8001f62:	6213      	str	r3, [r2, #32]
 8001f64:	4a5e      	ldr	r2, [pc, #376]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f66:	4b5e      	ldr	r3, [pc, #376]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6213      	str	r3, [r2, #32]
 8001f70:	e00b      	b.n	8001f8a <HAL_RCC_OscConfig+0x366>
 8001f72:	4a5b      	ldr	r2, [pc, #364]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f74:	4b5a      	ldr	r3, [pc, #360]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6213      	str	r3, [r2, #32]
 8001f7e:	4a58      	ldr	r2, [pc, #352]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f80:	4b57      	ldr	r3, [pc, #348]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f023 0304 	bic.w	r3, r3, #4
 8001f88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d015      	beq.n	8001fbe <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f92:	f7fe fffd 	bl	8000f90 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9a:	f7fe fff9 	bl	8000f90 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e093      	b.n	80020d8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0ee      	beq.n	8001f9a <HAL_RCC_OscConfig+0x376>
 8001fbc:	e014      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbe:	f7fe ffe7 	bl	8000f90 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7fe ffe3 	bl	8000f90 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e07d      	b.n	80020d8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fdc:	4b40      	ldr	r3, [pc, #256]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1ee      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d105      	bne.n	8001ffa <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fee:	4a3c      	ldr	r2, [pc, #240]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d069      	beq.n	80020d6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002002:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b08      	cmp	r3, #8
 800200c:	d061      	beq.n	80020d2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d146      	bne.n	80020a4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002016:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7fe ffb8 	bl	8000f90 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002024:	f7fe ffb4 	bl	8000f90 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e050      	b.n	80020d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002036:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204a:	d108      	bne.n	800205e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800204c:	4924      	ldr	r1, [pc, #144]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 800204e:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800205e:	4820      	ldr	r0, [pc, #128]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8002060:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a19      	ldr	r1, [r3, #32]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	430b      	orrs	r3, r1
 8002072:	4313      	orrs	r3, r2
 8002074:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	2201      	movs	r2, #1
 800207a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7fe ff88 	bl	8000f90 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002084:	f7fe ff84 	bl	8000f90 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e020      	b.n	80020d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x460>
 80020a2:	e018      	b.n	80020d6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a4:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7fe ff71 	bl	8000f90 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b2:	f7fe ff6d 	bl	8000f90 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e009      	b.n	80020d8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x48e>
 80020d0:	e001      	b.n	80020d6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
 80020e8:	42420060 	.word	0x42420060

080020ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80020fa:	4b7e      	ldr	r3, [pc, #504]	; (80022f4 <HAL_RCC_ClockConfig+0x208>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0207 	and.w	r2, r3, #7
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d210      	bcs.n	800212a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002108:	497a      	ldr	r1, [pc, #488]	; (80022f4 <HAL_RCC_ClockConfig+0x208>)
 800210a:	4b7a      	ldr	r3, [pc, #488]	; (80022f4 <HAL_RCC_ClockConfig+0x208>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 0207 	bic.w	r2, r3, #7
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002118:	4b76      	ldr	r3, [pc, #472]	; (80022f4 <HAL_RCC_ClockConfig+0x208>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0207 	and.w	r2, r3, #7
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d001      	beq.n	800212a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0e0      	b.n	80022ec <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d020      	beq.n	8002178 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002142:	4a6d      	ldr	r2, [pc, #436]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 8002144:	4b6c      	ldr	r3, [pc, #432]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800214c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800215a:	4a67      	ldr	r2, [pc, #412]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 800215c:	4b66      	ldr	r3, [pc, #408]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002164:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002166:	4964      	ldr	r1, [pc, #400]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 8002168:	4b63      	ldr	r3, [pc, #396]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d06a      	beq.n	800225a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d107      	bne.n	800219c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218c:	4b5a      	ldr	r3, [pc, #360]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d115      	bne.n	80021c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0a7      	b.n	80022ec <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a4:	4b54      	ldr	r3, [pc, #336]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d109      	bne.n	80021c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e09b      	b.n	80022ec <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b4:	4b50      	ldr	r3, [pc, #320]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e093      	b.n	80022ec <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c4:	494c      	ldr	r1, [pc, #304]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 80021c6:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f023 0203 	bic.w	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d6:	f7fe fedb 	bl	8000f90 <HAL_GetTick>
 80021da:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d112      	bne.n	800220a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e6:	f7fe fed3 	bl	8000f90 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e077      	b.n	80022ec <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021fc:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b04      	cmp	r3, #4
 8002206:	d1ee      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xfa>
 8002208:	e027      	b.n	800225a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d11d      	bne.n	800224e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002212:	e00a      	b.n	800222a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002214:	f7fe febc 	bl	8000f90 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002222:	4293      	cmp	r3, r2
 8002224:	d901      	bls.n	800222a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e060      	b.n	80022ec <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800222a:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b08      	cmp	r3, #8
 8002234:	d1ee      	bne.n	8002214 <HAL_RCC_ClockConfig+0x128>
 8002236:	e010      	b.n	800225a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7fe feaa 	bl	8000f90 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e04e      	b.n	80022ec <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1ee      	bne.n	8002238 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <HAL_RCC_ClockConfig+0x208>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0207 	and.w	r2, r3, #7
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d910      	bls.n	800228a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002268:	4922      	ldr	r1, [pc, #136]	; (80022f4 <HAL_RCC_ClockConfig+0x208>)
 800226a:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <HAL_RCC_ClockConfig+0x208>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0207 	bic.w	r2, r3, #7
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002278:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <HAL_RCC_ClockConfig+0x208>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0207 	and.w	r2, r3, #7
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d001      	beq.n	800228a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e030      	b.n	80022ec <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	d008      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002296:	4918      	ldr	r1, [pc, #96]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d009      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022b4:	4910      	ldr	r1, [pc, #64]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022c8:	f000 f81c 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022cc:	4601      	mov	r1, r0
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_RCC_ClockConfig+0x20c>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	4a08      	ldr	r2, [pc, #32]	; (80022fc <HAL_RCC_ClockConfig+0x210>)
 80022da:	5cd3      	ldrb	r3, [r2, r3]
 80022dc:	fa21 f303 	lsr.w	r3, r1, r3
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <HAL_RCC_ClockConfig+0x214>)
 80022e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7fe fe11 	bl	8000f0c <HAL_InitTick>
  
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40022000 	.word	0x40022000
 80022f8:	40021000 	.word	0x40021000
 80022fc:	08009720 	.word	0x08009720
 8002300:	20000018 	.word	0x20000018

08002304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	b490      	push	{r4, r7}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800230a:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800230c:	1d3c      	adds	r4, r7, #4
 800230e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002314:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b04      	cmp	r3, #4
 800233c:	d002      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x40>
 800233e:	2b08      	cmp	r3, #8
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x46>
 8002342:	e02d      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002344:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002346:	623b      	str	r3, [r7, #32]
      break;
 8002348:	e02d      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	0c9b      	lsrs	r3, r3, #18
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002356:	4413      	add	r3, r2
 8002358:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800235c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	0c5b      	lsrs	r3, r3, #17
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002376:	4413      	add	r3, r2
 8002378:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800237c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	4a0f      	ldr	r2, [pc, #60]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002382:	fb02 f203 	mul.w	r2, r2, r3
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	fbb2 f3f3 	udiv	r3, r2, r3
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
 800238e:	e004      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	623b      	str	r3, [r7, #32]
      break;
 800239e:	e002      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023a2:	623b      	str	r3, [r7, #32]
      break;
 80023a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a6:	6a3b      	ldr	r3, [r7, #32]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3728      	adds	r7, #40	; 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc90      	pop	{r4, r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	08004bd8 	.word	0x08004bd8
 80023b8:	08004be8 	.word	0x08004be8
 80023bc:	40021000 	.word	0x40021000
 80023c0:	007a1200 	.word	0x007a1200
 80023c4:	003d0900 	.word	0x003d0900

080023c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023cc:	4b02      	ldr	r3, [pc, #8]	; (80023d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	20000018 	.word	0x20000018

080023dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023e0:	f7ff fff2 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 80023e4:	4601      	mov	r1, r0
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4a03      	ldr	r2, [pc, #12]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f2:	5cd3      	ldrb	r3, [r2, r3]
 80023f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	08009730 	.word	0x08009730

08002404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002408:	f7ff ffde 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 800240c:	4601      	mov	r1, r0
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	0adb      	lsrs	r3, r3, #11
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4a03      	ldr	r2, [pc, #12]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	08009730 	.word	0x08009730

0800242c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <RCC_Delay+0x34>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <RCC_Delay+0x38>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0a5b      	lsrs	r3, r3, #9
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002448:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1e5a      	subs	r2, r3, #1
 800244e:	60fa      	str	r2, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f9      	bne.n	8002448 <RCC_Delay+0x1c>
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000018 	.word	0x20000018
 8002464:	10624dd3 	.word	0x10624dd3

08002468 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	; 0x28
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	4613      	mov	r3, r2
 8002476:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_SPI_Transmit+0x26>
 800248a:	2302      	movs	r3, #2
 800248c:	e123      	b.n	80026d6 <HAL_SPI_Transmit+0x26e>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002496:	f7fe fd7b 	bl	8000f90 <HAL_GetTick>
 800249a:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d002      	beq.n	80024ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
 80024aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024ac:	e10a      	b.n	80026c4 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0U))
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <HAL_SPI_Transmit+0x52>
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024be:	e101      	b.n	80026c4 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2203      	movs	r2, #3
 80024c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	88fa      	ldrh	r2, [r7, #6]
 80024d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	88fa      	ldrh	r2, [r7, #6]
 80024de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002506:	d107      	bne.n	8002518 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002516:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002522:	2b40      	cmp	r3, #64	; 0x40
 8002524:	d007      	beq.n	8002536 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002534:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800253e:	d147      	bne.n	80025d0 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <HAL_SPI_Transmit+0xea>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d138      	bne.n	80025c4 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	8812      	ldrh	r2, [r2, #0]
 800255a:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	3302      	adds	r3, #2
 8002560:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002570:	e028      	b.n	80025c4 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b02      	cmp	r3, #2
 800257e:	d10f      	bne.n	80025a0 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	8812      	ldrh	r2, [r2, #0]
 8002588:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	3302      	adds	r3, #2
 800258e:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	86da      	strh	r2, [r3, #54]	; 0x36
 800259e:	e011      	b.n	80025c4 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_SPI_Transmit+0x156>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ac:	d00a      	beq.n	80025c4 <HAL_SPI_Transmit+0x15c>
 80025ae:	f7fe fcef 	bl	8000f90 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	1ad2      	subs	r2, r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d302      	bcc.n	80025c4 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025c2:	e07f      	b.n	80026c4 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1d1      	bne.n	8002572 <HAL_SPI_Transmit+0x10a>
 80025ce:	e048      	b.n	8002662 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d004      	beq.n	80025e2 <HAL_SPI_Transmit+0x17a>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d13a      	bne.n	8002658 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	330c      	adds	r3, #12
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	7812      	ldrb	r2, [r2, #0]
 80025ec:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3301      	adds	r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002602:	e029      	b.n	8002658 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b02      	cmp	r3, #2
 8002610:	d110      	bne.n	8002634 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	330c      	adds	r3, #12
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	7812      	ldrb	r2, [r2, #0]
 800261c:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	3301      	adds	r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	86da      	strh	r2, [r3, #54]	; 0x36
 8002632:	e011      	b.n	8002658 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <HAL_SPI_Transmit+0x1ea>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d00a      	beq.n	8002658 <HAL_SPI_Transmit+0x1f0>
 8002642:	f7fe fca5 	bl	8000f90 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	1ad2      	subs	r2, r2, r3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d302      	bcc.n	8002658 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002656:	e035      	b.n	80026c4 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1d0      	bne.n	8002604 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2201      	movs	r2, #1
 800266a:	2102      	movs	r1, #2
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fbc6 	bl	8002dfe <SPI_WaitFlagStateUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800267c:	e022      	b.n	80026c4 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	6839      	ldr	r1, [r7, #0]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fc24 	bl	8002ed0 <SPI_CheckFlag_BSY>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002698:	e014      	b.n	80026c4 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_SPI_Receive>:
  * @param  Size: amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b088      	sub	sp, #32
 80026e2:	af02      	add	r7, sp, #8
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026fe:	d112      	bne.n	8002726 <HAL_SPI_Receive+0x48>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10e      	bne.n	8002726 <HAL_SPI_Receive+0x48>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2204      	movs	r2, #4
 800270c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 8002710:	88fa      	ldrh	r2, [r7, #6]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	4613      	mov	r3, r2
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f8ec 	bl	80028fa <HAL_SPI_TransmitReceive>
 8002722:	4603      	mov	r3, r0
 8002724:	e0e5      	b.n	80028f2 <HAL_SPI_Receive+0x214>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_SPI_Receive+0x56>
 8002730:	2302      	movs	r3, #2
 8002732:	e0de      	b.n	80028f2 <HAL_SPI_Receive+0x214>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800273c:	f7fe fc28 	bl	8000f90 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

  if(hspi->State != HAL_SPI_STATE_READY)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d002      	beq.n	8002754 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 800274e:	2302      	movs	r3, #2
 8002750:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002752:	e0c5      	b.n	80028e0 <HAL_SPI_Receive+0x202>
  }

  if((pData == NULL ) || (Size == 0U))
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_SPI_Receive+0x82>
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002764:	e0bc      	b.n	80028e0 <HAL_SPI_Receive+0x202>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2204      	movs	r2, #4
 800276a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	88fa      	ldrh	r2, [r7, #6]
 800277e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	88fa      	ldrh	r2, [r7, #6]
 8002784:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ac:	d107      	bne.n	80027be <HAL_SPI_Receive+0xe0>
  {
    SPI_1LINE_RX(hspi);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d007      	beq.n	80027dc <HAL_SPI_Receive+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027da:	601a      	str	r2, [r3, #0]
  }

    /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d15b      	bne.n	800289c <HAL_SPI_Receive+0x1be>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
 80027e4:	e02a      	b.n	800283c <HAL_SPI_Receive+0x15e>
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d111      	bne.n	8002818 <HAL_SPI_Receive+0x13a>
      {
        /* read the received data */
        (* (uint8_t *)pData)= *(__IO uint8_t *)&hspi->Instance->DR;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	330c      	adds	r3, #12
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	3301      	adds	r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002816:	e011      	b.n	800283c <HAL_SPI_Receive+0x15e>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00b      	beq.n	8002836 <HAL_SPI_Receive+0x158>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d00a      	beq.n	800283c <HAL_SPI_Receive+0x15e>
 8002826:	f7fe fbb3 	bl	8000f90 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad2      	subs	r2, r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d302      	bcc.n	800283c <HAL_SPI_Receive+0x15e>
        {
          errorcode = HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	75fb      	strb	r3, [r7, #23]
          goto error;
 800283a:	e051      	b.n	80028e0 <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1cf      	bne.n	80027e6 <HAL_SPI_Receive+0x108>
 8002846:	e02e      	b.n	80028a6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while(hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d110      	bne.n	8002878 <HAL_SPI_Receive+0x19a>
      {
        *((uint16_t*)pData) = hspi->Instance->DR;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	b29a      	uxth	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3302      	adds	r3, #2
 8002866:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002876:	e011      	b.n	800289c <HAL_SPI_Receive+0x1be>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_SPI_Receive+0x1b8>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002884:	d00a      	beq.n	800289c <HAL_SPI_Receive+0x1be>
 8002886:	f7fe fb83 	bl	8000f90 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad2      	subs	r2, r2, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d302      	bcc.n	800289c <HAL_SPI_Receive+0x1be>
        {
          errorcode = HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	75fb      	strb	r3, [r7, #23]
          goto error;
 800289a:	e021      	b.n	80028e0 <HAL_SPI_Receive+0x202>
    while(hspi->RxXferCount > 0U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1d0      	bne.n	8002848 <HAL_SPI_Receive+0x16a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ae:	d111      	bne.n	80028d4 <HAL_SPI_Receive+0x1f6>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b8:	d004      	beq.n	80028c4 <HAL_SPI_Receive+0x1e6>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c2:	d107      	bne.n	80028d4 <HAL_SPI_Receive+0x1f6>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d2:	601a      	str	r2, [r3, #0]
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_SPI_Receive+0x202>
  {
    errorcode = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b08c      	sub	sp, #48	; 0x30
 80028fe:	af02      	add	r7, sp, #8
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8002914:	2301      	movs	r3, #1
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_SPI_TransmitReceive+0x32>
 8002928:	2302      	movs	r3, #2
 800292a:	e181      	b.n	8002c30 <HAL_SPI_TransmitReceive+0x336>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002934:	f7fe fb2c 	bl	8000f90 <HAL_GetTick>
 8002938:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002940:	b2db      	uxtb	r3, r3
 8002942:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d00e      	beq.n	800296e <HAL_SPI_TransmitReceive+0x74>
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002956:	d106      	bne.n	8002966 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <HAL_SPI_TransmitReceive+0x6c>
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d003      	beq.n	800296e <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002966:	2302      	movs	r3, #2
 8002968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800296c:	e156      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_SPI_TransmitReceive+0x86>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_SPI_TransmitReceive+0x86>
 800297a:	887b      	ldrh	r3, [r7, #2]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d103      	bne.n	8002988 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002986:	e149      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d103      	bne.n	800299c <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2205      	movs	r2, #5
 8002998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	887a      	ldrh	r2, [r7, #2]
 80029b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	887a      	ldrh	r2, [r7, #2]
 80029be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029dc:	2b40      	cmp	r3, #64	; 0x40
 80029de:	d007      	beq.n	80029f0 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029f8:	d171      	bne.n	8002ade <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d004      	beq.n	8002a0c <HAL_SPI_TransmitReceive+0x112>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d15d      	bne.n	8002ac8 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	8812      	ldrh	r2, [r2, #0]
 8002a14:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	3302      	adds	r3, #2
 8002a1a:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a2a:	e04d      	b.n	8002ac8 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d01c      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x172>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d017      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0x172>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d110      	bne.n	8002a6c <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	8812      	ldrh	r2, [r2, #0]
 8002a52:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	3302      	adds	r3, #2
 8002a58:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d018      	beq.n	8002aa8 <HAL_SPI_TransmitReceive+0x1ae>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d111      	bne.n	8002aa8 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3302      	adds	r3, #2
 8002a94:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aae:	d00b      	beq.n	8002ac8 <HAL_SPI_TransmitReceive+0x1ce>
 8002ab0:	f7fe fa6e 	bl	8000f90 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	1ad2      	subs	r2, r2, r3
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d303      	bcc.n	8002ac8 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002ac6:	e0a9      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1ac      	bne.n	8002a2c <HAL_SPI_TransmitReceive+0x132>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1a7      	bne.n	8002a2c <HAL_SPI_TransmitReceive+0x132>
 8002adc:	e071      	b.n	8002bc2 <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d004      	beq.n	8002af0 <HAL_SPI_TransmitReceive+0x1f6>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d15e      	bne.n	8002bae <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	330c      	adds	r3, #12
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	7812      	ldrb	r2, [r2, #0]
 8002afa:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	3301      	adds	r3, #1
 8002b00:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b10:	e04d      	b.n	8002bae <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01d      	beq.n	8002b54 <HAL_SPI_TransmitReceive+0x25a>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d018      	beq.n	8002b54 <HAL_SPI_TransmitReceive+0x25a>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d111      	bne.n	8002b54 <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f103 020c 	add.w	r2, r3, #12
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	1c59      	adds	r1, r3, #1
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d017      	beq.n	8002b8e <HAL_SPI_TransmitReceive+0x294>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d110      	bne.n	8002b8e <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	68d2      	ldr	r2, [r2, #12]
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d00b      	beq.n	8002bae <HAL_SPI_TransmitReceive+0x2b4>
 8002b96:	f7fe f9fb 	bl	8000f90 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	1ad2      	subs	r2, r2, r3
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d303      	bcc.n	8002bae <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002bac:	e036      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ac      	bne.n	8002b12 <HAL_SPI_TransmitReceive+0x218>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1a7      	bne.n	8002b12 <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2102      	movs	r1, #2
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f916 	bl	8002dfe <SPI_WaitFlagStateUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002bde:	e01d      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f973 	bl	8002ed0 <SPI_CheckFlag_BSY>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d006      	beq.n	8002bfe <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002bfc:	e00e      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10a      	bne.n	8002c1c <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3728      	adds	r7, #40	; 0x28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10e      	bne.n	8002c78 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d009      	beq.n	8002c78 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d004      	beq.n	8002c78 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	4798      	blx	r3
    return;
 8002c76:	e09f      	b.n	8002db8 <HAL_SPI_IRQHandler+0x180>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_SPI_IRQHandler+0x5e>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	4798      	blx	r3
    return;
 8002c94:	e090      	b.n	8002db8 <HAL_SPI_IRQHandler+0x180>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 808b 	beq.w	8002db8 <HAL_SPI_IRQHandler+0x180>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 8085 	beq.w	8002db8 <HAL_SPI_IRQHandler+0x180>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d023      	beq.n	8002d00 <HAL_SPI_IRQHandler+0xc8>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d011      	beq.n	8002ce8 <HAL_SPI_IRQHandler+0xb0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f043 0204 	orr.w	r2, r3, #4
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	e00b      	b.n	8002d00 <HAL_SPI_IRQHandler+0xc8>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]
        return;
 8002cfe:	e05b      	b.n	8002db8 <HAL_SPI_IRQHandler+0x180>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d014      	beq.n	8002d34 <HAL_SPI_IRQHandler+0xfc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d03c      	beq.n	8002db6 <HAL_SPI_IRQHandler+0x17e>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	6852      	ldr	r2, [r2, #4]
 8002d46:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d4a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d104      	bne.n	8002d68 <HAL_SPI_IRQHandler+0x130>
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d022      	beq.n	8002dae <HAL_SPI_IRQHandler+0x176>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	6852      	ldr	r2, [r2, #4]
 8002d72:	f022 0203 	bic.w	r2, r2, #3
 8002d76:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_SPI_IRQHandler+0x15a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d84:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <HAL_SPI_IRQHandler+0x188>)
 8002d86:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe fbe7 	bl	8001560 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00c      	beq.n	8002db4 <HAL_SPI_IRQHandler+0x17c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9e:	4a08      	ldr	r2, [pc, #32]	; (8002dc0 <HAL_SPI_IRQHandler+0x188>)
 8002da0:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe fbda 	bl	8001560 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8002dac:	e002      	b.n	8002db4 <HAL_SPI_IRQHandler+0x17c>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f808 	bl	8002dc4 <HAL_SPI_ErrorCallback>
      }
    }
    return;
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
  }
}
 8002db8:	3720      	adds	r7, #32
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	08002dd7 	.word	0x08002dd7

08002dc4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	86da      	strh	r2, [r3, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff ffe7 	bl	8002dc4 <HAL_SPI_ErrorCallback>
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002e0c:	e04d      	b.n	8002eaa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d049      	beq.n	8002eaa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d007      	beq.n	8002e2c <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002e1c:	f7fe f8b8 	bl	8000f90 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	1ad2      	subs	r2, r2, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d33e      	bcc.n	8002eaa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	6852      	ldr	r2, [r2, #4]
 8002e36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e3a:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e44:	d111      	bne.n	8002e6a <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e4e:	d004      	beq.n	8002e5a <SPI_WaitFlagStateUntilTimeout+0x5c>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e58:	d107      	bne.n	8002e6a <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e72:	d110      	bne.n	8002e96 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6819      	ldr	r1, [r3, #0]
 8002e7e:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8002e82:	400b      	ands	r3, r1
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e94:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e00e      	b.n	8002ec8 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d101      	bne.n	8002ebe <SPI_WaitFlagStateUntilTimeout+0xc0>
 8002eba:	2201      	movs	r2, #1
 8002ebc:	e000      	b.n	8002ec0 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d1a3      	bne.n	8002e0e <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2180      	movs	r1, #128	; 0x80
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff ff89 	bl	8002dfe <SPI_WaitFlagStateUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d007      	beq.n	8002f02 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	f043 0220 	orr.w	r2, r3, #32
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e000      	b.n	8002f04 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e056      	b.n	8002fcc <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f001 fbc3 	bl	80046bc <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6851      	ldr	r1, [r2, #4]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6892      	ldr	r2, [r2, #8]
 8002f5a:	4311      	orrs	r1, r2
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	68d2      	ldr	r2, [r2, #12]
 8002f60:	4311      	orrs	r1, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6912      	ldr	r2, [r2, #16]
 8002f66:	4311      	orrs	r1, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6952      	ldr	r2, [r2, #20]
 8002f6c:	4311      	orrs	r1, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6992      	ldr	r2, [r2, #24]
 8002f72:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002f76:	4311      	orrs	r1, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	69d2      	ldr	r2, [r2, #28]
 8002f7c:	4311      	orrs	r1, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6a12      	ldr	r2, [r2, #32]
 8002f82:	4311      	orrs	r1, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6992      	ldr	r2, [r2, #24]
 8002f94:	0c12      	lsrs	r2, r2, #16
 8002f96:	f002 0104 	and.w	r1, r2, #4
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002faa:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	69d2      	ldr	r2, [r2, #28]
 8002fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fba:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d122      	bne.n	8003030 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d11b      	bne.n	8003030 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0202 	mvn.w	r2, #2
 8003000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f8f6 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f8e9 	bl	80031f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f8f8 	bl	800321a <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b04      	cmp	r3, #4
 800303c:	d122      	bne.n	8003084 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b04      	cmp	r3, #4
 800304a:	d11b      	bne.n	8003084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0204 	mvn.w	r2, #4
 8003054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8cc 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f8bf 	bl	80031f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f8ce 	bl	800321a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b08      	cmp	r3, #8
 8003090:	d122      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b08      	cmp	r3, #8
 800309e:	d11b      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0208 	mvn.w	r2, #8
 80030a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2204      	movs	r2, #4
 80030ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f8a2 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f895 	bl	80031f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f8a4 	bl	800321a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	d122      	bne.n	800312c <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d11b      	bne.n	800312c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0210 	mvn.w	r2, #16
 80030fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2208      	movs	r2, #8
 8003102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f878 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 8003118:	e005      	b.n	8003126 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f86b 	bl	80031f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f87a 	bl	800321a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b01      	cmp	r3, #1
 8003138:	d10e      	bne.n	8003158 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b01      	cmp	r3, #1
 8003146:	d107      	bne.n	8003158 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0201 	mvn.w	r2, #1
 8003150:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f846 	bl	80031e4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003162:	2b80      	cmp	r3, #128	; 0x80
 8003164:	d10e      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d107      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800317c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f866 	bl	8003250 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d10e      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d107      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f83e 	bl	800322c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d10e      	bne.n	80031dc <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d107      	bne.n	80031dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0220 	mvn.w	r2, #32
 80031d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f831 	bl	800323e <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e03f      	b.n	80032f4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d106      	bne.n	800328e <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f001 fbc9 	bl	8004a20 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2224      	movs	r2, #36	; 0x24
 8003292:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	68d2      	ldr	r2, [r2, #12]
 80032a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a4:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fb68 	bl	800397c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	6912      	ldr	r2, [r2, #16]
 80032b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	6952      	ldr	r2, [r2, #20]
 80032c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ca:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	68d2      	ldr	r2, [r2, #12]
 80032d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032da:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	4613      	mov	r3, r2
 8003308:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b20      	cmp	r3, #32
 8003314:	d153      	bne.n	80033be <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL) || (Size == 0U))
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_UART_Transmit_DMA+0x26>
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e04c      	b.n	80033c0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_UART_Transmit_DMA+0x38>
 8003330:	2302      	movs	r3, #2
 8003332:	e045      	b.n	80033c0 <HAL_UART_Transmit_DMA+0xc4>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	88fa      	ldrh	r2, [r7, #6]
 8003346:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	88fa      	ldrh	r2, [r7, #6]
 800334c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2221      	movs	r2, #33	; 0x21
 8003358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	4a19      	ldr	r2, [pc, #100]	; (80033c8 <HAL_UART_Transmit_DMA+0xcc>)
 8003362:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	4a18      	ldr	r2, [pc, #96]	; (80033cc <HAL_UART_Transmit_DMA+0xd0>)
 800336a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <HAL_UART_Transmit_DMA+0xd4>)
 8003372:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	2200      	movs	r2, #0
 800337a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
 800337c:	f107 0308 	add.w	r3, r7, #8
 8003380:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	6819      	ldr	r1, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3304      	adds	r3, #4
 8003390:	461a      	mov	r2, r3
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	f7fe f884 	bl	80014a0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033a0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	6952      	ldr	r2, [r2, #20]
 80033b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033b8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e000      	b.n	80033c0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80033be:	2302      	movs	r3, #2
  }
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	08003615 	.word	0x08003615
 80033cc:	08003667 	.word	0x08003667
 80033d0:	08003683 	.word	0x08003683

080033d4 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10d      	bne.n	8003426 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_UART_IRQHandler+0x52>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fa2b 	bl	800387a <UART_Receive_IT>
      return;
 8003424:	e0cc      	b.n	80035c0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80ab 	beq.w	8003584 <HAL_UART_IRQHandler+0x1b0>
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <HAL_UART_IRQHandler+0x70>
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80a0 	beq.w	8003584 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <HAL_UART_IRQHandler+0x90>
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345c:	f043 0201 	orr.w	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_UART_IRQHandler+0xb0>
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347c:	f043 0202 	orr.w	r2, r3, #2
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_UART_IRQHandler+0xd0>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	f043 0204 	orr.w	r2, r3, #4
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_UART_IRQHandler+0xf0>
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034bc:	f043 0208 	orr.w	r2, r3, #8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d078      	beq.n	80035be <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <HAL_UART_IRQHandler+0x112>
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f9ca 	bl	800387a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf14      	ite	ne
 80034f4:	2301      	movne	r3, #1
 80034f6:	2300      	moveq	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <HAL_UART_IRQHandler+0x13a>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d031      	beq.n	8003572 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f916 	bl	8003740 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	d023      	beq.n	800356a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	6952      	ldr	r2, [r2, #20]
 800352c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003530:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003536:	2b00      	cmp	r3, #0
 8003538:	d013      	beq.n	8003562 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353e:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <HAL_UART_IRQHandler+0x1f4>)
 8003540:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe f80a 	bl	8001560 <HAL_DMA_Abort_IT>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d016      	beq.n	8003580 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800355c:	4610      	mov	r0, r2
 800355e:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003560:	e00e      	b.n	8003580 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f84d 	bl	8003602 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003568:	e00a      	b.n	8003580 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f849 	bl	8003602 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003570:	e006      	b.n	8003580 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f845 	bl	8003602 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800357e:	e01e      	b.n	80035be <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003580:	bf00      	nop
    return;
 8003582:	e01c      	b.n	80035be <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d008      	beq.n	80035a0 <HAL_UART_IRQHandler+0x1cc>
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f902 	bl	80037a2 <UART_Transmit_IT>
    return;
 800359e:	e00f      	b.n	80035c0 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_UART_IRQHandler+0x1ec>
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f948 	bl	800384a <UART_EndTransmit_IT>
    return;
 80035ba:	bf00      	nop
 80035bc:	e000      	b.n	80035c0 <HAL_UART_IRQHandler+0x1ec>
    return;
 80035be:	bf00      	nop
  }
}
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	0800377b 	.word	0x0800377b

080035cc <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr

080035de <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */ 
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr

080035f0 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr

08003602 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d113      	bne.n	8003658 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	6952      	ldr	r2, [r2, #20]
 8003640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003644:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	68d2      	ldr	r2, [r2, #12]
 8003650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003654:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 8003656:	e002      	b.n	800365e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f7ff ffb7 	bl	80035cc <HAL_UART_TxCpltCallback>
}
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f7ff ffb2 	bl	80035de <HAL_UART_TxHalfCpltCallback>
}
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bf14      	ite	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	2300      	moveq	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b21      	cmp	r3, #33	; 0x21
 80036b4:	d108      	bne.n	80036c8 <UART_DMAError+0x46>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2200      	movs	r2, #0
 80036c0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80036c2:	68b8      	ldr	r0, [r7, #8]
 80036c4:	f000 f827 	bl	8003716 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bf14      	ite	ne
 80036d6:	2301      	movne	r3, #1
 80036d8:	2300      	moveq	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b22      	cmp	r3, #34	; 0x22
 80036e8:	d108      	bne.n	80036fc <UART_DMAError+0x7a>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2200      	movs	r2, #0
 80036f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80036f6:	68b8      	ldr	r0, [r7, #8]
 80036f8:	f000 f822 	bl	8003740 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003700:	f043 0210 	orr.w	r2, r3, #16
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8003708:	68b8      	ldr	r0, [r7, #8]
 800370a:	f7ff ff7a 	bl	8003602 <HAL_UART_ErrorCallback>
}
 800370e:	bf00      	nop
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	68d2      	ldr	r2, [r2, #12]
 8003728:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800372c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	68d2      	ldr	r2, [r2, #12]
 8003752:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003756:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	6952      	ldr	r2, [r2, #20]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr

0800377a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f7ff ff34 	bl	8003602 <HAL_UART_ErrorCallback>
}
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b21      	cmp	r3, #33	; 0x21
 80037b4:	d143      	bne.n	800383e <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037be:	d119      	bne.n	80037f4 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	8812      	ldrh	r2, [r2, #0]
 80037ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d2:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d105      	bne.n	80037e8 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	1c9a      	adds	r2, r3, #2
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	621a      	str	r2, [r3, #32]
 80037e6:	e00e      	b.n	8003806 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	621a      	str	r2, [r3, #32]
 80037f2:	e008      	b.n	8003806 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	1c58      	adds	r0, r3, #1
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	6208      	str	r0, [r1, #32]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29b      	uxth	r3, r3
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	4619      	mov	r1, r3
 8003814:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10f      	bne.n	800383a <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	68d2      	ldr	r2, [r2, #12]
 8003824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003828:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	68d2      	ldr	r2, [r2, #12]
 8003834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003838:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	68d2      	ldr	r2, [r2, #12]
 800385c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003860:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff feae 	bl	80035cc <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b22      	cmp	r3, #34	; 0x22
 800388c:	d171      	bne.n	8003972 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003896:	d123      	bne.n	80038e0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10e      	bne.n	80038c4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	1c9a      	adds	r2, r3, #2
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	629a      	str	r2, [r3, #40]	; 0x28
 80038c2:	e029      	b.n	8003918 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	629a      	str	r2, [r3, #40]	; 0x28
 80038de:	e01b      	b.n	8003918 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	1c59      	adds	r1, r3, #1
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6291      	str	r1, [r2, #40]	; 0x28
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	6852      	ldr	r2, [r2, #4]
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e00c      	b.n	8003918 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	1c59      	adds	r1, r3, #1
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6291      	str	r1, [r2, #40]	; 0x28
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	6852      	ldr	r2, [r2, #4]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29b      	uxth	r3, r3
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	4619      	mov	r1, r3
 8003926:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003928:	2b00      	cmp	r3, #0
 800392a:	d120      	bne.n	800396e <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	68d2      	ldr	r2, [r2, #12]
 8003936:	f022 0220 	bic.w	r2, r2, #32
 800393a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	68d2      	ldr	r2, [r2, #12]
 8003946:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800394a:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	6952      	ldr	r2, [r2, #20]
 8003956:	f022 0201 	bic.w	r2, r2, #1
 800395a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff fe43 	bl	80035f0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e002      	b.n	8003974 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	e000      	b.n	8003974 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003972:	2302      	movs	r3, #2
  }
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800397c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	6912      	ldr	r2, [r2, #16]
 8003992:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68d2      	ldr	r2, [r2, #12]
 800399a:	430a      	orrs	r2, r1
 800399c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039c2:	f023 030c 	bic.w	r3, r3, #12
 80039c6:	68f9      	ldr	r1, [r7, #12]
 80039c8:	430b      	orrs	r3, r1
 80039ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	6952      	ldr	r2, [r2, #20]
 80039d6:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6992      	ldr	r2, [r2, #24]
 80039de:	430a      	orrs	r2, r1
 80039e0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a6f      	ldr	r2, [pc, #444]	; (8003ba4 <UART_SetConfig+0x228>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d16b      	bne.n	8003ac4 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681c      	ldr	r4, [r3, #0]
 80039f0:	f7fe fd08 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 80039f4:	4602      	mov	r2, r0
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	009a      	lsls	r2, r3, #2
 80039fe:	441a      	add	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	4a67      	ldr	r2, [pc, #412]	; (8003ba8 <UART_SetConfig+0x22c>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	011d      	lsls	r5, r3, #4
 8003a14:	f7fe fcf6 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009a      	lsls	r2, r3, #2
 8003a22:	441a      	add	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a2e:	f7fe fce9 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 8003a32:	4602      	mov	r2, r0
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	009a      	lsls	r2, r3, #2
 8003a3c:	441a      	add	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a48:	4a57      	ldr	r2, [pc, #348]	; (8003ba8 <UART_SetConfig+0x22c>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	2264      	movs	r2, #100	; 0x64
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	1af3      	subs	r3, r6, r3
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	3332      	adds	r3, #50	; 0x32
 8003a5c:	4a52      	ldr	r2, [pc, #328]	; (8003ba8 <UART_SetConfig+0x22c>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a68:	441d      	add	r5, r3
 8003a6a:	f7fe fccb 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	009a      	lsls	r2, r3, #2
 8003a78:	441a      	add	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a84:	f7fe fcbe 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	009a      	lsls	r2, r3, #2
 8003a92:	441a      	add	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9e:	4a42      	ldr	r2, [pc, #264]	; (8003ba8 <UART_SetConfig+0x22c>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	095b      	lsrs	r3, r3, #5
 8003aa6:	2264      	movs	r2, #100	; 0x64
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	1af3      	subs	r3, r6, r3
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	3332      	adds	r3, #50	; 0x32
 8003ab2:	4a3d      	ldr	r2, [pc, #244]	; (8003ba8 <UART_SetConfig+0x22c>)
 8003ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	442b      	add	r3, r5
 8003ac0:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003ac2:	e06a      	b.n	8003b9a <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681c      	ldr	r4, [r3, #0]
 8003ac8:	f7fe fc88 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009a      	lsls	r2, r3, #2
 8003ad6:	441a      	add	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	4a31      	ldr	r2, [pc, #196]	; (8003ba8 <UART_SetConfig+0x22c>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	011d      	lsls	r5, r3, #4
 8003aec:	f7fe fc76 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	009a      	lsls	r2, r3, #2
 8003afa:	441a      	add	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b06:	f7fe fc69 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009a      	lsls	r2, r3, #2
 8003b14:	441a      	add	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	4a21      	ldr	r2, [pc, #132]	; (8003ba8 <UART_SetConfig+0x22c>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	2264      	movs	r2, #100	; 0x64
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	1af3      	subs	r3, r6, r3
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	3332      	adds	r3, #50	; 0x32
 8003b34:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <UART_SetConfig+0x22c>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b40:	441d      	add	r5, r3
 8003b42:	f7fe fc4b 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8003b46:	4602      	mov	r2, r0
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009a      	lsls	r2, r3, #2
 8003b50:	441a      	add	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b5c:	f7fe fc3e 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	009a      	lsls	r2, r3, #2
 8003b6a:	441a      	add	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <UART_SetConfig+0x22c>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	2264      	movs	r2, #100	; 0x64
 8003b80:	fb02 f303 	mul.w	r3, r2, r3
 8003b84:	1af3      	subs	r3, r6, r3
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	3332      	adds	r3, #50	; 0x32
 8003b8a:	4a07      	ldr	r2, [pc, #28]	; (8003ba8 <UART_SetConfig+0x22c>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	442b      	add	r3, r5
 8003b98:	60a3      	str	r3, [r4, #8]
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40013800 	.word	0x40013800
 8003ba8:	51eb851f 	.word	0x51eb851f

08003bac <_ZN6SDCard8cardAcmdEhm>:
	bool readBlock(uint32_t blockaddr, uint8_t* buffer); //reads a single 512 byte block
	bool writeBlock(uint32_t blockaddr, uint8_t* buffer); //writes a single 512 byte block
private:
	void waitUntilReady(); //waits until the card is ready
	uint8_t cardCommand(uint8_t command, uint32_t arg);
	uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	72fb      	strb	r3, [r7, #11]
		cardCommand(CMD55, 0);
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2137      	movs	r1, #55	; 0x37
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7fc fd38 	bl	8000634 <_ZN6SDCard11cardCommandEhm>
		return cardCommand(cmd, arg);
 8003bc4:	7afb      	ldrb	r3, [r7, #11]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7fc fd32 	bl	8000634 <_ZN6SDCard11cardCommandEhm>
 8003bd0:	4603      	mov	r3, r0
	}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <_ZN6SDCard7readCSDEP5csd_t>:
			uint32_t Tickstart);
	uint8_t readRegister(uint8_t cmd, void* buf);
	/**
	 * Read a cards CSD register. The CSD contains Card-Specific Data that
	 * provides information regarding access to the card's contents. */
	uint8_t readCSD(csd_t* csd) {
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
		return readRegister(CMD9, csd);
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	2109      	movs	r1, #9
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7fc fb49 	bl	8000280 <_ZN6SDCard12readRegisterEhPv>
 8003bee:	4603      	mov	r3, r0
	}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 8003bfc:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <MX_CAN_Init+0x64>)
 8003bfe:	4a18      	ldr	r2, [pc, #96]	; (8003c60 <MX_CAN_Init+0x68>)
 8003c00:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8003c02:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <MX_CAN_Init+0x64>)
 8003c04:	2204      	movs	r2, #4
 8003c06:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003c08:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <MX_CAN_Init+0x64>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003c0e:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <MX_CAN_Init+0x64>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <MX_CAN_Init+0x64>)
 8003c16:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8003c1a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <MX_CAN_Init+0x64>)
 8003c1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c22:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003c24:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <MX_CAN_Init+0x64>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <MX_CAN_Init+0x64>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <MX_CAN_Init+0x64>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <MX_CAN_Init+0x64>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003c3c:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <MX_CAN_Init+0x64>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <MX_CAN_Init+0x64>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003c48:	4804      	ldr	r0, [pc, #16]	; (8003c5c <MX_CAN_Init+0x64>)
 8003c4a:	f7fd f9cd 	bl	8000fe8 <HAL_CAN_Init>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8003c54:	f7fd f917 	bl	8000e86 <Error_Handler>
  }

}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000090 	.word	0x20000090
 8003c60:	40006400 	.word	0x40006400

08003c64 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c6c:	f107 0310 	add.w	r3, r7, #16
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1c      	ldr	r2, [pc, #112]	; (8003cf0 <HAL_CAN_MspInit+0x8c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d131      	bne.n	8003ce8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003c84:	4a1b      	ldr	r2, [pc, #108]	; (8003cf4 <HAL_CAN_MspInit+0x90>)
 8003c86:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <HAL_CAN_MspInit+0x90>)
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	61d3      	str	r3, [r2, #28]
 8003c90:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <HAL_CAN_MspInit+0x90>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9c:	4a15      	ldr	r2, [pc, #84]	; (8003cf4 <HAL_CAN_MspInit+0x90>)
 8003c9e:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <HAL_CAN_MspInit+0x90>)
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f043 0304 	orr.w	r3, r3, #4
 8003ca6:	6193      	str	r3, [r2, #24]
 8003ca8:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <HAL_CAN_MspInit+0x90>)
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc2:	f107 0310 	add.w	r3, r7, #16
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	480b      	ldr	r0, [pc, #44]	; (8003cf8 <HAL_CAN_MspInit+0x94>)
 8003cca:	f7fd fe05 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cdc:	f107 0310 	add.w	r3, r7, #16
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4805      	ldr	r0, [pc, #20]	; (8003cf8 <HAL_CAN_MspInit+0x94>)
 8003ce4:	f7fd fdf8 	bl	80018d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3720      	adds	r7, #32
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40006400 	.word	0x40006400
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40010800 	.word	0x40010800

08003cfc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d02:	4a10      	ldr	r2, [pc, #64]	; (8003d44 <MX_DMA_Init+0x48>)
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <MX_DMA_Init+0x48>)
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6153      	str	r3, [r2, #20]
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <MX_DMA_Init+0x48>)
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	607b      	str	r3, [r7, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	200c      	movs	r0, #12
 8003d20:	f7fd fb2d 	bl	800137e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003d24:	200c      	movs	r0, #12
 8003d26:	f7fd fb46 	bl	80013b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	200d      	movs	r0, #13
 8003d30:	f7fd fb25 	bl	800137e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003d34:	200d      	movs	r0, #13
 8003d36:	f7fd fb3e 	bl	80013b6 <HAL_NVIC_EnableIRQ>

}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000

08003d48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d4e:	f107 0310 	add.w	r3, r7, #16
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	609a      	str	r2, [r3, #8]
 8003d5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d5c:	4a43      	ldr	r2, [pc, #268]	; (8003e6c <MX_GPIO_Init+0x124>)
 8003d5e:	4b43      	ldr	r3, [pc, #268]	; (8003e6c <MX_GPIO_Init+0x124>)
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f043 0310 	orr.w	r3, r3, #16
 8003d66:	6193      	str	r3, [r2, #24]
 8003d68:	4b40      	ldr	r3, [pc, #256]	; (8003e6c <MX_GPIO_Init+0x124>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d74:	4a3d      	ldr	r2, [pc, #244]	; (8003e6c <MX_GPIO_Init+0x124>)
 8003d76:	4b3d      	ldr	r3, [pc, #244]	; (8003e6c <MX_GPIO_Init+0x124>)
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f043 0304 	orr.w	r3, r3, #4
 8003d7e:	6193      	str	r3, [r2, #24]
 8003d80:	4b3a      	ldr	r3, [pc, #232]	; (8003e6c <MX_GPIO_Init+0x124>)
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d8c:	4a37      	ldr	r2, [pc, #220]	; (8003e6c <MX_GPIO_Init+0x124>)
 8003d8e:	4b37      	ldr	r3, [pc, #220]	; (8003e6c <MX_GPIO_Init+0x124>)
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f043 0308 	orr.w	r3, r3, #8
 8003d96:	6193      	str	r3, [r2, #24]
 8003d98:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <MX_GPIO_Init+0x124>)
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RD_Pin|LCD_RS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8003da4:	2200      	movs	r2, #0
 8003da6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8003daa:	4831      	ldr	r0, [pc, #196]	; (8003e70 <MX_GPIO_Init+0x128>)
 8003dac:	f7fd ff09 	bl	8001bc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_WR_Pin|LCD_RST_Pin|LED_VPRG_Pin|LED_DCPRG_Pin 
 8003db0:	2200      	movs	r2, #0
 8003db2:	211f      	movs	r1, #31
 8003db4:	482f      	ldr	r0, [pc, #188]	; (8003e74 <MX_GPIO_Init+0x12c>)
 8003db6:	f7fd ff04 	bl	8001bc2 <HAL_GPIO_WritePin>
                          |LED_XLAT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|SD_CS_Pin 
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f241 01ff 	movw	r1, #4351	; 0x10ff
 8003dc0:	482d      	ldr	r0, [pc, #180]	; (8003e78 <MX_GPIO_Init+0x130>)
 8003dc2:	f7fd fefe 	bl	8001bc2 <HAL_GPIO_WritePin>
                          |LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin 
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLANK_GPIO_Port, LED_BLANK_Pin, GPIO_PIN_SET);
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dcc:	4829      	ldr	r0, [pc, #164]	; (8003e74 <MX_GPIO_Init+0x12c>)
 8003dce:	f7fd fef8 	bl	8001bc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_RS_Pin|LCD_CS_Pin;
 8003dd2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de0:	2302      	movs	r3, #2
 8003de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de4:	f107 0310 	add.w	r3, r7, #16
 8003de8:	4619      	mov	r1, r3
 8003dea:	4821      	ldr	r0, [pc, #132]	; (8003e70 <MX_GPIO_Init+0x128>)
 8003dec:	f7fd fd74 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_WR_Pin|LCD_RST_Pin|LED_VPRG_Pin|LED_DCPRG_Pin 
 8003df0:	f240 131f 	movw	r3, #287	; 0x11f
 8003df4:	613b      	str	r3, [r7, #16]
                          |LED_XLAT_Pin|LED_BLANK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003df6:	2301      	movs	r3, #1
 8003df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dfe:	2302      	movs	r3, #2
 8003e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e02:	f107 0310 	add.w	r3, r7, #16
 8003e06:	4619      	mov	r1, r3
 8003e08:	481a      	ldr	r0, [pc, #104]	; (8003e74 <MX_GPIO_Init+0x12c>)
 8003e0a:	f7fd fd65 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin 
 8003e0e:	23ff      	movs	r3, #255	; 0xff
 8003e10:	613b      	str	r3, [r7, #16]
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e12:	2301      	movs	r3, #1
 8003e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e1e:	f107 0310 	add.w	r3, r7, #16
 8003e22:	4619      	mov	r1, r3
 8003e24:	4814      	ldr	r0, [pc, #80]	; (8003e78 <MX_GPIO_Init+0x130>)
 8003e26:	f7fd fd57 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8003e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e30:	2301      	movs	r3, #1
 8003e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003e3c:	f107 0310 	add.w	r3, r7, #16
 8003e40:	4619      	mov	r1, r3
 8003e42:	480d      	ldr	r0, [pc, #52]	; (8003e78 <MX_GPIO_Init+0x130>)
 8003e44:	f7fd fd48 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_XERR_Pin;
 8003e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_XERR_GPIO_Port, &GPIO_InitStruct);
 8003e56:	f107 0310 	add.w	r3, r7, #16
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4805      	ldr	r0, [pc, #20]	; (8003e74 <MX_GPIO_Init+0x12c>)
 8003e5e:	f7fd fd3b 	bl	80018d8 <HAL_GPIO_Init>

}
 8003e62:	bf00      	nop
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40011000 	.word	0x40011000
 8003e74:	40010800 	.word	0x40010800
 8003e78:	40010c00 	.word	0x40010c00

08003e7c <lcd_pins_input>:
		0x08, 0x06, 0x00 },/*"}",93*/
{ 0x0C, 0x32, 0xC2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 }, /*"~",94*/
};

void lcd_pins_input(void) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = LCD_D3_Pin | LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin;
 8003e82:	2378      	movs	r3, #120	; 0x78
 8003e84:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e86:	2300      	movs	r3, #0
 8003e88:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e8e:	463b      	mov	r3, r7
 8003e90:	4619      	mov	r1, r3
 8003e92:	480e      	ldr	r0, [pc, #56]	; (8003ecc <lcd_pins_input+0x50>)
 8003e94:	f7fd fd20 	bl	80018d8 <HAL_GPIO_Init>
	/*Configure GPIO pins : PEPin PEPin PEPin */
	GPIO_InitStruct.Pin = LCD_D2_Pin | LCD_D0_Pin | LCD_D7_Pin;
 8003e98:	2385      	movs	r3, #133	; 0x85
 8003e9a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea4:	463b      	mov	r3, r7
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4809      	ldr	r0, [pc, #36]	; (8003ed0 <lcd_pins_input+0x54>)
 8003eaa:	f7fd fd15 	bl	80018d8 <HAL_GPIO_Init>
	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = LCD_D1_Pin;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(LCD_D1_GPIO_Port, &GPIO_InitStruct);
 8003eba:	463b      	mov	r3, r7
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4803      	ldr	r0, [pc, #12]	; (8003ecc <lcd_pins_input+0x50>)
 8003ec0:	f7fd fd0a 	bl	80018d8 <HAL_GPIO_Init>

}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40010c00 	.word	0x40010c00
 8003ed0:	40010800 	.word	0x40010800

08003ed4 <lcd_pins_output>:
void lcd_pins_output(void) {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = LCD_D3_Pin | LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin;
 8003eda:	2378      	movs	r3, #120	; 0x78
 8003edc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eea:	463b      	mov	r3, r7
 8003eec:	4619      	mov	r1, r3
 8003eee:	4810      	ldr	r0, [pc, #64]	; (8003f30 <lcd_pins_output+0x5c>)
 8003ef0:	f7fd fcf2 	bl	80018d8 <HAL_GPIO_Init>
	/*Configure GPIO pins : PEPin PEPin PEPin */
	GPIO_InitStruct.Pin = LCD_D2_Pin | LCD_D0_Pin | LCD_D7_Pin;
 8003ef4:	2385      	movs	r3, #133	; 0x85
 8003ef6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f00:	2303      	movs	r3, #3
 8003f02:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f04:	463b      	mov	r3, r7
 8003f06:	4619      	mov	r1, r3
 8003f08:	480a      	ldr	r0, [pc, #40]	; (8003f34 <lcd_pins_output+0x60>)
 8003f0a:	f7fd fce5 	bl	80018d8 <HAL_GPIO_Init>
	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = LCD_D1_Pin;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f12:	2301      	movs	r3, #1
 8003f14:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LCD_D1_GPIO_Port, &GPIO_InitStruct);
 8003f1e:	463b      	mov	r3, r7
 8003f20:	4619      	mov	r1, r3
 8003f22:	4803      	ldr	r0, [pc, #12]	; (8003f30 <lcd_pins_output+0x5c>)
 8003f24:	f7fd fcd8 	bl	80018d8 <HAL_GPIO_Init>
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40010c00 	.word	0x40010c00
 8003f34:	40010800 	.word	0x40010800

08003f38 <cs_set>:

void cs_set() {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f42:	4802      	ldr	r0, [pc, #8]	; (8003f4c <cs_set+0x14>)
 8003f44:	f7fd fe3d 	bl	8001bc2 <HAL_GPIO_WritePin>
}
 8003f48:	bf00      	nop
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40011000 	.word	0x40011000

08003f50 <cs_clr>:
void cs_clr() {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8003f54:	2200      	movs	r2, #0
 8003f56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f5a:	4802      	ldr	r0, [pc, #8]	; (8003f64 <cs_clr+0x14>)
 8003f5c:	f7fd fe31 	bl	8001bc2 <HAL_GPIO_WritePin>
}
 8003f60:	bf00      	nop
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40011000 	.word	0x40011000

08003f68 <rst_set>:
void rst_set() {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	2102      	movs	r1, #2
 8003f70:	4802      	ldr	r0, [pc, #8]	; (8003f7c <rst_set+0x14>)
 8003f72:	f7fd fe26 	bl	8001bc2 <HAL_GPIO_WritePin>
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40010800 	.word	0x40010800

08003f80 <rst_clr>:
void rst_clr() {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8003f84:	2200      	movs	r2, #0
 8003f86:	2102      	movs	r1, #2
 8003f88:	4802      	ldr	r0, [pc, #8]	; (8003f94 <rst_clr+0x14>)
 8003f8a:	f7fd fe1a 	bl	8001bc2 <HAL_GPIO_WritePin>
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40010800 	.word	0x40010800

08003f98 <wr_set>:
void wr_set() {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	4802      	ldr	r0, [pc, #8]	; (8003fac <wr_set+0x14>)
 8003fa2:	f7fd fe0e 	bl	8001bc2 <HAL_GPIO_WritePin>
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40010800 	.word	0x40010800

08003fb0 <wr_clr>:
void wr_clr() {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	4802      	ldr	r0, [pc, #8]	; (8003fc4 <wr_clr+0x14>)
 8003fba:	f7fd fe02 	bl	8001bc2 <HAL_GPIO_WritePin>
}
 8003fbe:	bf00      	nop
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40010800 	.word	0x40010800

08003fc8 <rs_set>:
void rs_set() {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fd2:	4802      	ldr	r0, [pc, #8]	; (8003fdc <rs_set+0x14>)
 8003fd4:	f7fd fdf5 	bl	8001bc2 <HAL_GPIO_WritePin>
}
 8003fd8:	bf00      	nop
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40011000 	.word	0x40011000

08003fe0 <rs_clr>:
void rs_clr() {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fea:	4802      	ldr	r0, [pc, #8]	; (8003ff4 <rs_clr+0x14>)
 8003fec:	f7fd fde9 	bl	8001bc2 <HAL_GPIO_WritePin>
}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40011000 	.word	0x40011000

08003ff8 <rd_set>:
void rd_set() {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004002:	4802      	ldr	r0, [pc, #8]	; (800400c <rd_set+0x14>)
 8004004:	f7fd fddd 	bl	8001bc2 <HAL_GPIO_WritePin>
}
 8004008:	bf00      	nop
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40011000 	.word	0x40011000

08004010 <rd_clr>:
void rd_clr() {
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_RESET);
 8004014:	2200      	movs	r2, #0
 8004016:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800401a:	4802      	ldr	r0, [pc, #8]	; (8004024 <rd_clr+0x14>)
 800401c:	f7fd fdd1 	bl	8001bc2 <HAL_GPIO_WritePin>
}
 8004020:	bf00      	nop
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40011000 	.word	0x40011000

08004028 <lcd_write_bus_fast>:
	HAL_Delay(100);
	rst_set();
	HAL_Delay(50);
}
#define BIT(byte,pos) ((byte & (1 << pos)) >> pos)
void lcd_write_bus_fast(uint8_t d) {
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = d;
 8004032:	4a06      	ldr	r2, [pc, #24]	; (800404c <lcd_write_bus_fast+0x24>)
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	6113      	str	r3, [r2, #16]
	GPIOB->BRR = ~d;
 8004038:	4a04      	ldr	r2, [pc, #16]	; (800404c <lcd_write_bus_fast+0x24>)
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	43db      	mvns	r3, r3
 800403e:	6153      	str	r3, [r2, #20]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40010c00 	.word	0x40010c00

08004050 <lcd_write_data_fast>:
void lcd_write_data_fast(uint8_t d) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	71fb      	strb	r3, [r7, #7]
	lcd_write_bus_fast(d);
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ffe3 	bl	8004028 <lcd_write_bus_fast>
	LCD_WR_GPIO_Port->BSRR = (uint32_t) LCD_WR_Pin << 16U;
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <lcd_write_data_fast+0x28>)
 8004064:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004068:	611a      	str	r2, [r3, #16]
	LCD_WR_GPIO_Port->BSRR = (uint32_t) LCD_WR_Pin;
 800406a:	4b03      	ldr	r3, [pc, #12]	; (8004078 <lcd_write_data_fast+0x28>)
 800406c:	2201      	movs	r2, #1
 800406e:	611a      	str	r2, [r3, #16]
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40010800 	.word	0x40010800

0800407c <lcd_write_data16_fast>:
void lcd_write_data16_fast(uint16_t d) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	80fb      	strh	r3, [r7, #6]
	lcd_write_data_fast(d >> 8);
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	0a1b      	lsrs	r3, r3, #8
 800408a:	b29b      	uxth	r3, r3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ffde 	bl	8004050 <lcd_write_data_fast>
	lcd_write_data_fast(d & 0x00FF);
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff ffd9 	bl	8004050 <lcd_write_data_fast>
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <lcd_read_bus>:
//	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (d & (1 << 4)) >> 4);
//	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (d & (1 << 5)) >> 5);
//	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (d & (1 << 6)) >> 6);
//	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (d & (1 << 7)) >> 7);
//}
uint8_t lcd_read_bus() {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
	uint8_t data = 0x00;
 80040ae:	2300      	movs	r3, #0
 80040b0:	71fb      	strb	r3, [r7, #7]
	data |= HAL_GPIO_ReadPin(LCD_D0_GPIO_Port, LCD_D0_Pin);
 80040b2:	2101      	movs	r1, #1
 80040b4:	4830      	ldr	r0, [pc, #192]	; (8004178 <lcd_read_bus+0xd0>)
 80040b6:	f7fd fd6d 	bl	8001b94 <HAL_GPIO_ReadPin>
 80040ba:	4603      	mov	r3, r0
 80040bc:	461a      	mov	r2, r3
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	71fb      	strb	r3, [r7, #7]
	data |= HAL_GPIO_ReadPin(LCD_D1_GPIO_Port, LCD_D1_Pin) << 1;
 80040c4:	2102      	movs	r1, #2
 80040c6:	482c      	ldr	r0, [pc, #176]	; (8004178 <lcd_read_bus+0xd0>)
 80040c8:	f7fd fd64 	bl	8001b94 <HAL_GPIO_ReadPin>
 80040cc:	4603      	mov	r3, r0
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	b25a      	sxtb	r2, r3
 80040d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	b25b      	sxtb	r3, r3
 80040da:	71fb      	strb	r3, [r7, #7]
	data |= HAL_GPIO_ReadPin(LCD_D2_GPIO_Port, LCD_D2_Pin) << 2;
 80040dc:	2104      	movs	r1, #4
 80040de:	4826      	ldr	r0, [pc, #152]	; (8004178 <lcd_read_bus+0xd0>)
 80040e0:	f7fd fd58 	bl	8001b94 <HAL_GPIO_ReadPin>
 80040e4:	4603      	mov	r3, r0
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	b25a      	sxtb	r2, r3
 80040ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	71fb      	strb	r3, [r7, #7]
	data |= HAL_GPIO_ReadPin(LCD_D3_GPIO_Port, LCD_D3_Pin) << 3;
 80040f4:	2108      	movs	r1, #8
 80040f6:	4820      	ldr	r0, [pc, #128]	; (8004178 <lcd_read_bus+0xd0>)
 80040f8:	f7fd fd4c 	bl	8001b94 <HAL_GPIO_ReadPin>
 80040fc:	4603      	mov	r3, r0
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	b25a      	sxtb	r2, r3
 8004102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004106:	4313      	orrs	r3, r2
 8004108:	b25b      	sxtb	r3, r3
 800410a:	71fb      	strb	r3, [r7, #7]
	data |= HAL_GPIO_ReadPin(LCD_D4_GPIO_Port, LCD_D4_Pin) << 4;
 800410c:	2110      	movs	r1, #16
 800410e:	481a      	ldr	r0, [pc, #104]	; (8004178 <lcd_read_bus+0xd0>)
 8004110:	f7fd fd40 	bl	8001b94 <HAL_GPIO_ReadPin>
 8004114:	4603      	mov	r3, r0
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	b25a      	sxtb	r2, r3
 800411a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411e:	4313      	orrs	r3, r2
 8004120:	b25b      	sxtb	r3, r3
 8004122:	71fb      	strb	r3, [r7, #7]
	data |= HAL_GPIO_ReadPin(LCD_D5_GPIO_Port, LCD_D5_Pin) << 5;
 8004124:	2120      	movs	r1, #32
 8004126:	4814      	ldr	r0, [pc, #80]	; (8004178 <lcd_read_bus+0xd0>)
 8004128:	f7fd fd34 	bl	8001b94 <HAL_GPIO_ReadPin>
 800412c:	4603      	mov	r3, r0
 800412e:	015b      	lsls	r3, r3, #5
 8004130:	b25a      	sxtb	r2, r3
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	4313      	orrs	r3, r2
 8004138:	b25b      	sxtb	r3, r3
 800413a:	71fb      	strb	r3, [r7, #7]
	data |= HAL_GPIO_ReadPin(LCD_D6_GPIO_Port, LCD_D6_Pin) << 6;
 800413c:	2140      	movs	r1, #64	; 0x40
 800413e:	480e      	ldr	r0, [pc, #56]	; (8004178 <lcd_read_bus+0xd0>)
 8004140:	f7fd fd28 	bl	8001b94 <HAL_GPIO_ReadPin>
 8004144:	4603      	mov	r3, r0
 8004146:	019b      	lsls	r3, r3, #6
 8004148:	b25a      	sxtb	r2, r3
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	4313      	orrs	r3, r2
 8004150:	b25b      	sxtb	r3, r3
 8004152:	71fb      	strb	r3, [r7, #7]
	data |= HAL_GPIO_ReadPin(LCD_D7_GPIO_Port, LCD_D7_Pin) << 7;
 8004154:	2180      	movs	r1, #128	; 0x80
 8004156:	4808      	ldr	r0, [pc, #32]	; (8004178 <lcd_read_bus+0xd0>)
 8004158:	f7fd fd1c 	bl	8001b94 <HAL_GPIO_ReadPin>
 800415c:	4603      	mov	r3, r0
 800415e:	01db      	lsls	r3, r3, #7
 8004160:	b25a      	sxtb	r2, r3
 8004162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004166:	4313      	orrs	r3, r2
 8004168:	b25b      	sxtb	r3, r3
 800416a:	71fb      	strb	r3, [r7, #7]
	return data;
 800416c:	79fb      	ldrb	r3, [r7, #7]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40010c00 	.word	0x40010c00

0800417c <lcd_write_command>:
void lcd_write_command(uint8_t d) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	71fb      	strb	r3, [r7, #7]
	lcd_write_bus_fast(d);
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff ff4d 	bl	8004028 <lcd_write_bus_fast>
	rs_clr();
 800418e:	f7ff ff27 	bl	8003fe0 <rs_clr>
	wr_clr();
 8004192:	f7ff ff0d 	bl	8003fb0 <wr_clr>
	wr_set();
 8004196:	f7ff feff 	bl	8003f98 <wr_set>
	rs_set();
 800419a:	f7ff ff15 	bl	8003fc8 <rs_set>
}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <lcd_read_data>:
uint8_t lcd_read_data() {
 80041a6:	b580      	push	{r7, lr}
 80041a8:	af00      	add	r7, sp, #0
	rd_clr();
 80041aa:	f7ff ff31 	bl	8004010 <rd_clr>
	rd_set();
 80041ae:	f7ff ff23 	bl	8003ff8 <rd_set>
	return lcd_read_bus();
 80041b2:	f7ff ff79 	bl	80040a8 <lcd_read_bus>
 80041b6:	4603      	mov	r3, r0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}

080041bc <lcd_write_data>:
void lcd_write_data(uint8_t d) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
	lcd_write_bus_fast(d);
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ff2d 	bl	8004028 <lcd_write_bus_fast>
	wr_clr();
 80041ce:	f7ff feef 	bl	8003fb0 <wr_clr>
	wr_set();
 80041d2:	f7ff fee1 	bl	8003f98 <wr_set>
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <lcd_cmd>:

void lcd_cmd(uint8_t cmd, uint8_t data[], uint8_t result_len, uint8_t direction) {
 80041de:	b590      	push	{r4, r7, lr}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6039      	str	r1, [r7, #0]
 80041e6:	4611      	mov	r1, r2
 80041e8:	461a      	mov	r2, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	71fb      	strb	r3, [r7, #7]
 80041ee:	460b      	mov	r3, r1
 80041f0:	71bb      	strb	r3, [r7, #6]
 80041f2:	4613      	mov	r3, r2
 80041f4:	717b      	strb	r3, [r7, #5]
	// initialize pin state
	lcd_pins_output();
 80041f6:	f7ff fe6d 	bl	8003ed4 <lcd_pins_output>
	cs_clr();
 80041fa:	f7ff fea9 	bl	8003f50 <cs_clr>
	// send cmd
	lcd_write_command(cmd);
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff ffbb 	bl	800417c <lcd_write_command>
	// read result
	if (result_len != 0) {
 8004206:	79bb      	ldrb	r3, [r7, #6]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d02a      	beq.n	8004262 <lcd_cmd+0x84>
		if (direction == FROM_LCD) {
 800420c:	797b      	ldrb	r3, [r7, #5]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d113      	bne.n	800423a <lcd_cmd+0x5c>
			lcd_pins_input();
 8004212:	f7ff fe33 	bl	8003e7c <lcd_pins_input>
			for (uint8_t i = 0; i < result_len; i++) {
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
 800421a:	e009      	b.n	8004230 <lcd_cmd+0x52>
				data[i] = lcd_read_data();
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	18d4      	adds	r4, r2, r3
 8004222:	f7ff ffc0 	bl	80041a6 <lcd_read_data>
 8004226:	4603      	mov	r3, r0
 8004228:	7023      	strb	r3, [r4, #0]
			for (uint8_t i = 0; i < result_len; i++) {
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	3301      	adds	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
 8004230:	7bfa      	ldrb	r2, [r7, #15]
 8004232:	79bb      	ldrb	r3, [r7, #6]
 8004234:	429a      	cmp	r2, r3
 8004236:	d3f1      	bcc.n	800421c <lcd_cmd+0x3e>
 8004238:	e013      	b.n	8004262 <lcd_cmd+0x84>
			}
		} else if (direction == TO_LCD) {
 800423a:	797b      	ldrb	r3, [r7, #5]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d110      	bne.n	8004262 <lcd_cmd+0x84>
			for (uint8_t i = 0; i < result_len; i++) {
 8004240:	2300      	movs	r3, #0
 8004242:	73bb      	strb	r3, [r7, #14]
 8004244:	e009      	b.n	800425a <lcd_cmd+0x7c>
				lcd_write_data(data[i]);
 8004246:	7bbb      	ldrb	r3, [r7, #14]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	4413      	add	r3, r2
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff ffb4 	bl	80041bc <lcd_write_data>
			for (uint8_t i = 0; i < result_len; i++) {
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	3301      	adds	r3, #1
 8004258:	73bb      	strb	r3, [r7, #14]
 800425a:	7bba      	ldrb	r2, [r7, #14]
 800425c:	79bb      	ldrb	r3, [r7, #6]
 800425e:	429a      	cmp	r2, r3
 8004260:	d3f1      	bcc.n	8004246 <lcd_cmd+0x68>
			}
		}
	}
	cs_set(); // 1
 8004262:	f7ff fe69 	bl	8003f38 <cs_set>
}
 8004266:	bf00      	nop
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	bd90      	pop	{r4, r7, pc}

0800426e <address_set>:

void address_set(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800426e:	b590      	push	{r4, r7, lr}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	4604      	mov	r4, r0
 8004276:	4608      	mov	r0, r1
 8004278:	4611      	mov	r1, r2
 800427a:	461a      	mov	r2, r3
 800427c:	4623      	mov	r3, r4
 800427e:	80fb      	strh	r3, [r7, #6]
 8004280:	4603      	mov	r3, r0
 8004282:	80bb      	strh	r3, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	807b      	strh	r3, [r7, #2]
 8004288:	4613      	mov	r3, r2
 800428a:	803b      	strh	r3, [r7, #0]
	uint8_t tmp[4];
	tmp[0] = (uint8_t) (x1 >> 8);
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	b29b      	uxth	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	733b      	strb	r3, [r7, #12]
	tmp[1] = (uint8_t) (x1 & 0x00FF);
 8004296:	88fb      	ldrh	r3, [r7, #6]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	737b      	strb	r3, [r7, #13]
	tmp[2] = (uint8_t) (x2 >> 8);
 800429c:	887b      	ldrh	r3, [r7, #2]
 800429e:	0a1b      	lsrs	r3, r3, #8
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	73bb      	strb	r3, [r7, #14]
	tmp[3] = (uint8_t) (x2 & 0x00FF);
 80042a6:	887b      	ldrh	r3, [r7, #2]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	73fb      	strb	r3, [r7, #15]
	lcd_cmd(LCD_SET_X, tmp, 4, TO_LCD);
 80042ac:	f107 010c 	add.w	r1, r7, #12
 80042b0:	2300      	movs	r3, #0
 80042b2:	2204      	movs	r2, #4
 80042b4:	202a      	movs	r0, #42	; 0x2a
 80042b6:	f7ff ff92 	bl	80041de <lcd_cmd>
	tmp[0] = (uint8_t) (y1 >> 8);
 80042ba:	88bb      	ldrh	r3, [r7, #4]
 80042bc:	0a1b      	lsrs	r3, r3, #8
 80042be:	b29b      	uxth	r3, r3
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	733b      	strb	r3, [r7, #12]
	tmp[1] = (uint8_t) (y1 & 0x00FF);
 80042c4:	88bb      	ldrh	r3, [r7, #4]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	737b      	strb	r3, [r7, #13]
	tmp[2] = (uint8_t) (y2 >> 8);
 80042ca:	883b      	ldrh	r3, [r7, #0]
 80042cc:	0a1b      	lsrs	r3, r3, #8
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	73bb      	strb	r3, [r7, #14]
	tmp[3] = (uint8_t) (y2 & 0x00FF);
 80042d4:	883b      	ldrh	r3, [r7, #0]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	73fb      	strb	r3, [r7, #15]
	lcd_cmd(LCD_SET_Y, tmp, 4, TO_LCD);
 80042da:	f107 010c 	add.w	r1, r7, #12
 80042de:	2300      	movs	r3, #0
 80042e0:	2204      	movs	r2, #4
 80042e2:	202b      	movs	r0, #43	; 0x2b
 80042e4:	f7ff ff7b 	bl	80041de <lcd_cmd>
	lcd_cmd(LCD_WRITE_RAM, NULL, 0, TO_LCD);
 80042e8:	2300      	movs	r3, #0
 80042ea:	2200      	movs	r2, #0
 80042ec:	2100      	movs	r1, #0
 80042ee:	202c      	movs	r0, #44	; 0x2c
 80042f0:	f7ff ff75 	bl	80041de <lcd_cmd>
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd90      	pop	{r4, r7, pc}

080042fc <lcd_init>:

void lcd_init() {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
	uint8_t tmp[15];

	wr_set();
 8004302:	f7ff fe49 	bl	8003f98 <wr_set>
	rd_set();
 8004306:	f7ff fe77 	bl	8003ff8 <rd_set>
	cs_set();
 800430a:	f7ff fe15 	bl	8003f38 <cs_set>
	rs_set();
 800430e:	f7ff fe5b 	bl	8003fc8 <rs_set>
	rst_clr();
 8004312:	f7ff fe35 	bl	8003f80 <rst_clr>
	HAL_Delay(100);
 8004316:	2064      	movs	r0, #100	; 0x64
 8004318:	f7fc fe44 	bl	8000fa4 <HAL_Delay>
	rst_set();
 800431c:	f7ff fe24 	bl	8003f68 <rst_set>
	HAL_Delay(50);
 8004320:	2032      	movs	r0, #50	; 0x32
 8004322:	f7fc fe3f 	bl	8000fa4 <HAL_Delay>
	tmp[0] = 0x36;
 8004326:	2336      	movs	r3, #54	; 0x36
 8004328:	703b      	strb	r3, [r7, #0]
	tmp[1] = 0x04;
 800432a:	2304      	movs	r3, #4
 800432c:	707b      	strb	r3, [r7, #1]
	tmp[2] = 0x00;
 800432e:	2300      	movs	r3, #0
 8004330:	70bb      	strb	r3, [r7, #2]
	tmp[3] = 0x3C;
 8004332:	233c      	movs	r3, #60	; 0x3c
 8004334:	70fb      	strb	r3, [r7, #3]
	tmp[4] = 0x0F;
 8004336:	230f      	movs	r3, #15
 8004338:	713b      	strb	r3, [r7, #4]
	tmp[5] = 0x8F;
 800433a:	238f      	movs	r3, #143	; 0x8f
 800433c:	717b      	strb	r3, [r7, #5]
	lcd_cmd(0xF1, tmp, 6, TO_LCD);
 800433e:	4639      	mov	r1, r7
 8004340:	2300      	movs	r3, #0
 8004342:	2206      	movs	r2, #6
 8004344:	20f1      	movs	r0, #241	; 0xf1
 8004346:	f7ff ff4a 	bl	80041de <lcd_cmd>
	tmp[0] = 0x18;
 800434a:	2318      	movs	r3, #24
 800434c:	703b      	strb	r3, [r7, #0]
	tmp[1] = 0xA3;
 800434e:	23a3      	movs	r3, #163	; 0xa3
 8004350:	707b      	strb	r3, [r7, #1]
	tmp[2] = 0x12;
 8004352:	2312      	movs	r3, #18
 8004354:	70bb      	strb	r3, [r7, #2]
	tmp[3] = 0x02;
 8004356:	2302      	movs	r3, #2
 8004358:	70fb      	strb	r3, [r7, #3]
	tmp[4] = 0xB2;
 800435a:	23b2      	movs	r3, #178	; 0xb2
 800435c:	713b      	strb	r3, [r7, #4]
	tmp[5] = 0x12;
 800435e:	2312      	movs	r3, #18
 8004360:	717b      	strb	r3, [r7, #5]
	tmp[6] = 0xFF;
 8004362:	23ff      	movs	r3, #255	; 0xff
 8004364:	71bb      	strb	r3, [r7, #6]
	tmp[7] = 0x10;
 8004366:	2310      	movs	r3, #16
 8004368:	71fb      	strb	r3, [r7, #7]
	tmp[8] = 0x00;
 800436a:	2300      	movs	r3, #0
 800436c:	723b      	strb	r3, [r7, #8]
	lcd_cmd(0xF2, tmp, 9, TO_LCD);
 800436e:	4639      	mov	r1, r7
 8004370:	2300      	movs	r3, #0
 8004372:	2209      	movs	r2, #9
 8004374:	20f2      	movs	r0, #242	; 0xf2
 8004376:	f7ff ff32 	bl	80041de <lcd_cmd>
	tmp[0] = 0x21;
 800437a:	2321      	movs	r3, #33	; 0x21
 800437c:	703b      	strb	r3, [r7, #0]
	tmp[1] = 0x04;
 800437e:	2304      	movs	r3, #4
 8004380:	707b      	strb	r3, [r7, #1]
	lcd_cmd(0xF8, tmp, 2, TO_LCD);
 8004382:	4639      	mov	r1, r7
 8004384:	2300      	movs	r3, #0
 8004386:	2202      	movs	r2, #2
 8004388:	20f8      	movs	r0, #248	; 0xf8
 800438a:	f7ff ff28 	bl	80041de <lcd_cmd>
	tmp[0] = 0x00;
 800438e:	2300      	movs	r3, #0
 8004390:	703b      	strb	r3, [r7, #0]
	tmp[1] = 0x08;
 8004392:	2308      	movs	r3, #8
 8004394:	707b      	strb	r3, [r7, #1]
	lcd_cmd(0xF9, tmp, 2, TO_LCD);
 8004396:	4639      	mov	r1, r7
 8004398:	2300      	movs	r3, #0
 800439a:	2202      	movs	r2, #2
 800439c:	20f9      	movs	r0, #249	; 0xf9
 800439e:	f7ff ff1e 	bl	80041de <lcd_cmd>
	tmp[0] = 0x08;
 80043a2:	2308      	movs	r3, #8
 80043a4:	703b      	strb	r3, [r7, #0]
	lcd_cmd(0x36, tmp, 1, TO_LCD);
 80043a6:	4639      	mov	r1, r7
 80043a8:	2300      	movs	r3, #0
 80043aa:	2201      	movs	r2, #1
 80043ac:	2036      	movs	r0, #54	; 0x36
 80043ae:	f7ff ff16 	bl	80041de <lcd_cmd>
	tmp[0] = 0x00;
 80043b2:	2300      	movs	r3, #0
 80043b4:	703b      	strb	r3, [r7, #0]
	lcd_cmd(0xB4, tmp, 1, TO_LCD);
 80043b6:	4639      	mov	r1, r7
 80043b8:	2300      	movs	r3, #0
 80043ba:	2201      	movs	r2, #1
 80043bc:	20b4      	movs	r0, #180	; 0xb4
 80043be:	f7ff ff0e 	bl	80041de <lcd_cmd>
	tmp[0] = 0x41;
 80043c2:	2341      	movs	r3, #65	; 0x41
 80043c4:	703b      	strb	r3, [r7, #0]
	lcd_cmd(0xC1, tmp, 1, TO_LCD);
 80043c6:	4639      	mov	r1, r7
 80043c8:	2300      	movs	r3, #0
 80043ca:	2201      	movs	r2, #1
 80043cc:	20c1      	movs	r0, #193	; 0xc1
 80043ce:	f7ff ff06 	bl	80041de <lcd_cmd>
	tmp[0] = 0x00;
 80043d2:	2300      	movs	r3, #0
 80043d4:	703b      	strb	r3, [r7, #0]
	tmp[1] = 0x91;
 80043d6:	2391      	movs	r3, #145	; 0x91
 80043d8:	707b      	strb	r3, [r7, #1]
	tmp[2] = 0x80;
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	70bb      	strb	r3, [r7, #2]
	tmp[3] = 0x00;
 80043de:	2300      	movs	r3, #0
 80043e0:	70fb      	strb	r3, [r7, #3]
	lcd_cmd(0xC5, tmp, 4, TO_LCD);
 80043e2:	4639      	mov	r1, r7
 80043e4:	2300      	movs	r3, #0
 80043e6:	2204      	movs	r2, #4
 80043e8:	20c5      	movs	r0, #197	; 0xc5
 80043ea:	f7ff fef8 	bl	80041de <lcd_cmd>

	tmp[0] = 0x0F;
 80043ee:	230f      	movs	r3, #15
 80043f0:	703b      	strb	r3, [r7, #0]
	tmp[1] = 0x1F;
 80043f2:	231f      	movs	r3, #31
 80043f4:	707b      	strb	r3, [r7, #1]
	tmp[2] = 0x1C;
 80043f6:	231c      	movs	r3, #28
 80043f8:	70bb      	strb	r3, [r7, #2]
	tmp[3] = 0x0C;
 80043fa:	230c      	movs	r3, #12
 80043fc:	70fb      	strb	r3, [r7, #3]
	tmp[4] = 0x0F;
 80043fe:	230f      	movs	r3, #15
 8004400:	713b      	strb	r3, [r7, #4]
	tmp[5] = 0x08;
 8004402:	2308      	movs	r3, #8
 8004404:	717b      	strb	r3, [r7, #5]
	tmp[6] = 0x48;
 8004406:	2348      	movs	r3, #72	; 0x48
 8004408:	71bb      	strb	r3, [r7, #6]
	tmp[7] = 0x98;
 800440a:	2398      	movs	r3, #152	; 0x98
 800440c:	71fb      	strb	r3, [r7, #7]
	tmp[8] = 0x37;
 800440e:	2337      	movs	r3, #55	; 0x37
 8004410:	723b      	strb	r3, [r7, #8]
	tmp[9] = 0x0A;
 8004412:	230a      	movs	r3, #10
 8004414:	727b      	strb	r3, [r7, #9]
	tmp[10] = 0x13;
 8004416:	2313      	movs	r3, #19
 8004418:	72bb      	strb	r3, [r7, #10]
	tmp[11] = 0x04;
 800441a:	2304      	movs	r3, #4
 800441c:	72fb      	strb	r3, [r7, #11]
	tmp[12] = 0x11;
 800441e:	2311      	movs	r3, #17
 8004420:	733b      	strb	r3, [r7, #12]
	tmp[13] = 0x0D;
 8004422:	230d      	movs	r3, #13
 8004424:	737b      	strb	r3, [r7, #13]
	tmp[14] = 0x00;
 8004426:	2300      	movs	r3, #0
 8004428:	73bb      	strb	r3, [r7, #14]
	lcd_cmd(0xE0, tmp, 15, TO_LCD);
 800442a:	4639      	mov	r1, r7
 800442c:	2300      	movs	r3, #0
 800442e:	220f      	movs	r2, #15
 8004430:	20e0      	movs	r0, #224	; 0xe0
 8004432:	f7ff fed4 	bl	80041de <lcd_cmd>

	tmp[0] = 0x0F;
 8004436:	230f      	movs	r3, #15
 8004438:	703b      	strb	r3, [r7, #0]
	tmp[1] = 0x32;
 800443a:	2332      	movs	r3, #50	; 0x32
 800443c:	707b      	strb	r3, [r7, #1]
	tmp[2] = 0x2E;
 800443e:	232e      	movs	r3, #46	; 0x2e
 8004440:	70bb      	strb	r3, [r7, #2]
	tmp[3] = 0x0B;
 8004442:	230b      	movs	r3, #11
 8004444:	70fb      	strb	r3, [r7, #3]
	tmp[4] = 0x0D;
 8004446:	230d      	movs	r3, #13
 8004448:	713b      	strb	r3, [r7, #4]
	tmp[5] = 0x05;
 800444a:	2305      	movs	r3, #5
 800444c:	717b      	strb	r3, [r7, #5]
	tmp[6] = 0x47;
 800444e:	2347      	movs	r3, #71	; 0x47
 8004450:	71bb      	strb	r3, [r7, #6]
	tmp[7] = 0x75;
 8004452:	2375      	movs	r3, #117	; 0x75
 8004454:	71fb      	strb	r3, [r7, #7]
	tmp[8] = 0x37;
 8004456:	2337      	movs	r3, #55	; 0x37
 8004458:	723b      	strb	r3, [r7, #8]
	tmp[9] = 0x06;
 800445a:	2306      	movs	r3, #6
 800445c:	727b      	strb	r3, [r7, #9]
	tmp[10] = 0x10;
 800445e:	2310      	movs	r3, #16
 8004460:	72bb      	strb	r3, [r7, #10]
	tmp[11] = 0x03;
 8004462:	2303      	movs	r3, #3
 8004464:	72fb      	strb	r3, [r7, #11]
	tmp[12] = 0x24;
 8004466:	2324      	movs	r3, #36	; 0x24
 8004468:	733b      	strb	r3, [r7, #12]
	tmp[13] = 0x20;
 800446a:	2320      	movs	r3, #32
 800446c:	737b      	strb	r3, [r7, #13]
	tmp[14] = 0x00;
 800446e:	2300      	movs	r3, #0
 8004470:	73bb      	strb	r3, [r7, #14]
	lcd_cmd(0xE1, tmp, 15, TO_LCD);
 8004472:	4639      	mov	r1, r7
 8004474:	2300      	movs	r3, #0
 8004476:	220f      	movs	r2, #15
 8004478:	20e1      	movs	r0, #225	; 0xe1
 800447a:	f7ff feb0 	bl	80041de <lcd_cmd>

	tmp[0] = 0x55;
 800447e:	2355      	movs	r3, #85	; 0x55
 8004480:	703b      	strb	r3, [r7, #0]
	lcd_cmd(0x3A, tmp, 1, TO_LCD);
 8004482:	4639      	mov	r1, r7
 8004484:	2300      	movs	r3, #0
 8004486:	2201      	movs	r2, #1
 8004488:	203a      	movs	r0, #58	; 0x3a
 800448a:	f7ff fea8 	bl	80041de <lcd_cmd>

	lcd_cmd(0x11, NULL, 0, TO_LCD);
 800448e:	2300      	movs	r3, #0
 8004490:	2200      	movs	r2, #0
 8004492:	2100      	movs	r1, #0
 8004494:	2011      	movs	r0, #17
 8004496:	f7ff fea2 	bl	80041de <lcd_cmd>

	tmp[0] = 0x28;
 800449a:	2328      	movs	r3, #40	; 0x28
 800449c:	703b      	strb	r3, [r7, #0]
	lcd_cmd(0x36, tmp, 1, TO_LCD);
 800449e:	4639      	mov	r1, r7
 80044a0:	2300      	movs	r3, #0
 80044a2:	2201      	movs	r2, #1
 80044a4:	2036      	movs	r0, #54	; 0x36
 80044a6:	f7ff fe9a 	bl	80041de <lcd_cmd>
	HAL_Delay(120);
 80044aa:	2078      	movs	r0, #120	; 0x78
 80044ac:	f7fc fd7a 	bl	8000fa4 <HAL_Delay>
	lcd_cmd(0x29, NULL, 0, TO_LCD);
 80044b0:	2300      	movs	r3, #0
 80044b2:	2200      	movs	r2, #0
 80044b4:	2100      	movs	r1, #0
 80044b6:	2029      	movs	r0, #41	; 0x29
 80044b8:	f7ff fe91 	bl	80041de <lcd_cmd>
	tmp[0] = (1 << 3) | (1 << 4) | (1 << 5);
 80044bc:	2338      	movs	r3, #56	; 0x38
 80044be:	703b      	strb	r3, [r7, #0]
	lcd_cmd(0x36, tmp, 1, TO_LCD);
 80044c0:	4639      	mov	r1, r7
 80044c2:	2300      	movs	r3, #0
 80044c4:	2201      	movs	r2, #1
 80044c6:	2036      	movs	r0, #54	; 0x36
 80044c8:	f7ff fe89 	bl	80041de <lcd_cmd>

}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <lcd_clr_fast>:
void lcd_clr_fast(uint16_t color) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	address_set(0, 0, 480, 320);
 80044de:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80044e2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80044e6:	2100      	movs	r1, #0
 80044e8:	2000      	movs	r0, #0
 80044ea:	f7ff fec0 	bl	800426e <address_set>
	cs_clr();
 80044ee:	f7ff fd2f 	bl	8003f50 <cs_clr>
	lcd_write_command(LCD_MEM_WRITE);
 80044f2:	202c      	movs	r0, #44	; 0x2c
 80044f4:	f7ff fe42 	bl	800417c <lcd_write_command>
	for (i = 0; i < (320 * 480); i++) {
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	e006      	b.n	800450c <lcd_clr_fast+0x38>
		lcd_write_data16_fast(color);
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff fdbb 	bl	800407c <lcd_write_data16_fast>
	for (i = 0; i < (320 * 480); i++) {
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3301      	adds	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 8004512:	d3f4      	bcc.n	80044fe <lcd_clr_fast+0x2a>
	}
	cs_set();
 8004514:	f7ff fd10 	bl	8003f38 <cs_set>
}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <lcd_write_buff_fast_mono>:
		}
	}
	cs_set();
}
void lcd_write_buff_fast_mono(const uint8_t *buff, uint16_t x, uint16_t y,
		uint16_t width, uint16_t height) {
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	4608      	mov	r0, r1
 800452a:	4611      	mov	r1, r2
 800452c:	461a      	mov	r2, r3
 800452e:	4603      	mov	r3, r0
 8004530:	817b      	strh	r3, [r7, #10]
 8004532:	460b      	mov	r3, r1
 8004534:	813b      	strh	r3, [r7, #8]
 8004536:	4613      	mov	r3, r2
 8004538:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	uint32_t j;
	address_set(x, y, x + width - 1, y + height - 1);
 800453a:	897a      	ldrh	r2, [r7, #10]
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	4413      	add	r3, r2
 8004540:	b29b      	uxth	r3, r3
 8004542:	3b01      	subs	r3, #1
 8004544:	b29c      	uxth	r4, r3
 8004546:	893a      	ldrh	r2, [r7, #8]
 8004548:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800454a:	4413      	add	r3, r2
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29b      	uxth	r3, r3
 8004552:	8939      	ldrh	r1, [r7, #8]
 8004554:	8978      	ldrh	r0, [r7, #10]
 8004556:	4622      	mov	r2, r4
 8004558:	f7ff fe89 	bl	800426e <address_set>
	lcd_write_command(LCD_MEM_WRITE);
 800455c:	202c      	movs	r0, #44	; 0x2c
 800455e:	f7ff fe0d 	bl	800417c <lcd_write_command>
	cs_clr();
 8004562:	f7ff fcf5 	bl	8003f50 <cs_clr>
	for (i = 0; i < width * height/8; i++) {
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e020      	b.n	80045ae <lcd_write_buff_fast_mono+0x8e>
		for(j = 8; j > 0; j--){
 800456c:	2308      	movs	r3, #8
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	e017      	b.n	80045a2 <lcd_write_buff_fast_mono+0x82>
			if(buff[i] & (1<<(j-1)))
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	4413      	add	r3, r2
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	3b01      	subs	r3, #1
 8004580:	fa42 f303 	asr.w	r3, r2, r3
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <lcd_write_buff_fast_mono+0x74>
				lcd_write_data16_fast(BLACK);
 800458c:	2000      	movs	r0, #0
 800458e:	f7ff fd75 	bl	800407c <lcd_write_data16_fast>
 8004592:	e003      	b.n	800459c <lcd_write_buff_fast_mono+0x7c>
			else
				lcd_write_data16_fast(WHITE);
 8004594:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004598:	f7ff fd70 	bl	800407c <lcd_write_data16_fast>
		for(j = 8; j > 0; j--){
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	3b01      	subs	r3, #1
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e4      	bne.n	8004572 <lcd_write_buff_fast_mono+0x52>
	for (i = 0; i < width * height/8; i++) {
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	3301      	adds	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	da00      	bge.n	80045bc <lcd_write_buff_fast_mono+0x9c>
 80045ba:	3307      	adds	r3, #7
 80045bc:	10db      	asrs	r3, r3, #3
 80045be:	461a      	mov	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d8d2      	bhi.n	800456c <lcd_write_buff_fast_mono+0x4c>
		}

	}
	address_set(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 80045c6:	f240 13df 	movw	r3, #479	; 0x1df
 80045ca:	f240 123f 	movw	r2, #319	; 0x13f
 80045ce:	2100      	movs	r1, #0
 80045d0:	2000      	movs	r0, #0
 80045d2:	f7ff fe4c 	bl	800426e <address_set>
	cs_set();
 80045d6:	f7ff fcaf 	bl	8003f38 <cs_set>
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd90      	pop	{r4, r7, pc}
	...

080045e4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80045e8:	4b17      	ldr	r3, [pc, #92]	; (8004648 <MX_SPI1_Init+0x64>)
 80045ea:	4a18      	ldr	r2, [pc, #96]	; (800464c <MX_SPI1_Init+0x68>)
 80045ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <MX_SPI1_Init+0x64>)
 80045f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <MX_SPI1_Init+0x64>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80045fc:	4b12      	ldr	r3, [pc, #72]	; (8004648 <MX_SPI1_Init+0x64>)
 80045fe:	2200      	movs	r2, #0
 8004600:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004602:	4b11      	ldr	r3, [pc, #68]	; (8004648 <MX_SPI1_Init+0x64>)
 8004604:	2200      	movs	r2, #0
 8004606:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <MX_SPI1_Init+0x64>)
 800460a:	2200      	movs	r2, #0
 800460c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800460e:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <MX_SPI1_Init+0x64>)
 8004610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004614:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <MX_SPI1_Init+0x64>)
 8004618:	2208      	movs	r2, #8
 800461a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800461c:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <MX_SPI1_Init+0x64>)
 800461e:	2200      	movs	r2, #0
 8004620:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004622:	4b09      	ldr	r3, [pc, #36]	; (8004648 <MX_SPI1_Init+0x64>)
 8004624:	2200      	movs	r2, #0
 8004626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004628:	4b07      	ldr	r3, [pc, #28]	; (8004648 <MX_SPI1_Init+0x64>)
 800462a:	2200      	movs	r2, #0
 800462c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <MX_SPI1_Init+0x64>)
 8004630:	220a      	movs	r2, #10
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004634:	4804      	ldr	r0, [pc, #16]	; (8004648 <MX_SPI1_Init+0x64>)
 8004636:	f7fe fc69 	bl	8002f0c <HAL_SPI_Init>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004640:	f7fc fc21 	bl	8000e86 <Error_Handler>
  }

}
 8004644:	bf00      	nop
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000110 	.word	0x20000110
 800464c:	40013000 	.word	0x40013000

08004650 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8004654:	4b17      	ldr	r3, [pc, #92]	; (80046b4 <MX_SPI2_Init+0x64>)
 8004656:	4a18      	ldr	r2, [pc, #96]	; (80046b8 <MX_SPI2_Init+0x68>)
 8004658:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800465a:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <MX_SPI2_Init+0x64>)
 800465c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004660:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004662:	4b14      	ldr	r3, [pc, #80]	; (80046b4 <MX_SPI2_Init+0x64>)
 8004664:	2200      	movs	r2, #0
 8004666:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004668:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <MX_SPI2_Init+0x64>)
 800466a:	2200      	movs	r2, #0
 800466c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800466e:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <MX_SPI2_Init+0x64>)
 8004670:	2200      	movs	r2, #0
 8004672:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <MX_SPI2_Init+0x64>)
 8004676:	2200      	movs	r2, #0
 8004678:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800467a:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <MX_SPI2_Init+0x64>)
 800467c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004680:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004682:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <MX_SPI2_Init+0x64>)
 8004684:	2218      	movs	r2, #24
 8004686:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <MX_SPI2_Init+0x64>)
 800468a:	2200      	movs	r2, #0
 800468c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800468e:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <MX_SPI2_Init+0x64>)
 8004690:	2200      	movs	r2, #0
 8004692:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004694:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <MX_SPI2_Init+0x64>)
 8004696:	2200      	movs	r2, #0
 8004698:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800469a:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <MX_SPI2_Init+0x64>)
 800469c:	220a      	movs	r2, #10
 800469e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80046a0:	4804      	ldr	r0, [pc, #16]	; (80046b4 <MX_SPI2_Init+0x64>)
 80046a2:	f7fe fc33 	bl	8002f0c <HAL_SPI_Init>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80046ac:	f7fc fbeb 	bl	8000e86 <Error_Handler>
  }

}
 80046b0:	bf00      	nop
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	200000b8 	.word	0x200000b8
 80046b8:	40003800 	.word	0x40003800

080046bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08a      	sub	sp, #40	; 0x28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c4:	f107 0318 	add.w	r3, r7, #24
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	605a      	str	r2, [r3, #4]
 80046ce:	609a      	str	r2, [r3, #8]
 80046d0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a4e      	ldr	r2, [pc, #312]	; (8004810 <HAL_SPI_MspInit+0x154>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d15e      	bne.n	800479a <HAL_SPI_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046dc:	4a4d      	ldr	r2, [pc, #308]	; (8004814 <HAL_SPI_MspInit+0x158>)
 80046de:	4b4d      	ldr	r3, [pc, #308]	; (8004814 <HAL_SPI_MspInit+0x158>)
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046e6:	6193      	str	r3, [r2, #24]
 80046e8:	4b4a      	ldr	r3, [pc, #296]	; (8004814 <HAL_SPI_MspInit+0x158>)
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f4:	4a47      	ldr	r2, [pc, #284]	; (8004814 <HAL_SPI_MspInit+0x158>)
 80046f6:	4b47      	ldr	r3, [pc, #284]	; (8004814 <HAL_SPI_MspInit+0x158>)
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f043 0304 	orr.w	r3, r3, #4
 80046fe:	6193      	str	r3, [r2, #24]
 8004700:	4b44      	ldr	r3, [pc, #272]	; (8004814 <HAL_SPI_MspInit+0x158>)
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LED_CLK_Pin|LED_MOSI_Pin;
 800470c:	23a0      	movs	r3, #160	; 0xa0
 800470e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004710:	2302      	movs	r3, #2
 8004712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004714:	2303      	movs	r3, #3
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004718:	f107 0318 	add.w	r3, r7, #24
 800471c:	4619      	mov	r1, r3
 800471e:	483e      	ldr	r0, [pc, #248]	; (8004818 <HAL_SPI_MspInit+0x15c>)
 8004720:	f7fd f8da 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_MISO_Pin;
 8004724:	2340      	movs	r3, #64	; 0x40
 8004726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004728:	2300      	movs	r3, #0
 800472a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472c:	2300      	movs	r3, #0
 800472e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_MISO_GPIO_Port, &GPIO_InitStruct);
 8004730:	f107 0318 	add.w	r3, r7, #24
 8004734:	4619      	mov	r1, r3
 8004736:	4838      	ldr	r0, [pc, #224]	; (8004818 <HAL_SPI_MspInit+0x15c>)
 8004738:	f7fd f8ce 	bl	80018d8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800473c:	4b37      	ldr	r3, [pc, #220]	; (800481c <HAL_SPI_MspInit+0x160>)
 800473e:	4a38      	ldr	r2, [pc, #224]	; (8004820 <HAL_SPI_MspInit+0x164>)
 8004740:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004742:	4b36      	ldr	r3, [pc, #216]	; (800481c <HAL_SPI_MspInit+0x160>)
 8004744:	2210      	movs	r2, #16
 8004746:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004748:	4b34      	ldr	r3, [pc, #208]	; (800481c <HAL_SPI_MspInit+0x160>)
 800474a:	2200      	movs	r2, #0
 800474c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800474e:	4b33      	ldr	r3, [pc, #204]	; (800481c <HAL_SPI_MspInit+0x160>)
 8004750:	2280      	movs	r2, #128	; 0x80
 8004752:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004754:	4b31      	ldr	r3, [pc, #196]	; (800481c <HAL_SPI_MspInit+0x160>)
 8004756:	2200      	movs	r2, #0
 8004758:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800475a:	4b30      	ldr	r3, [pc, #192]	; (800481c <HAL_SPI_MspInit+0x160>)
 800475c:	2200      	movs	r2, #0
 800475e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004760:	4b2e      	ldr	r3, [pc, #184]	; (800481c <HAL_SPI_MspInit+0x160>)
 8004762:	2200      	movs	r2, #0
 8004764:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004766:	4b2d      	ldr	r3, [pc, #180]	; (800481c <HAL_SPI_MspInit+0x160>)
 8004768:	2200      	movs	r2, #0
 800476a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800476c:	482b      	ldr	r0, [pc, #172]	; (800481c <HAL_SPI_MspInit+0x160>)
 800476e:	f7fc fe3d 	bl	80013ec <HAL_DMA_Init>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8004778:	f7fc fb85 	bl	8000e86 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a27      	ldr	r2, [pc, #156]	; (800481c <HAL_SPI_MspInit+0x160>)
 8004780:	649a      	str	r2, [r3, #72]	; 0x48
 8004782:	4a26      	ldr	r2, [pc, #152]	; (800481c <HAL_SPI_MspInit+0x160>)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004788:	2200      	movs	r2, #0
 800478a:	2100      	movs	r1, #0
 800478c:	2023      	movs	r0, #35	; 0x23
 800478e:	f7fc fdf6 	bl	800137e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004792:	2023      	movs	r0, #35	; 0x23
 8004794:	f7fc fe0f 	bl	80013b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004798:	e036      	b.n	8004808 <HAL_SPI_MspInit+0x14c>
  else if(spiHandle->Instance==SPI2)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a21      	ldr	r2, [pc, #132]	; (8004824 <HAL_SPI_MspInit+0x168>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d131      	bne.n	8004808 <HAL_SPI_MspInit+0x14c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80047a4:	4a1b      	ldr	r2, [pc, #108]	; (8004814 <HAL_SPI_MspInit+0x158>)
 80047a6:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <HAL_SPI_MspInit+0x158>)
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ae:	61d3      	str	r3, [r2, #28]
 80047b0:	4b18      	ldr	r3, [pc, #96]	; (8004814 <HAL_SPI_MspInit+0x158>)
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047bc:	4a15      	ldr	r2, [pc, #84]	; (8004814 <HAL_SPI_MspInit+0x158>)
 80047be:	4b15      	ldr	r3, [pc, #84]	; (8004814 <HAL_SPI_MspInit+0x158>)
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	f043 0308 	orr.w	r3, r3, #8
 80047c6:	6193      	str	r3, [r2, #24]
 80047c8:	4b12      	ldr	r3, [pc, #72]	; (8004814 <HAL_SPI_MspInit+0x158>)
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SD_CLK_Pin|SD_MOSI_Pin;
 80047d4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80047d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047da:	2302      	movs	r3, #2
 80047dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047de:	2303      	movs	r3, #3
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047e2:	f107 0318 	add.w	r3, r7, #24
 80047e6:	4619      	mov	r1, r3
 80047e8:	480f      	ldr	r0, [pc, #60]	; (8004828 <HAL_SPI_MspInit+0x16c>)
 80047ea:	f7fd f875 	bl	80018d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD_MISO_Pin;
 80047ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047f8:	2301      	movs	r3, #1
 80047fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 80047fc:	f107 0318 	add.w	r3, r7, #24
 8004800:	4619      	mov	r1, r3
 8004802:	4809      	ldr	r0, [pc, #36]	; (8004828 <HAL_SPI_MspInit+0x16c>)
 8004804:	f7fd f868 	bl	80018d8 <HAL_GPIO_Init>
}
 8004808:	bf00      	nop
 800480a:	3728      	adds	r7, #40	; 0x28
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40013000 	.word	0x40013000
 8004814:	40021000 	.word	0x40021000
 8004818:	40010800 	.word	0x40010800
 800481c:	20000168 	.word	0x20000168
 8004820:	40020030 	.word	0x40020030
 8004824:	40003800 	.word	0x40003800
 8004828:	40010c00 	.word	0x40010c00

0800482c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004832:	4a19      	ldr	r2, [pc, #100]	; (8004898 <HAL_MspInit+0x6c>)
 8004834:	4b18      	ldr	r3, [pc, #96]	; (8004898 <HAL_MspInit+0x6c>)
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	6193      	str	r3, [r2, #24]
 800483e:	4b16      	ldr	r3, [pc, #88]	; (8004898 <HAL_MspInit+0x6c>)
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800484a:	4a13      	ldr	r2, [pc, #76]	; (8004898 <HAL_MspInit+0x6c>)
 800484c:	4b12      	ldr	r3, [pc, #72]	; (8004898 <HAL_MspInit+0x6c>)
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004854:	61d3      	str	r3, [r2, #28]
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <HAL_MspInit+0x6c>)
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485e:	607b      	str	r3, [r7, #4]
 8004860:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8004862:	2200      	movs	r2, #0
 8004864:	2100      	movs	r1, #0
 8004866:	2001      	movs	r0, #1
 8004868:	f7fc fd89 	bl	800137e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800486c:	2001      	movs	r0, #1
 800486e:	f7fc fda2 	bl	80013b6 <HAL_NVIC_EnableIRQ>

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004872:	4b0a      	ldr	r3, [pc, #40]	; (800489c <HAL_MspInit+0x70>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	4a04      	ldr	r2, [pc, #16]	; (800489c <HAL_MspInit+0x70>)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40021000 	.word	0x40021000
 800489c:	40010000 	.word	0x40010000

080048a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80048a4:	bf00      	nop
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr

080048ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048b0:	e7fe      	b.n	80048b0 <HardFault_Handler+0x4>

080048b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048b2:	b480      	push	{r7}
 80048b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048b6:	e7fe      	b.n	80048b6 <MemManage_Handler+0x4>

080048b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048bc:	e7fe      	b.n	80048bc <BusFault_Handler+0x4>

080048be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048be:	b480      	push	{r7}
 80048c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048c2:	e7fe      	b.n	80048c2 <UsageFault_Handler+0x4>

080048c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048c8:	bf00      	nop
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr

080048d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr

080048e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048ec:	f7fc fb3e 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048f0:	bf00      	nop
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80048f8:	f7fd f97c 	bl	8001bf4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80048fc:	bf00      	nop
 80048fe:	bd80      	pop	{r7, pc}

08004900 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004904:	4802      	ldr	r0, [pc, #8]	; (8004910 <DMA1_Channel2_IRQHandler+0x10>)
 8004906:	f7fc fea7 	bl	8001658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800490a:	bf00      	nop
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	2000022c 	.word	0x2000022c

08004914 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004918:	4802      	ldr	r0, [pc, #8]	; (8004924 <DMA1_Channel3_IRQHandler+0x10>)
 800491a:	f7fc fe9d 	bl	8001658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800491e:	bf00      	nop
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000168 	.word	0x20000168

08004928 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800492c:	4802      	ldr	r0, [pc, #8]	; (8004938 <TIM2_IRQHandler+0x10>)
 800492e:	f7fe fb51 	bl	8002fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004932:	bf00      	nop
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	200001ac 	.word	0x200001ac

0800493c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004940:	4802      	ldr	r0, [pc, #8]	; (800494c <SPI1_IRQHandler+0x10>)
 8004942:	f7fe f979 	bl	8002c38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004946:	bf00      	nop
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000110 	.word	0x20000110

08004950 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004954:	4802      	ldr	r0, [pc, #8]	; (8004960 <USART3_IRQHandler+0x10>)
 8004956:	f7fe fd3d 	bl	80033d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	200001ec 	.word	0x200001ec

08004964 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004968:	4a15      	ldr	r2, [pc, #84]	; (80049c0 <SystemInit+0x5c>)
 800496a:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <SystemInit+0x5c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004974:	4912      	ldr	r1, [pc, #72]	; (80049c0 <SystemInit+0x5c>)
 8004976:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <SystemInit+0x5c>)
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <SystemInit+0x60>)
 800497c:	4013      	ands	r3, r2
 800497e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004980:	4a0f      	ldr	r2, [pc, #60]	; (80049c0 <SystemInit+0x5c>)
 8004982:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <SystemInit+0x5c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800498a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800498e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004990:	4a0b      	ldr	r2, [pc, #44]	; (80049c0 <SystemInit+0x5c>)
 8004992:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <SystemInit+0x5c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800499a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800499c:	4a08      	ldr	r2, [pc, #32]	; (80049c0 <SystemInit+0x5c>)
 800499e:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <SystemInit+0x5c>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80049a6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <SystemInit+0x5c>)
 80049aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80049ae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <SystemInit+0x64>)
 80049b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049b6:	609a      	str	r2, [r3, #8]
#endif 
}
 80049b8:	bf00      	nop
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	40021000 	.word	0x40021000
 80049c4:	f8ff0000 	.word	0xf8ff0000
 80049c8:	e000ed00 	.word	0xe000ed00

080049cc <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80049d0:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <MX_USART3_UART_Init+0x4c>)
 80049d2:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <MX_USART3_UART_Init+0x50>)
 80049d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80049d6:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <MX_USART3_UART_Init+0x4c>)
 80049d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80049de:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <MX_USART3_UART_Init+0x4c>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <MX_USART3_UART_Init+0x4c>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80049ea:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <MX_USART3_UART_Init+0x4c>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 80049f0:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <MX_USART3_UART_Init+0x4c>)
 80049f2:	2208      	movs	r2, #8
 80049f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049f6:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <MX_USART3_UART_Init+0x4c>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <MX_USART3_UART_Init+0x4c>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a02:	4805      	ldr	r0, [pc, #20]	; (8004a18 <MX_USART3_UART_Init+0x4c>)
 8004a04:	f7fe fc2d 	bl	8003262 <HAL_UART_Init>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004a0e:	f7fc fa3a 	bl	8000e86 <Error_Handler>
  }

}
 8004a12:	bf00      	nop
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	200001ec 	.word	0x200001ec
 8004a1c:	40004800 	.word	0x40004800

08004a20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a28:	f107 0310 	add.w	r3, r7, #16
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	605a      	str	r2, [r3, #4]
 8004a32:	609a      	str	r2, [r3, #8]
 8004a34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a33      	ldr	r2, [pc, #204]	; (8004b08 <HAL_UART_MspInit+0xe8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d15f      	bne.n	8004b00 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004a40:	4a32      	ldr	r2, [pc, #200]	; (8004b0c <HAL_UART_MspInit+0xec>)
 8004a42:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <HAL_UART_MspInit+0xec>)
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a4a:	61d3      	str	r3, [r2, #28]
 8004a4c:	4b2f      	ldr	r3, [pc, #188]	; (8004b0c <HAL_UART_MspInit+0xec>)
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a58:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <HAL_UART_MspInit+0xec>)
 8004a5a:	4b2c      	ldr	r3, [pc, #176]	; (8004b0c <HAL_UART_MspInit+0xec>)
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f043 0308 	orr.w	r3, r3, #8
 8004a62:	6193      	str	r3, [r2, #24]
 8004a64:	4b29      	ldr	r3, [pc, #164]	; (8004b0c <HAL_UART_MspInit+0xec>)
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = LOG_UART_TX_Pin;
 8004a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a76:	2302      	movs	r3, #2
 8004a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LOG_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8004a7e:	f107 0310 	add.w	r3, r7, #16
 8004a82:	4619      	mov	r1, r3
 8004a84:	4822      	ldr	r0, [pc, #136]	; (8004b10 <HAL_UART_MspInit+0xf0>)
 8004a86:	f7fc ff27 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UNUSED_Pin;
 8004a8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(UNUSED_GPIO_Port, &GPIO_InitStruct);
 8004a98:	f107 0310 	add.w	r3, r7, #16
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	481c      	ldr	r0, [pc, #112]	; (8004b10 <HAL_UART_MspInit+0xf0>)
 8004aa0:	f7fc ff1a 	bl	80018d8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <HAL_UART_MspInit+0xf4>)
 8004aa6:	4a1c      	ldr	r2, [pc, #112]	; (8004b18 <HAL_UART_MspInit+0xf8>)
 8004aa8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004aaa:	4b1a      	ldr	r3, [pc, #104]	; (8004b14 <HAL_UART_MspInit+0xf4>)
 8004aac:	2210      	movs	r2, #16
 8004aae:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ab0:	4b18      	ldr	r3, [pc, #96]	; (8004b14 <HAL_UART_MspInit+0xf4>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ab6:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <HAL_UART_MspInit+0xf4>)
 8004ab8:	2280      	movs	r2, #128	; 0x80
 8004aba:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004abc:	4b15      	ldr	r3, [pc, #84]	; (8004b14 <HAL_UART_MspInit+0xf4>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ac2:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <HAL_UART_MspInit+0xf4>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004ac8:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <HAL_UART_MspInit+0xf4>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ace:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <HAL_UART_MspInit+0xf4>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004ad4:	480f      	ldr	r0, [pc, #60]	; (8004b14 <HAL_UART_MspInit+0xf4>)
 8004ad6:	f7fc fc89 	bl	80013ec <HAL_DMA_Init>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8004ae0:	f7fc f9d1 	bl	8000e86 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a0b      	ldr	r2, [pc, #44]	; (8004b14 <HAL_UART_MspInit+0xf4>)
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
 8004aea:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <HAL_UART_MspInit+0xf4>)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004af0:	2200      	movs	r2, #0
 8004af2:	2100      	movs	r1, #0
 8004af4:	2027      	movs	r0, #39	; 0x27
 8004af6:	f7fc fc42 	bl	800137e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004afa:	2027      	movs	r0, #39	; 0x27
 8004afc:	f7fc fc5b 	bl	80013b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004b00:	bf00      	nop
 8004b02:	3720      	adds	r7, #32
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40004800 	.word	0x40004800
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40010c00 	.word	0x40010c00
 8004b14:	2000022c 	.word	0x2000022c
 8004b18:	4002001c 	.word	0x4002001c

08004b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004b1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004b1e:	e003      	b.n	8004b28 <LoopCopyDataInit>

08004b20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004b22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004b24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004b26:	3104      	adds	r1, #4

08004b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004b28:	480a      	ldr	r0, [pc, #40]	; (8004b54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004b2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004b2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004b30:	d3f6      	bcc.n	8004b20 <CopyDataInit>
  ldr r2, =_sbss
 8004b32:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004b34:	e002      	b.n	8004b3c <LoopFillZerobss>

08004b36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004b36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004b38:	f842 3b04 	str.w	r3, [r2], #4

08004b3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004b3c:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004b3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004b40:	d3f9      	bcc.n	8004b36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b42:	f7ff ff0f 	bl	8004964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b46:	f000 f80f 	bl	8004b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b4a:	f7fc f8b7 	bl	8000cbc <main>
  bx lr
 8004b4e:	4770      	bx	lr
  ldr r3, =_sidata
 8004b50:	08009744 	.word	0x08009744
  ldr r0, =_sdata
 8004b54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004b58:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 8004b5c:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 8004b60:	20000270 	.word	0x20000270

08004b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b64:	e7fe      	b.n	8004b64 <ADC1_2_IRQHandler>
	...

08004b68 <__libc_init_array>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	2500      	movs	r5, #0
 8004b6c:	4e0c      	ldr	r6, [pc, #48]	; (8004ba0 <__libc_init_array+0x38>)
 8004b6e:	4c0d      	ldr	r4, [pc, #52]	; (8004ba4 <__libc_init_array+0x3c>)
 8004b70:	1ba4      	subs	r4, r4, r6
 8004b72:	10a4      	asrs	r4, r4, #2
 8004b74:	42a5      	cmp	r5, r4
 8004b76:	d109      	bne.n	8004b8c <__libc_init_array+0x24>
 8004b78:	f000 f822 	bl	8004bc0 <_init>
 8004b7c:	2500      	movs	r5, #0
 8004b7e:	4e0a      	ldr	r6, [pc, #40]	; (8004ba8 <__libc_init_array+0x40>)
 8004b80:	4c0a      	ldr	r4, [pc, #40]	; (8004bac <__libc_init_array+0x44>)
 8004b82:	1ba4      	subs	r4, r4, r6
 8004b84:	10a4      	asrs	r4, r4, #2
 8004b86:	42a5      	cmp	r5, r4
 8004b88:	d105      	bne.n	8004b96 <__libc_init_array+0x2e>
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
 8004b8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b90:	4798      	blx	r3
 8004b92:	3501      	adds	r5, #1
 8004b94:	e7ee      	b.n	8004b74 <__libc_init_array+0xc>
 8004b96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b9a:	4798      	blx	r3
 8004b9c:	3501      	adds	r5, #1
 8004b9e:	e7f2      	b.n	8004b86 <__libc_init_array+0x1e>
 8004ba0:	08009738 	.word	0x08009738
 8004ba4:	08009738 	.word	0x08009738
 8004ba8:	08009738 	.word	0x08009738
 8004bac:	08009740 	.word	0x08009740

08004bb0 <memset>:
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4402      	add	r2, r0
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d100      	bne.n	8004bba <memset+0xa>
 8004bb8:	4770      	bx	lr
 8004bba:	f803 1b01 	strb.w	r1, [r3], #1
 8004bbe:	e7f9      	b.n	8004bb4 <memset+0x4>

08004bc0 <_init>:
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc2:	bf00      	nop
 8004bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc6:	bc08      	pop	{r3}
 8004bc8:	469e      	mov	lr, r3
 8004bca:	4770      	bx	lr

08004bcc <_fini>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	bf00      	nop
 8004bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd2:	bc08      	pop	{r3}
 8004bd4:	469e      	mov	lr, r3
 8004bd6:	4770      	bx	lr
