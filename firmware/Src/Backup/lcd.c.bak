/*
 * lcd.c
 *
 *  Created on: Nov 13, 2018
 *      Author: tarek
 */
#include "lcd.h"
#include "main.h"
#include "stm32f1xx_hal.h"

static const uint8_t asc2_1206[95][12] = { { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },/*" ",0*/
{ 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00 },/*"!",1*/
{ 0x00, 0x14, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },/*""",2*/
{ 0x00, 0x00, 0x14, 0x14, 0x3F, 0x14, 0x0A, 0x3F, 0x0A, 0x0A, 0x00, 0x00 },/*"#",3*/
{ 0x00, 0x04, 0x1E, 0x15, 0x05, 0x06, 0x0C, 0x14, 0x15, 0x0F, 0x04, 0x00 },/*"$",4*/
{ 0x00, 0x00, 0x12, 0x15, 0x0D, 0x0A, 0x14, 0x2C, 0x2A, 0x12, 0x00, 0x00 },/*"%",5*/
{ 0x00, 0x00, 0x04, 0x0A, 0x0A, 0x1E, 0x15, 0x15, 0x09, 0x36, 0x00, 0x00 },/*"&",6*/
{ 0x00, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },/*"'",7*/
{ 0x00, 0x20, 0x10, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x20, 0x00 },/*"(",8*/
{ 0x00, 0x02, 0x04, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x04, 0x02, 0x00 },/*")",9*/
{ 0x00, 0x00, 0x00, 0x04, 0x15, 0x0E, 0x0E, 0x15, 0x04, 0x00, 0x00, 0x00 },/*"*",10*/
{ 0x00, 0x00, 0x04, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00 },/*"+",11*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x01 },/*",",12*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },/*"-",13*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00 },/*".",14*/
{ 0x00, 0x10, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x02, 0x01, 0x00 },/*"/",15*/
{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 },/*"0",16*/
{ 0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00 },/*"1",17*/
{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x08, 0x04, 0x02, 0x01, 0x1F, 0x00, 0x00 },/*"2",18*/
{ 0x00, 0x00, 0x0E, 0x11, 0x10, 0x0C, 0x10, 0x10, 0x11, 0x0E, 0x00, 0x00 },/*"3",19*/
{ 0x00, 0x00, 0x08, 0x0C, 0x0A, 0x0A, 0x09, 0x1E, 0x08, 0x18, 0x00, 0x00 },/*"4",20*/
{ 0x00, 0x00, 0x1F, 0x01, 0x01, 0x0F, 0x10, 0x10, 0x11, 0x0E, 0x00, 0x00 },/*"5",21*/
{ 0x00, 0x00, 0x0E, 0x09, 0x01, 0x0F, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 },/*"6",22*/
{ 0x00, 0x00, 0x1F, 0x09, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 },/*"7",23*/
{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 },/*"8",24*/
{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x1E, 0x10, 0x12, 0x0E, 0x00, 0x00 },/*"9",25*/
{ 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00 },/*":",26*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00 },/*";",27*/
{ 0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00 },/*"<",28*/
{ 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00 },/*"=",29*/
{ 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00 },/*">",30*/
{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x08, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00 },/*"?",31*/
{ 0x00, 0x00, 0x0E, 0x11, 0x19, 0x15, 0x15, 0x1D, 0x01, 0x1E, 0x00, 0x00 },/*"@",32*/
{ 0x00, 0x00, 0x04, 0x04, 0x0C, 0x0A, 0x0A, 0x1E, 0x12, 0x33, 0x00, 0x00 },/*"A",33*/
{ 0x00, 0x00, 0x0F, 0x12, 0x12, 0x0E, 0x12, 0x12, 0x12, 0x0F, 0x00, 0x00 },/*"B",34*/
{ 0x00, 0x00, 0x1E, 0x11, 0x01, 0x01, 0x01, 0x01, 0x11, 0x0E, 0x00, 0x00 },/*"C",35*/
{ 0x00, 0x00, 0x0F, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x0F, 0x00, 0x00 },/*"D",36*/
{ 0x00, 0x00, 0x1F, 0x12, 0x0A, 0x0E, 0x0A, 0x02, 0x12, 0x1F, 0x00, 0x00 },/*"E",37*/
{ 0x00, 0x00, 0x1F, 0x12, 0x0A, 0x0E, 0x0A, 0x02, 0x02, 0x07, 0x00, 0x00 },/*"F",38*/
{ 0x00, 0x00, 0x1C, 0x12, 0x01, 0x01, 0x39, 0x11, 0x12, 0x0C, 0x00, 0x00 },/*"G",39*/
{ 0x00, 0x00, 0x33, 0x12, 0x12, 0x1E, 0x12, 0x12, 0x12, 0x33, 0x00, 0x00 },/*"H",40*/
{ 0x00, 0x00, 0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1F, 0x00, 0x00 },/*"I",41*/
{ 0x00, 0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x07, 0x00 },/*"J",42*/
{ 0x00, 0x00, 0x37, 0x12, 0x0A, 0x06, 0x0A, 0x0A, 0x12, 0x37, 0x00, 0x00 },/*"K",43*/
{ 0x00, 0x00, 0x07, 0x02, 0x02, 0x02, 0x02, 0x02, 0x22, 0x3F, 0x00, 0x00 },/*"L",44*/
{ 0x00, 0x00, 0x1B, 0x1B, 0x1B, 0x1B, 0x15, 0x15, 0x15, 0x15, 0x00, 0x00 },/*"M",45*/
{ 0x00, 0x00, 0x3B, 0x12, 0x16, 0x16, 0x1A, 0x1A, 0x12, 0x17, 0x00, 0x00 },/*"N",46*/
{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00 },/*"O",47*/
{ 0x00, 0x00, 0x0F, 0x12, 0x12, 0x0E, 0x02, 0x02, 0x02, 0x07, 0x00, 0x00 },/*"P",48*/
{ 0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x17, 0x19, 0x0E, 0x18, 0x00 },/*"Q",49*/
{ 0x00, 0x00, 0x0F, 0x12, 0x12, 0x0E, 0x0A, 0x12, 0x12, 0x37, 0x00, 0x00 },/*"R",50*/
{ 0x00, 0x00, 0x1E, 0x11, 0x01, 0x06, 0x08, 0x10, 0x11, 0x0F, 0x00, 0x00 },/*"S",51*/
{ 0x00, 0x00, 0x1F, 0x15, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00 },/*"T",52*/
{ 0x00, 0x00, 0x33, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x0C, 0x00, 0x00 },/*"U",53*/
{ 0x00, 0x00, 0x33, 0x12, 0x12, 0x0A, 0x0A, 0x0C, 0x04, 0x04, 0x00, 0x00 },/*"V",54*/
{ 0x00, 0x00, 0x15, 0x15, 0x15, 0x0E, 0x0A, 0x0A, 0x0A, 0x0A, 0x00, 0x00 },/*"W",55*/
{ 0x00, 0x00, 0x1B, 0x0A, 0x0A, 0x04, 0x04, 0x0A, 0x0A, 0x1B, 0x00, 0x00 },/*"X",56*/
{ 0x00, 0x00, 0x1B, 0x0A, 0x0A, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00 },/*"Y",57*/
{ 0x00, 0x00, 0x1F, 0x09, 0x08, 0x04, 0x04, 0x02, 0x12, 0x1F, 0x00, 0x00 },/*"Z",58*/
{ 0x00, 0x1C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1C, 0x00 },/*"[",59*/
{ 0x00, 0x02, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x08, 0x10, 0x00, 0x00 },/*"\",60*/
{ 0x00, 0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E, 0x00 },/*"]",61*/
{ 0x00, 0x04, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },/*"^",62*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F },/*"_",63*/
{ 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },/*"`",64*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x12, 0x1C, 0x12, 0x3C, 0x00, 0x00 },/*"a",65*/
{ 0x00, 0x00, 0x03, 0x02, 0x02, 0x0E, 0x12, 0x12, 0x12, 0x0E, 0x00, 0x00 },/*"b",66*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x12, 0x02, 0x02, 0x1C, 0x00, 0x00 },/*"c",67*/
{ 0x00, 0x00, 0x18, 0x10, 0x10, 0x1C, 0x12, 0x12, 0x12, 0x3C, 0x00, 0x00 },/*"d",68*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x12, 0x1E, 0x02, 0x1C, 0x00, 0x00 },/*"e",69*/
{ 0x00, 0x00, 0x38, 0x04, 0x04, 0x1E, 0x04, 0x04, 0x04, 0x1E, 0x00, 0x00 },/*"f",70*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x12, 0x0C, 0x02, 0x1E, 0x22, 0x1C },/*"g",71*/
{ 0x00, 0x00, 0x03, 0x02, 0x02, 0x0E, 0x12, 0x12, 0x12, 0x37, 0x00, 0x00 },/*"h",72*/
{ 0x00, 0x00, 0x04, 0x00, 0x00, 0x06, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00 },/*"i",73*/
{ 0x00, 0x00, 0x08, 0x00, 0x00, 0x0C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07 },/*"j",74*/
{ 0x00, 0x00, 0x03, 0x02, 0x02, 0x3A, 0x0A, 0x0E, 0x12, 0x37, 0x00, 0x00 },/*"k",75*/
{ 0x00, 0x00, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1F, 0x00, 0x00 },/*"l",76*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x15, 0x15, 0x15, 0x15, 0x00, 0x00 },/*"m",77*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x12, 0x12, 0x12, 0x37, 0x00, 0x00 },/*"n",78*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x12, 0x12, 0x12, 0x0C, 0x00, 0x00 },/*"o",79*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x12, 0x12, 0x12, 0x0E, 0x02, 0x07 },/*"p",80*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x12, 0x12, 0x12, 0x1C, 0x10, 0x38 },/*"q",81*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x06, 0x02, 0x02, 0x07, 0x00, 0x00 },/*"r",82*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x02, 0x0C, 0x10, 0x1E, 0x00, 0x00 },/*"s",83*/
{ 0x00, 0x00, 0x00, 0x04, 0x04, 0x0E, 0x04, 0x04, 0x04, 0x18, 0x00, 0x00 },/*"t",84*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x12, 0x12, 0x12, 0x3C, 0x00, 0x00 },/*"u",85*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x12, 0x0A, 0x0C, 0x04, 0x00, 0x00 },/*"v",86*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x15, 0x0E, 0x0A, 0x0A, 0x00, 0x00 },/*"w",87*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x0A, 0x04, 0x0A, 0x1B, 0x00, 0x00 },/*"x",88*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x12, 0x0A, 0x0C, 0x04, 0x04, 0x03 },/*"y",89*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x08, 0x04, 0x04, 0x1E, 0x00, 0x00 },/*"z",90*/
{ 0x00, 0x18, 0x08, 0x08, 0x08, 0x04, 0x08, 0x08, 0x08, 0x08, 0x18, 0x00 },/*"{",91*/
{ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 },/*"|",92*/
{ 0x00, 0x06, 0x04, 0x04, 0x04, 0x08, 0x04, 0x04, 0x04, 0x04, 0x06, 0x00 },/*"}",93*/
{ 0x02, 0x25, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } /*"~",94*/
};

static const uint8_t asc2_1608[95][16] = { { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },/*" ",0*/
{ 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x18,
		0x18, 0x00, 0x00 },/*"!",1*/
{ 0x00, 0x48, 0x6C, 0x24, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 },/*""",2*/
{ 0x00, 0x00, 0x00, 0x24, 0x24, 0x24, 0x7F, 0x12, 0x12, 0x12, 0x7F, 0x12, 0x12,
		0x12, 0x00, 0x00 },/*"#",3*/
{ 0x00, 0x00, 0x08, 0x1C, 0x2A, 0x2A, 0x0A, 0x0C, 0x18, 0x28, 0x28, 0x2A, 0x2A,
		0x1C, 0x08, 0x08 },/*"$",4*/
{ 0x00, 0x00, 0x00, 0x22, 0x25, 0x15, 0x15, 0x15, 0x2A, 0x58, 0x54, 0x54, 0x54,
		0x22, 0x00, 0x00 },/*"%",5*/
{ 0x00, 0x00, 0x00, 0x0C, 0x12, 0x12, 0x12, 0x0A, 0x76, 0x25, 0x29, 0x11, 0x91,
		0x6E, 0x00, 0x00 },/*"&",6*/
{ 0x00, 0x06, 0x06, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 },/*"'",7*/
{ 0x00, 0x40, 0x20, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x10,
		0x20, 0x40, 0x00 },/*"(",8*/
{ 0x00, 0x02, 0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08,
		0x04, 0x02, 0x00 },/*")",9*/
{ 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x6B, 0x1C, 0x1C, 0x6B, 0x08, 0x08, 0x00,
		0x00, 0x00, 0x00 },/*"*",10*/
{ 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x7F, 0x08, 0x08, 0x08, 0x08,
		0x00, 0x00, 0x00 },/*"+",11*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
		0x06, 0x04, 0x03 },/*",",12*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 },/*"-",13*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
		0x06, 0x00, 0x00 },/*".",14*/
{ 0x00, 0x00, 0x80, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04,
		0x02, 0x02, 0x00 },/*"/",15*/
{ 0x00, 0x00, 0x00, 0x18, 0x24, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24,
		0x18, 0x00, 0x00 },/*"0",16*/
{ 0x00, 0x00, 0x00, 0x08, 0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x3E, 0x00, 0x00 },/*"1",17*/
{ 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x20, 0x20, 0x10, 0x08, 0x04, 0x42,
		0x7E, 0x00, 0x00 },/*"2",18*/
{ 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x20, 0x18, 0x20, 0x40, 0x40, 0x42, 0x22,
		0x1C, 0x00, 0x00 },/*"3",19*/
{ 0x00, 0x00, 0x00, 0x20, 0x30, 0x28, 0x24, 0x24, 0x22, 0x22, 0x7E, 0x20, 0x20,
		0x78, 0x00, 0x00 },/*"4",20*/
{ 0x00, 0x00, 0x00, 0x7E, 0x02, 0x02, 0x02, 0x1A, 0x26, 0x40, 0x40, 0x42, 0x22,
		0x1C, 0x00, 0x00 },/*"5",21*/
{ 0x00, 0x00, 0x00, 0x38, 0x24, 0x02, 0x02, 0x1A, 0x26, 0x42, 0x42, 0x42, 0x24,
		0x18, 0x00, 0x00 },/*"6",22*/
{ 0x00, 0x00, 0x00, 0x7E, 0x22, 0x22, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x08, 0x00, 0x00 },/*"7",23*/
{ 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x24, 0x18, 0x24, 0x42, 0x42, 0x42,
		0x3C, 0x00, 0x00 },/*"8",24*/
{ 0x00, 0x00, 0x00, 0x18, 0x24, 0x42, 0x42, 0x42, 0x64, 0x58, 0x40, 0x40, 0x24,
		0x1C, 0x00, 0x00 },/*"9",25*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18,
		0x18, 0x00, 0x00 },/*":",26*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x08, 0x04 },/*";",27*/
{ 0x00, 0x00, 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x20,
		0x40, 0x00, 0x00 },/*"<",28*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00,
		0x00, 0x00, 0x00 },/*"=",29*/
{ 0x00, 0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x20, 0x10, 0x08, 0x04,
		0x02, 0x00, 0x00 },/*">",30*/
{ 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x46, 0x40, 0x20, 0x10, 0x10, 0x00, 0x18,
		0x18, 0x00, 0x00 },/*"?",31*/
{ 0x00, 0x00, 0x00, 0x1C, 0x22, 0x5A, 0x55, 0x55, 0x55, 0x55, 0x2D, 0x42, 0x22,
		0x1C, 0x00, 0x00 },/*"@",32*/
{ 0x00, 0x00, 0x00, 0x08, 0x08, 0x18, 0x14, 0x14, 0x24, 0x3C, 0x22, 0x42, 0x42,
		0xE7, 0x00, 0x00 },/*"A",33*/
{ 0x00, 0x00, 0x00, 0x1F, 0x22, 0x22, 0x22, 0x1E, 0x22, 0x42, 0x42, 0x42, 0x22,
		0x1F, 0x00, 0x00 },/*"B",34*/
{ 0x00, 0x00, 0x00, 0x7C, 0x42, 0x42, 0x01, 0x01, 0x01, 0x01, 0x01, 0x42, 0x22,
		0x1C, 0x00, 0x00 },/*"C",35*/
{ 0x00, 0x00, 0x00, 0x1F, 0x22, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x22,
		0x1F, 0x00, 0x00 },/*"D",36*/
{ 0x00, 0x00, 0x00, 0x3F, 0x42, 0x12, 0x12, 0x1E, 0x12, 0x12, 0x02, 0x42, 0x42,
		0x3F, 0x00, 0x00 },/*"E",37*/
{ 0x00, 0x00, 0x00, 0x3F, 0x42, 0x12, 0x12, 0x1E, 0x12, 0x12, 0x02, 0x02, 0x02,
		0x07, 0x00, 0x00 },/*"F",38*/
{ 0x00, 0x00, 0x00, 0x3C, 0x22, 0x22, 0x01, 0x01, 0x01, 0x71, 0x21, 0x22, 0x22,
		0x1C, 0x00, 0x00 },/*"G",39*/
{ 0x00, 0x00, 0x00, 0xE7, 0x42, 0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x42,
		0xE7, 0x00, 0x00 },/*"H",40*/
{ 0x00, 0x00, 0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x3E, 0x00, 0x00 },/*"I",41*/
{ 0x00, 0x00, 0x00, 0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
		0x10, 0x11, 0x0F },/*"J",42*/
{ 0x00, 0x00, 0x00, 0x77, 0x22, 0x12, 0x0A, 0x0E, 0x0A, 0x12, 0x12, 0x22, 0x22,
		0x77, 0x00, 0x00 },/*"K",43*/
{ 0x00, 0x00, 0x00, 0x07, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x42,
		0x7F, 0x00, 0x00 },/*"L",44*/
{ 0x00, 0x00, 0x00, 0x77, 0x36, 0x36, 0x36, 0x36, 0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
		0x6B, 0x00, 0x00 },/*"M",45*/
{ 0x00, 0x00, 0x00, 0xE3, 0x46, 0x46, 0x4A, 0x4A, 0x52, 0x52, 0x52, 0x62, 0x62,
		0x47, 0x00, 0x00 },/*"N",46*/
{ 0x00, 0x00, 0x00, 0x1C, 0x22, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x22,
		0x1C, 0x00, 0x00 },/*"O",47*/
{ 0x00, 0x00, 0x00, 0x3F, 0x42, 0x42, 0x42, 0x42, 0x3E, 0x02, 0x02, 0x02, 0x02,
		0x07, 0x00, 0x00 },/*"P",48*/
{ 0x00, 0x00, 0x00, 0x1C, 0x22, 0x41, 0x41, 0x41, 0x41, 0x41, 0x4D, 0x53, 0x32,
		0x1C, 0x60, 0x00 },/*"Q",49*/
{ 0x00, 0x00, 0x00, 0x3F, 0x42, 0x42, 0x42, 0x3E, 0x12, 0x12, 0x22, 0x22, 0x42,
		0xC7, 0x00, 0x00 },/*"R",50*/
{ 0x00, 0x00, 0x00, 0x7C, 0x42, 0x42, 0x02, 0x04, 0x18, 0x20, 0x40, 0x42, 0x42,
		0x3E, 0x00, 0x00 },/*"S",51*/
{ 0x00, 0x00, 0x00, 0x7F, 0x49, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x1C, 0x00, 0x00 },/*"T",52*/
{ 0x00, 0x00, 0x00, 0xE7, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42,
		0x3C, 0x00, 0x00 },/*"U",53*/
{ 0x00, 0x00, 0x00, 0xE7, 0x42, 0x42, 0x22, 0x24, 0x24, 0x14, 0x14, 0x18, 0x08,
		0x08, 0x00, 0x00 },/*"V",54*/
{ 0x00, 0x00, 0x00, 0x6B, 0x49, 0x49, 0x49, 0x49, 0x55, 0x55, 0x36, 0x22, 0x22,
		0x22, 0x00, 0x00 },/*"W",55*/
{ 0x00, 0x00, 0x00, 0xE7, 0x42, 0x24, 0x24, 0x18, 0x18, 0x18, 0x24, 0x24, 0x42,
		0xE7, 0x00, 0x00 },/*"X",56*/
{ 0x00, 0x00, 0x00, 0x77, 0x22, 0x22, 0x14, 0x14, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x1C, 0x00, 0x00 },/*"Y",57*/
{ 0x00, 0x00, 0x00, 0x7E, 0x21, 0x20, 0x10, 0x10, 0x08, 0x04, 0x04, 0x42, 0x42,
		0x3F, 0x00, 0x00 },/*"Z",58*/
{ 0x00, 0x78, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x08, 0x78, 0x00 },/*"[",59*/
{ 0x00, 0x00, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x08, 0x10, 0x10, 0x20, 0x20,
		0x20, 0x40, 0x40 },/*"\",60*/
{ 0x00, 0x1E, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
		0x10, 0x1E, 0x00 },/*"]",61*/
{ 0x00, 0x38, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 },/*"^",62*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xFF },/*"_",63*/
{ 0x00, 0x06, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 },/*"`",64*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x78, 0x44, 0x42, 0x42,
		0xFC, 0x00, 0x00 },/*"a",65*/
{ 0x00, 0x00, 0x00, 0x03, 0x02, 0x02, 0x02, 0x1A, 0x26, 0x42, 0x42, 0x42, 0x26,
		0x1A, 0x00, 0x00 },/*"b",66*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x02, 0x02, 0x02, 0x44,
		0x38, 0x00, 0x00 },/*"c",67*/
{ 0x00, 0x00, 0x00, 0x60, 0x40, 0x40, 0x40, 0x78, 0x44, 0x42, 0x42, 0x42, 0x64,
		0xD8, 0x00, 0x00 },/*"d",68*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x7E, 0x02, 0x02, 0x42,
		0x3C, 0x00, 0x00 },/*"e",69*/
{ 0x00, 0x00, 0x00, 0xF0, 0x88, 0x08, 0x08, 0x7E, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x3E, 0x00, 0x00 },/*"f",70*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x22, 0x22, 0x1C, 0x02, 0x3C,
		0x42, 0x42, 0x3C },/*"g",71*/
{ 0x00, 0x00, 0x00, 0x03, 0x02, 0x02, 0x02, 0x3A, 0x46, 0x42, 0x42, 0x42, 0x42,
		0xE7, 0x00, 0x00 },/*"h",72*/
{ 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0E, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x3E, 0x00, 0x00 },/*"i",73*/
{ 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x22, 0x1E },/*"j",74*/
{ 0x00, 0x00, 0x00, 0x03, 0x02, 0x02, 0x02, 0x72, 0x12, 0x0A, 0x16, 0x12, 0x22,
		0x77, 0x00, 0x00 },/*"k",75*/
{ 0x00, 0x00, 0x00, 0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x3E, 0x00, 0x00 },/*"l",76*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x92, 0x92, 0x92, 0x92, 0x92,
		0xB7, 0x00, 0x00 },/*"m",77*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x46, 0x42, 0x42, 0x42, 0x42,
		0xE7, 0x00, 0x00 },/*"n",78*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x42,
		0x3C, 0x00, 0x00 },/*"o",79*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x26, 0x42, 0x42, 0x42, 0x22,
		0x1E, 0x02, 0x07 },/*"p",80*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x44, 0x42, 0x42, 0x42, 0x44,
		0x78, 0x40, 0xE0 },/*"q",81*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x4C, 0x04, 0x04, 0x04, 0x04,
		0x1F, 0x00, 0x00 },/*"r",82*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x42, 0x02, 0x3C, 0x40, 0x42,
		0x3E, 0x00, 0x00 },/*"s",83*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x30, 0x00, 0x00 },/*"t",84*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x42, 0x42, 0x42, 0x42, 0x62,
		0xDC, 0x00, 0x00 },/*"u",85*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0x42, 0x24, 0x24, 0x14, 0x08,
		0x08, 0x00, 0x00 },/*"v",86*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x49, 0x49, 0x55, 0x55, 0x22,
		0x22, 0x00, 0x00 },/*"w",87*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x24, 0x18, 0x18, 0x18, 0x24,
		0x6E, 0x00, 0x00 },/*"x",88*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0x42, 0x24, 0x24, 0x14, 0x18,
		0x08, 0x08, 0x07 },/*"y",89*/
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x22, 0x10, 0x08, 0x08, 0x44,
		0x7E, 0x00, 0x00 },/*"z",90*/
{ 0x00, 0xC0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x10, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0xC0, 0x00 },/*"{",91*/
{ 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
		0x10, 0x10, 0x10 },/*"|",92*/
{ 0x00, 0x06, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 0x08, 0x08, 0x08, 0x08, 0x08,
		0x08, 0x06, 0x00 },/*"}",93*/
{ 0x0C, 0x32, 0xC2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 }, /*"~",94*/
};

void lcd_pins_input(void) {
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = LCD_D3_Pin | LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	/*Configure GPIO pins : PEPin PEPin PEPin */
	GPIO_InitStruct.Pin = LCD_D2_Pin | LCD_D0_Pin | LCD_D7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = LCD_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(LCD_D1_GPIO_Port, &GPIO_InitStruct);

}
void lcd_pins_output(void) {
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = LCD_D3_Pin | LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	/*Configure GPIO pins : PEPin PEPin PEPin */
	GPIO_InitStruct.Pin = LCD_D2_Pin | LCD_D0_Pin | LCD_D7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = LCD_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(LCD_D1_GPIO_Port, &GPIO_InitStruct);
}

void cs_set() {
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}
void cs_clr() {
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
}
void rst_set() {
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
}
void rst_clr() {
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
}
void wr_set() {
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
}
void wr_clr() {
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
}
void rs_set() {
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
}
void rs_clr() {
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
}
void rd_set() {
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
}
void rd_clr() {
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_RESET);
}

void lcd_reset() {
	rst_clr();
	HAL_Delay(100);
	rst_set();
	HAL_Delay(50);
}
#define BIT(byte,pos) ((byte & (1 << pos)) >> pos)
void lcd_write_bus_fast(uint8_t d) {
	GPIOB->BSRR = d;
	GPIOB->BRR = ~d;
}
void lcd_write_data_fast(uint8_t d) {
	lcd_write_bus_fast(d);
	LCD_WR_GPIO_Port->BSRR = (uint32_t) LCD_WR_Pin << 16U;
	LCD_WR_GPIO_Port->BSRR = (uint32_t) LCD_WR_Pin;
}
void lcd_write_data16_fast(uint16_t d) {
	lcd_write_data_fast(d >> 8);
	lcd_write_data_fast(d & 0x00FF);
}

//void lcd_write_bus(uint8_t d) {
//	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, (d & (1 << 0)) >> 0);
//	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, (d & (1 << 1)) >> 1);
//	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, (d & (1 << 2)) >> 2);
//	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, (d & (1 << 3)) >> 3);
//	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (d & (1 << 4)) >> 4);
//	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (d & (1 << 5)) >> 5);
//	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (d & (1 << 6)) >> 6);
//	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (d & (1 << 7)) >> 7);
//}
uint8_t lcd_read_bus() {
	uint8_t data = 0x00;
	data |= HAL_GPIO_ReadPin(LCD_D0_GPIO_Port, LCD_D0_Pin);
	data |= HAL_GPIO_ReadPin(LCD_D1_GPIO_Port, LCD_D1_Pin) << 1;
	data |= HAL_GPIO_ReadPin(LCD_D2_GPIO_Port, LCD_D2_Pin) << 2;
	data |= HAL_GPIO_ReadPin(LCD_D3_GPIO_Port, LCD_D3_Pin) << 3;
	data |= HAL_GPIO_ReadPin(LCD_D4_GPIO_Port, LCD_D4_Pin) << 4;
	data |= HAL_GPIO_ReadPin(LCD_D5_GPIO_Port, LCD_D5_Pin) << 5;
	data |= HAL_GPIO_ReadPin(LCD_D6_GPIO_Port, LCD_D6_Pin) << 6;
	data |= HAL_GPIO_ReadPin(LCD_D7_GPIO_Port, LCD_D7_Pin) << 7;
	return data;
}
void lcd_write_command(uint8_t d) {
	lcd_write_bus_fast(d);
	rs_clr();
	wr_clr();
	wr_set();
	rs_set();
}
uint8_t lcd_read_data() {
	rd_clr();
	rd_set();
	return lcd_read_bus();
}
void lcd_write_data(uint8_t d) {
	lcd_write_bus_fast(d);
	wr_clr();
	wr_set();
}

void lcd_cmd(uint8_t cmd, uint8_t data[], uint8_t result_len, uint8_t direction) {
	// initialize pin state
	lcd_pins_output();
	cs_clr();
	// send cmd
	lcd_write_command(cmd);
	// read result
	if (result_len != 0) {
		if (direction == FROM_LCD) {
			lcd_pins_input();
			for (uint8_t i = 0; i < result_len; i++) {
				data[i] = lcd_read_data();
			}
		} else if (direction == TO_LCD) {
			for (uint8_t i = 0; i < result_len; i++) {
				lcd_write_data(data[i]);
			}
		}
	}
	cs_set(); // 1
}

void address_set(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
	uint8_t tmp[4];
	tmp[0] = (uint8_t) (x1 >> 8);
	tmp[1] = (uint8_t) (x1 & 0x00FF);
	tmp[2] = (uint8_t) (x2 >> 8);
	tmp[3] = (uint8_t) (x2 & 0x00FF);
	lcd_cmd(LCD_SET_X, tmp, 4, TO_LCD);
	tmp[0] = (uint8_t) (y1 >> 8);
	tmp[1] = (uint8_t) (y1 & 0x00FF);
	tmp[2] = (uint8_t) (y2 >> 8);
	tmp[3] = (uint8_t) (y2 & 0x00FF);
	lcd_cmd(LCD_SET_Y, tmp, 4, TO_LCD);
	lcd_cmd(LCD_WRITE_RAM, NULL, 0, TO_LCD);
}

void lcd_init() {
	uint8_t tmp[15];

	wr_set();
	rd_set();
	cs_set();
	rs_set();
	rst_clr();
	HAL_Delay(100);
	rst_set();
	HAL_Delay(50);
	tmp[0] = 0x36;
	tmp[1] = 0x04;
	tmp[2] = 0x00;
	tmp[3] = 0x3C;
	tmp[4] = 0x0F;
	tmp[5] = 0x8F;
	lcd_cmd(0xF1, tmp, 6, TO_LCD);
	tmp[0] = 0x18;
	tmp[1] = 0xA3;
	tmp[2] = 0x12;
	tmp[3] = 0x02;
	tmp[4] = 0xB2;
	tmp[5] = 0x12;
	tmp[6] = 0xFF;
	tmp[7] = 0x10;
	tmp[8] = 0x00;
	lcd_cmd(0xF2, tmp, 9, TO_LCD);
	tmp[0] = 0x21;
	tmp[1] = 0x04;
	lcd_cmd(0xF8, tmp, 2, TO_LCD);
	tmp[0] = 0x00;
	tmp[1] = 0x08;
	lcd_cmd(0xF9, tmp, 2, TO_LCD);
	tmp[0] = 0x08;
	lcd_cmd(0x36, tmp, 1, TO_LCD);
	tmp[0] = 0x00;
	lcd_cmd(0xB4, tmp, 1, TO_LCD);
	tmp[0] = 0x41;
	lcd_cmd(0xC1, tmp, 1, TO_LCD);
	tmp[0] = 0x00;
	tmp[1] = 0x91;
	tmp[2] = 0x80;
	tmp[3] = 0x00;
	lcd_cmd(0xC5, tmp, 4, TO_LCD);

	tmp[0] = 0x0F;
	tmp[1] = 0x1F;
	tmp[2] = 0x1C;
	tmp[3] = 0x0C;
	tmp[4] = 0x0F;
	tmp[5] = 0x08;
	tmp[6] = 0x48;
	tmp[7] = 0x98;
	tmp[8] = 0x37;
	tmp[9] = 0x0A;
	tmp[10] = 0x13;
	tmp[11] = 0x04;
	tmp[12] = 0x11;
	tmp[13] = 0x0D;
	tmp[14] = 0x00;
	lcd_cmd(0xE0, tmp, 15, TO_LCD);

	tmp[0] = 0x0F;
	tmp[1] = 0x32;
	tmp[2] = 0x2E;
	tmp[3] = 0x0B;
	tmp[4] = 0x0D;
	tmp[5] = 0x05;
	tmp[6] = 0x47;
	tmp[7] = 0x75;
	tmp[8] = 0x37;
	tmp[9] = 0x06;
	tmp[10] = 0x10;
	tmp[11] = 0x03;
	tmp[12] = 0x24;
	tmp[13] = 0x20;
	tmp[14] = 0x00;
	lcd_cmd(0xE1, tmp, 15, TO_LCD);

	tmp[0] = 0x55;
	lcd_cmd(0x3A, tmp, 1, TO_LCD);

	lcd_cmd(0x11, NULL, 0, TO_LCD);

	tmp[0] = 0x28;
	lcd_cmd(0x36, tmp, 1, TO_LCD);
	HAL_Delay(120);
	lcd_cmd(0x29, NULL, 0, TO_LCD);
	tmp[0] = (1 << 3) | (1 << 4) | (1 << 5);
	lcd_cmd(0x36, tmp, 1, TO_LCD);

}
void lcd_clr_fast(uint16_t color) {
	uint32_t i;
	address_set(0, 0, 480, 320);
	cs_clr();
	lcd_write_command(LCD_MEM_WRITE);
	for (i = 0; i < (320 * 480); i++) {
		lcd_write_data16_fast(color);
	}
	cs_set();
}
void lcd_clr_rect_fast(uint16_t color, uint16_t x, uint16_t y, uint16_t width,
		uint16_t height) {
	uint32_t i;
	address_set(x, y, x + width, y + height);
	lcd_write_command(LCD_MEM_WRITE);
	cs_clr();
	for (i = 0; i < (width * height); i++) {
		lcd_write_data16_fast(color);
	}
	address_set(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
	cs_set();
}
void lcd_write_buff_fast(const uint8_t *buff, uint16_t x, uint16_t y, uint16_t width,
		uint16_t height) {
	uint32_t i;
	address_set(x, y, x + width-1, y + height-1);
	lcd_write_command(LCD_MEM_WRITE);
	cs_clr();
	for (i = 0; i < 2*(width * height); i++) {
		lcd_write_data_fast(buff[i]);
	}
	address_set(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
	cs_set();
}
void lcd_draw_point(uint16_t color, uint16_t x, uint16_t y) {
	address_set(x, y, x, y);
	lcd_write_command(LCD_MEM_WRITE);
	cs_clr();
	lcd_write_data16_fast(color);
	cs_set();
}
void lcd_draw_char(uint16_t x, uint16_t y, uint16_t front_color,
		uint16_t back_color, uint8_t num, uint8_t size) {
	uint8_t temp;
	uint8_t pos, t;
	num = num - ' ';
	cs_clr();
	address_set(x, y, x + size / 2 - 1, y + size - 1);
	lcd_write_command(LCD_MEM_WRITE);
	for (pos = 0; pos < size; pos++) {
		if (size == 12)
			temp = asc2_1206[num][pos];
		else
			temp = asc2_1608[num][pos];
		for (t = 0; t < size / 2; t++) {
			if (temp & 0x01)
				lcd_draw_point(front_color, x + t, y + pos);
			temp >>= 1;
		}
	}
	cs_set();
}
