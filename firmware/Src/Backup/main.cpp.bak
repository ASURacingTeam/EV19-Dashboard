/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 ** This notice applies to any and all portions of this file
 * that are not between comment pairs USER CODE BEGIN and
 * USER CODE END. Other portions of this file, whether
 * inserted by the user or by software development tools
 * are owned by their respective copyright owners.
 *
 * COPYRIGHT(c) 2019 STMicroelectronics
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *   1. Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *   3. Neither the name of STMicroelectronics nor the names of its contributors
 *      may be used to endorse or promote products derived from this software
 *      without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************
 */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "can.h"
#include "dma.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "stdbool.h"
#include "lcd.h"
#include "SDCard.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
SDCard sd1(&hspi2, SD_CS_Pin, SD_CS_GPIO_Port);
uint8_t led_dc[16];
uint8_t led_dc_in[16];
uint16_t LED[16];
uint8_t data_in[24];
uint32_t led_counter;
uint32_t pulse_counter;
uint8_t gsData[192] = {
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,
		0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,
		0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
		0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
		0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
		0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
		0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
		0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
		1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
};
GPIO_PinState xerr;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init_pins() {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;
	GPIO_InitStruct.Pin = LED_CLK_Pin | LED_MOSI_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	GPIO_InitStruct.Pin = LED_MISO_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(LED_MISO_GPIO_Port, &GPIO_InitStruct);

	GPIO_InitStruct.Pin = LED_GS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LED_GS_GPIO_Port, &GPIO_InitStruct);
}
int _write(int file, char *ptr, int len) {
	while (huart3.gState != HAL_UART_STATE_READY)
		;
	HAL_UART_Transmit_DMA(&huart3, (uint8_t*) ptr, len);
	return len;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim == &htim2) {
		led_counter++;
		xerr = HAL_GPIO_ReadPin(LED_XERR_GPIO_Port, LED_XERR_Pin);
		if (led_counter == 4095) {
			HAL_GPIO_WritePin(LED_BLANK_GPIO_Port, LED_BLANK_Pin, GPIO_PIN_SET);
		} else if (led_counter == 4096) {
			HAL_GPIO_WritePin(LED_BLANK_GPIO_Port, LED_BLANK_Pin,
					GPIO_PIN_RESET);
			led_counter = 0;
		}
	}
}
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
	if (htim == &htim2) {
		pulse_counter++;
	}
}
void TLC5940_clock_out_dc(void) {
	HAL_GPIO_WritePin(LED_VPRG_GPIO_Port, LED_VPRG_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED_DCPRG_GPIO_Port, LED_DCPRG_Pin, GPIO_PIN_SET);
	uint8_t spi_buffer[12] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	spi_buffer[0]= (led_dc[0] << 2) | (led_dc[1] >> 4);
	spi_buffer[1]= (led_dc[1] << 4) | (led_dc[2] >> 2);
	spi_buffer[2]= (led_dc[2] << 6) | led_dc[3];

	spi_buffer[3]= (led_dc[4] << 2) | (led_dc[5] >> 4);
	spi_buffer[4]= (led_dc[5] << 4) | (led_dc[6] >> 2);
	spi_buffer[5]= (led_dc[6] << 6) | led_dc[7];

	spi_buffer[6]= (led_dc[8] << 2) | (led_dc[9] >> 4);
	spi_buffer[7]= (led_dc[9] << 4) | (led_dc[10] >> 2);
	spi_buffer[8]= (led_dc[10] << 6) | led_dc[11];

	spi_buffer[9]= (led_dc[12] << 2) | (led_dc[13] >> 4);
	spi_buffer[10]= (led_dc[13] << 4) | (led_dc[14] >> 2);
	spi_buffer[11]= (led_dc[14] << 6) | led_dc[15];
	while(hspi1.State != HAL_SPI_STATE_READY);
	HAL_SPI_Transmit_DMA(&hspi1,spi_buffer,12);
//
//	for (int i = 0; i < 16; i++) {
//		for (int j = 5; j >= 0; j--) {
//			if (led_dc[i] & (1 << j)) {
//				HAL_GPIO_WritePin(LED_MOSI_GPIO_Port, LED_MOSI_Pin,
//						GPIO_PIN_SET);
//			} else {
//				HAL_GPIO_WritePin(LED_MOSI_GPIO_Port, LED_MOSI_Pin,
//						GPIO_PIN_RESET);
//			}
//			HAL_GPIO_WritePin(LED_CLK_GPIO_Port, LED_CLK_Pin, GPIO_PIN_SET);
//			HAL_GPIO_WritePin(LED_CLK_GPIO_Port, LED_CLK_Pin, GPIO_PIN_RESET);
//		}
//	}
	HAL_GPIO_WritePin(LED_XLAT_GPIO_Port, LED_XLAT_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED_XLAT_GPIO_Port, LED_XLAT_Pin, GPIO_PIN_RESET);
}


void led_update_pwm() {
	uint8_t firstCycleFlag = 0;
	if (HAL_GPIO_ReadPin(LED_VPRG_GPIO_Port, LED_VPRG_Pin) == GPIO_PIN_SET) {
		HAL_GPIO_WritePin(LED_VPRG_GPIO_Port, LED_VPRG_Pin, GPIO_PIN_RESET);
		firstCycleFlag = 1;
	}
	uint16_t GSCLK_Counter = 0;
	uint8_t Data_Counter = 0;
	HAL_GPIO_WritePin(LED_BLANK_GPIO_Port, LED_BLANK_Pin, GPIO_PIN_RESET);
	while (true) {
		if(GSCLK_Counter > 4095){
			HAL_GPIO_WritePin(LED_BLANK_GPIO_Port, LED_BLANK_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(LED_XLAT_GPIO_Port, LED_XLAT_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(LED_XLAT_GPIO_Port, LED_XLAT_Pin, GPIO_PIN_RESET);
			if (firstCycleFlag) {
				HAL_GPIO_WritePin(LED_XLAT_GPIO_Port, LED_XLAT_Pin, GPIO_PIN_SET);
				HAL_GPIO_WritePin(LED_XLAT_GPIO_Port, LED_XLAT_Pin, GPIO_PIN_RESET);
				firstCycleFlag = 0;
			}
			break;
		}else {
			if (!(Data_Counter > 192 - 1)) {
				if (gsData[Data_Counter]){
					HAL_GPIO_WritePin(LED_MOSI_GPIO_Port, LED_MOSI_Pin, GPIO_PIN_SET);
				}else{
					HAL_GPIO_WritePin(LED_MOSI_GPIO_Port, LED_MOSI_Pin, GPIO_PIN_RESET);
				}
				HAL_GPIO_WritePin(LED_CLK_GPIO_Port, LED_CLK_Pin, GPIO_PIN_SET);
				HAL_GPIO_WritePin(LED_CLK_GPIO_Port, LED_CLK_Pin, GPIO_PIN_RESET);
				Data_Counter++;
			}
		}
		HAL_GPIO_WritePin(LED_GS_GPIO_Port, LED_GS_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED_GS_GPIO_Port, LED_GS_Pin, GPIO_PIN_RESET);
		GSCLK_Counter++;
	}
}
void TLC5940_Init(void) {
	HAL_GPIO_WritePin(LED_GS_GPIO_Port, LED_GS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_CLK_GPIO_Port, LED_CLK_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_DCPRG_GPIO_Port, LED_DCPRG_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_VPRG_GPIO_Port, LED_VPRG_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED_XLAT_GPIO_Port, LED_XLAT_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_BLANK_GPIO_Port, LED_BLANK_Pin, GPIO_PIN_SET);
}
/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
	/* USER CODE BEGIN 1 */
//uint32_t i = 0, j = 0;

	bool status = true;
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_DMA_Init();
	MX_USART3_UART_Init();
	MX_SPI2_Init();
	MX_CAN_Init();
	MX_SPI1_Init();
	//MX_TIM2_Init();
	/* USER CODE BEGIN 2 */
	lcd_init();
	lcd_clr_fast(WHITE);
	status = sd1.initalize();
	if (!status) {
		Error_Handler();
	}

	for (int i = 0; i < 16; i++) {
		led_dc[i] = 0x0F;
	}
	for (int i = 0; i < 16; i++) {
		LED[i] = i * 200;
	}



	TLC5940_clock_out_dc();
	init_pins();
	//HAL_TIM_Base_Start_IT(&htim2);
	//HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		led_update_pwm();

	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
		Error_Handler();
	}
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
